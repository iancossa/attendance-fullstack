

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "rhel-openssl-1.0.x", "rhel-openssl-1.1.x", "rhel-openssl-3.0.x"]
  output   = "../../../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  password   String
  name       String
  employeeId String?      @unique
  role       String       @default("employee")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  attendance Attendance[]
}

model Student {
  id             Int                 @id @default(autoincrement())
  studentId      String              @unique
  name           String
  email          String              @unique
  password       String              @default("$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi")
  phone          String?
  department     String
  class          String
  section        String
  year           String
  enrollmentDate DateTime            @default(now())
  status         String              @default("Active")
  gpa            Float?              @default(0.0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  attendance     StudentAttendance[]
}

model StudentAttendance {
  id        Int      @id @default(autoincrement())
  studentId Int
  classId   String
  date      DateTime @default(now())
  status    String   // "present", "absent", "late"
  timestamp String?
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
}

model Attendance {
  id         Int      @id @default(autoincrement())
  employeeId String
  type       String   // "check-in" or "check-out"
  timestamp  DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}
