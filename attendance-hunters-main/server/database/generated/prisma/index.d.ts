
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Staff
 * 
 */
export type Staff = $Result.DefaultSelection<Prisma.$StaffPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model ClassEnrollment
 * 
 */
export type ClassEnrollment = $Result.DefaultSelection<Prisma.$ClassEnrollmentPayload>
/**
 * Model AttendanceRecord
 * 
 */
export type AttendanceRecord = $Result.DefaultSelection<Prisma.$AttendanceRecordPayload>
/**
 * Model AttendanceSession
 * 
 */
export type AttendanceSession = $Result.DefaultSelection<Prisma.$AttendanceSessionPayload>
/**
 * Model QRSession
 * 
 */
export type QRSession = $Result.DefaultSelection<Prisma.$QRSessionPayload>
/**
 * Model AbsenceJustification
 * 
 */
export type AbsenceJustification = $Result.DefaultSelection<Prisma.$AbsenceJustificationPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model StudentRiskTracking
 * 
 */
export type StudentRiskTracking = $Result.DefaultSelection<Prisma.$StudentRiskTrackingPayload>
/**
 * Model StudentAlert
 * 
 */
export type StudentAlert = $Result.DefaultSelection<Prisma.$StudentAlertPayload>
/**
 * Model StudentPoint
 * 
 */
export type StudentPoint = $Result.DefaultSelection<Prisma.$StudentPointPayload>
/**
 * Model Achievement
 * 
 */
export type Achievement = $Result.DefaultSelection<Prisma.$AchievementPayload>
/**
 * Model StudentAchievement
 * 
 */
export type StudentAchievement = $Result.DefaultSelection<Prisma.$StudentAchievementPayload>
/**
 * Model StudentStreak
 * 
 */
export type StudentStreak = $Result.DefaultSelection<Prisma.$StudentStreakPayload>
/**
 * Model LeaderboardRanking
 * 
 */
export type LeaderboardRanking = $Result.DefaultSelection<Prisma.$LeaderboardRankingPayload>
/**
 * Model GeofenceSettings
 * 
 */
export type GeofenceSettings = $Result.DefaultSelection<Prisma.$GeofenceSettingsPayload>
/**
 * Model ClassLocation
 * 
 */
export type ClassLocation = $Result.DefaultSelection<Prisma.$ClassLocationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  admin: 'admin',
  staff: 'staff',
  student: 'student'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const UserStatus: {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const AttendanceStatus: {
  present: 'present',
  absent: 'absent',
  late: 'late',
  excused: 'excused'
};

export type AttendanceStatus = (typeof AttendanceStatus)[keyof typeof AttendanceStatus]


export const AttendanceMethod: {
  qr: 'qr',
  manual: 'manual',
  hybrid: 'hybrid'
};

export type AttendanceMethod = (typeof AttendanceMethod)[keyof typeof AttendanceMethod]


export const SessionType: {
  lecture: 'lecture',
  lab: 'lab',
  tutorial: 'tutorial',
  exam: 'exam'
};

export type SessionType = (typeof SessionType)[keyof typeof SessionType]


export const PlanningStatus: {
  planned: 'planned',
  in_progress: 'in_progress',
  completed: 'completed'
};

export type PlanningStatus = (typeof PlanningStatus)[keyof typeof PlanningStatus]


export const JustificationReason: {
  medical: 'medical',
  family: 'family',
  emergency: 'emergency',
  academic: 'academic',
  other: 'other'
};

export type JustificationReason = (typeof JustificationReason)[keyof typeof JustificationReason]


export const JustificationStatus: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

export type JustificationStatus = (typeof JustificationStatus)[keyof typeof JustificationStatus]


export const DepartmentType: {
  Technology: 'Technology',
  Engineering: 'Engineering',
  Science: 'Science',
  Arts: 'Arts',
  Business: 'Business',
  Other: 'Other'
};

export type DepartmentType = (typeof DepartmentType)[keyof typeof DepartmentType]


export const DepartmentStatus: {
  Active: 'Active',
  Inactive: 'Inactive'
};

export type DepartmentStatus = (typeof DepartmentStatus)[keyof typeof DepartmentStatus]


export const NotificationType: {
  absence_reminder: 'absence_reminder',
  justification_status: 'justification_status',
  attendance_alert: 'attendance_alert',
  class_reminder: 'class_reminder'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const NotificationPriority: {
  low: 'low',
  normal: 'normal',
  high: 'high',
  urgent: 'urgent'
};

export type NotificationPriority = (typeof NotificationPriority)[keyof typeof NotificationPriority]


export const RiskLevel: {
  low: 'low',
  medium: 'medium',
  high: 'high',
  critical: 'critical'
};

export type RiskLevel = (typeof RiskLevel)[keyof typeof RiskLevel]


export const AlertType: {
  notification: 'notification',
  email: 'email',
  parent_email: 'parent_email',
  parent_sms: 'parent_sms'
};

export type AlertType = (typeof AlertType)[keyof typeof AlertType]


export const AlertStatus: {
  pending: 'pending',
  sent: 'sent',
  failed: 'failed'
};

export type AlertStatus = (typeof AlertStatus)[keyof typeof AlertStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type AttendanceStatus = $Enums.AttendanceStatus

export const AttendanceStatus: typeof $Enums.AttendanceStatus

export type AttendanceMethod = $Enums.AttendanceMethod

export const AttendanceMethod: typeof $Enums.AttendanceMethod

export type SessionType = $Enums.SessionType

export const SessionType: typeof $Enums.SessionType

export type PlanningStatus = $Enums.PlanningStatus

export const PlanningStatus: typeof $Enums.PlanningStatus

export type JustificationReason = $Enums.JustificationReason

export const JustificationReason: typeof $Enums.JustificationReason

export type JustificationStatus = $Enums.JustificationStatus

export const JustificationStatus: typeof $Enums.JustificationStatus

export type DepartmentType = $Enums.DepartmentType

export const DepartmentType: typeof $Enums.DepartmentType

export type DepartmentStatus = $Enums.DepartmentStatus

export const DepartmentStatus: typeof $Enums.DepartmentStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type NotificationPriority = $Enums.NotificationPriority

export const NotificationPriority: typeof $Enums.NotificationPriority

export type RiskLevel = $Enums.RiskLevel

export const RiskLevel: typeof $Enums.RiskLevel

export type AlertType = $Enums.AlertType

export const AlertType: typeof $Enums.AlertType

export type AlertStatus = $Enums.AlertStatus

export const AlertStatus: typeof $Enums.AlertStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staff`: Exposes CRUD operations for the **Staff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Staff
    * const staff = await prisma.staff.findMany()
    * ```
    */
  get staff(): Prisma.StaffDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classEnrollment`: Exposes CRUD operations for the **ClassEnrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClassEnrollments
    * const classEnrollments = await prisma.classEnrollment.findMany()
    * ```
    */
  get classEnrollment(): Prisma.ClassEnrollmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attendanceRecord`: Exposes CRUD operations for the **AttendanceRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AttendanceRecords
    * const attendanceRecords = await prisma.attendanceRecord.findMany()
    * ```
    */
  get attendanceRecord(): Prisma.AttendanceRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attendanceSession`: Exposes CRUD operations for the **AttendanceSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AttendanceSessions
    * const attendanceSessions = await prisma.attendanceSession.findMany()
    * ```
    */
  get attendanceSession(): Prisma.AttendanceSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.qRSession`: Exposes CRUD operations for the **QRSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QRSessions
    * const qRSessions = await prisma.qRSession.findMany()
    * ```
    */
  get qRSession(): Prisma.QRSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.absenceJustification`: Exposes CRUD operations for the **AbsenceJustification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AbsenceJustifications
    * const absenceJustifications = await prisma.absenceJustification.findMany()
    * ```
    */
  get absenceJustification(): Prisma.AbsenceJustificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentRiskTracking`: Exposes CRUD operations for the **StudentRiskTracking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentRiskTrackings
    * const studentRiskTrackings = await prisma.studentRiskTracking.findMany()
    * ```
    */
  get studentRiskTracking(): Prisma.StudentRiskTrackingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentAlert`: Exposes CRUD operations for the **StudentAlert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentAlerts
    * const studentAlerts = await prisma.studentAlert.findMany()
    * ```
    */
  get studentAlert(): Prisma.StudentAlertDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentPoint`: Exposes CRUD operations for the **StudentPoint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentPoints
    * const studentPoints = await prisma.studentPoint.findMany()
    * ```
    */
  get studentPoint(): Prisma.StudentPointDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.achievement`: Exposes CRUD operations for the **Achievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achievements
    * const achievements = await prisma.achievement.findMany()
    * ```
    */
  get achievement(): Prisma.AchievementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentAchievement`: Exposes CRUD operations for the **StudentAchievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentAchievements
    * const studentAchievements = await prisma.studentAchievement.findMany()
    * ```
    */
  get studentAchievement(): Prisma.StudentAchievementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentStreak`: Exposes CRUD operations for the **StudentStreak** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentStreaks
    * const studentStreaks = await prisma.studentStreak.findMany()
    * ```
    */
  get studentStreak(): Prisma.StudentStreakDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leaderboardRanking`: Exposes CRUD operations for the **LeaderboardRanking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaderboardRankings
    * const leaderboardRankings = await prisma.leaderboardRanking.findMany()
    * ```
    */
  get leaderboardRanking(): Prisma.LeaderboardRankingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.geofenceSettings`: Exposes CRUD operations for the **GeofenceSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeofenceSettings
    * const geofenceSettings = await prisma.geofenceSettings.findMany()
    * ```
    */
  get geofenceSettings(): Prisma.GeofenceSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classLocation`: Exposes CRUD operations for the **ClassLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClassLocations
    * const classLocations = await prisma.classLocation.findMany()
    * ```
    */
  get classLocation(): Prisma.ClassLocationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Admin: 'Admin',
    Staff: 'Staff',
    Student: 'Student',
    Class: 'Class',
    ClassEnrollment: 'ClassEnrollment',
    AttendanceRecord: 'AttendanceRecord',
    AttendanceSession: 'AttendanceSession',
    QRSession: 'QRSession',
    AbsenceJustification: 'AbsenceJustification',
    Department: 'Department',
    Notification: 'Notification',
    StudentRiskTracking: 'StudentRiskTracking',
    StudentAlert: 'StudentAlert',
    StudentPoint: 'StudentPoint',
    Achievement: 'Achievement',
    StudentAchievement: 'StudentAchievement',
    StudentStreak: 'StudentStreak',
    LeaderboardRanking: 'LeaderboardRanking',
    GeofenceSettings: 'GeofenceSettings',
    ClassLocation: 'ClassLocation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "admin" | "staff" | "student" | "class" | "classEnrollment" | "attendanceRecord" | "attendanceSession" | "qRSession" | "absenceJustification" | "department" | "notification" | "studentRiskTracking" | "studentAlert" | "studentPoint" | "achievement" | "studentAchievement" | "studentStreak" | "leaderboardRanking" | "geofenceSettings" | "classLocation"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Staff: {
        payload: Prisma.$StaffPayload<ExtArgs>
        fields: Prisma.StaffFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findFirst: {
            args: Prisma.StaffFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findMany: {
            args: Prisma.StaffFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          create: {
            args: Prisma.StaffCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          createMany: {
            args: Prisma.StaffCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          delete: {
            args: Prisma.StaffDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          update: {
            args: Prisma.StaffUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          deleteMany: {
            args: Prisma.StaffDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaffUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          upsert: {
            args: Prisma.StaffUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          aggregate: {
            args: Prisma.StaffAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaff>
          }
          groupBy: {
            args: Prisma.StaffGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffCountArgs<ExtArgs>
            result: $Utils.Optional<StaffCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      ClassEnrollment: {
        payload: Prisma.$ClassEnrollmentPayload<ExtArgs>
        fields: Prisma.ClassEnrollmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassEnrollmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassEnrollmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassEnrollmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassEnrollmentPayload>
          }
          findFirst: {
            args: Prisma.ClassEnrollmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassEnrollmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassEnrollmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassEnrollmentPayload>
          }
          findMany: {
            args: Prisma.ClassEnrollmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassEnrollmentPayload>[]
          }
          create: {
            args: Prisma.ClassEnrollmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassEnrollmentPayload>
          }
          createMany: {
            args: Prisma.ClassEnrollmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassEnrollmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassEnrollmentPayload>[]
          }
          delete: {
            args: Prisma.ClassEnrollmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassEnrollmentPayload>
          }
          update: {
            args: Prisma.ClassEnrollmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassEnrollmentPayload>
          }
          deleteMany: {
            args: Prisma.ClassEnrollmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassEnrollmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassEnrollmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassEnrollmentPayload>[]
          }
          upsert: {
            args: Prisma.ClassEnrollmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassEnrollmentPayload>
          }
          aggregate: {
            args: Prisma.ClassEnrollmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassEnrollment>
          }
          groupBy: {
            args: Prisma.ClassEnrollmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassEnrollmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassEnrollmentCountArgs<ExtArgs>
            result: $Utils.Optional<ClassEnrollmentCountAggregateOutputType> | number
          }
        }
      }
      AttendanceRecord: {
        payload: Prisma.$AttendanceRecordPayload<ExtArgs>
        fields: Prisma.AttendanceRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          findFirst: {
            args: Prisma.AttendanceRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          findMany: {
            args: Prisma.AttendanceRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>[]
          }
          create: {
            args: Prisma.AttendanceRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          createMany: {
            args: Prisma.AttendanceRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>[]
          }
          delete: {
            args: Prisma.AttendanceRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          update: {
            args: Prisma.AttendanceRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          deleteMany: {
            args: Prisma.AttendanceRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttendanceRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>[]
          }
          upsert: {
            args: Prisma.AttendanceRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          aggregate: {
            args: Prisma.AttendanceRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendanceRecord>
          }
          groupBy: {
            args: Prisma.AttendanceRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceRecordCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceRecordCountAggregateOutputType> | number
          }
        }
      }
      AttendanceSession: {
        payload: Prisma.$AttendanceSessionPayload<ExtArgs>
        fields: Prisma.AttendanceSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceSessionPayload>
          }
          findFirst: {
            args: Prisma.AttendanceSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceSessionPayload>
          }
          findMany: {
            args: Prisma.AttendanceSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceSessionPayload>[]
          }
          create: {
            args: Prisma.AttendanceSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceSessionPayload>
          }
          createMany: {
            args: Prisma.AttendanceSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceSessionPayload>[]
          }
          delete: {
            args: Prisma.AttendanceSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceSessionPayload>
          }
          update: {
            args: Prisma.AttendanceSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceSessionPayload>
          }
          deleteMany: {
            args: Prisma.AttendanceSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttendanceSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceSessionPayload>[]
          }
          upsert: {
            args: Prisma.AttendanceSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceSessionPayload>
          }
          aggregate: {
            args: Prisma.AttendanceSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendanceSession>
          }
          groupBy: {
            args: Prisma.AttendanceSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceSessionCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceSessionCountAggregateOutputType> | number
          }
        }
      }
      QRSession: {
        payload: Prisma.$QRSessionPayload<ExtArgs>
        fields: Prisma.QRSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QRSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QRSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRSessionPayload>
          }
          findFirst: {
            args: Prisma.QRSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QRSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRSessionPayload>
          }
          findMany: {
            args: Prisma.QRSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRSessionPayload>[]
          }
          create: {
            args: Prisma.QRSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRSessionPayload>
          }
          createMany: {
            args: Prisma.QRSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QRSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRSessionPayload>[]
          }
          delete: {
            args: Prisma.QRSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRSessionPayload>
          }
          update: {
            args: Prisma.QRSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRSessionPayload>
          }
          deleteMany: {
            args: Prisma.QRSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QRSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QRSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRSessionPayload>[]
          }
          upsert: {
            args: Prisma.QRSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRSessionPayload>
          }
          aggregate: {
            args: Prisma.QRSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQRSession>
          }
          groupBy: {
            args: Prisma.QRSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QRSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QRSessionCountArgs<ExtArgs>
            result: $Utils.Optional<QRSessionCountAggregateOutputType> | number
          }
        }
      }
      AbsenceJustification: {
        payload: Prisma.$AbsenceJustificationPayload<ExtArgs>
        fields: Prisma.AbsenceJustificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AbsenceJustificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsenceJustificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AbsenceJustificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsenceJustificationPayload>
          }
          findFirst: {
            args: Prisma.AbsenceJustificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsenceJustificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AbsenceJustificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsenceJustificationPayload>
          }
          findMany: {
            args: Prisma.AbsenceJustificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsenceJustificationPayload>[]
          }
          create: {
            args: Prisma.AbsenceJustificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsenceJustificationPayload>
          }
          createMany: {
            args: Prisma.AbsenceJustificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AbsenceJustificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsenceJustificationPayload>[]
          }
          delete: {
            args: Prisma.AbsenceJustificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsenceJustificationPayload>
          }
          update: {
            args: Prisma.AbsenceJustificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsenceJustificationPayload>
          }
          deleteMany: {
            args: Prisma.AbsenceJustificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AbsenceJustificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AbsenceJustificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsenceJustificationPayload>[]
          }
          upsert: {
            args: Prisma.AbsenceJustificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsenceJustificationPayload>
          }
          aggregate: {
            args: Prisma.AbsenceJustificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAbsenceJustification>
          }
          groupBy: {
            args: Prisma.AbsenceJustificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AbsenceJustificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AbsenceJustificationCountArgs<ExtArgs>
            result: $Utils.Optional<AbsenceJustificationCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      StudentRiskTracking: {
        payload: Prisma.$StudentRiskTrackingPayload<ExtArgs>
        fields: Prisma.StudentRiskTrackingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentRiskTrackingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentRiskTrackingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentRiskTrackingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentRiskTrackingPayload>
          }
          findFirst: {
            args: Prisma.StudentRiskTrackingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentRiskTrackingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentRiskTrackingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentRiskTrackingPayload>
          }
          findMany: {
            args: Prisma.StudentRiskTrackingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentRiskTrackingPayload>[]
          }
          create: {
            args: Prisma.StudentRiskTrackingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentRiskTrackingPayload>
          }
          createMany: {
            args: Prisma.StudentRiskTrackingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentRiskTrackingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentRiskTrackingPayload>[]
          }
          delete: {
            args: Prisma.StudentRiskTrackingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentRiskTrackingPayload>
          }
          update: {
            args: Prisma.StudentRiskTrackingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentRiskTrackingPayload>
          }
          deleteMany: {
            args: Prisma.StudentRiskTrackingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentRiskTrackingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentRiskTrackingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentRiskTrackingPayload>[]
          }
          upsert: {
            args: Prisma.StudentRiskTrackingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentRiskTrackingPayload>
          }
          aggregate: {
            args: Prisma.StudentRiskTrackingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentRiskTracking>
          }
          groupBy: {
            args: Prisma.StudentRiskTrackingGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentRiskTrackingGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentRiskTrackingCountArgs<ExtArgs>
            result: $Utils.Optional<StudentRiskTrackingCountAggregateOutputType> | number
          }
        }
      }
      StudentAlert: {
        payload: Prisma.$StudentAlertPayload<ExtArgs>
        fields: Prisma.StudentAlertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentAlertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAlertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentAlertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAlertPayload>
          }
          findFirst: {
            args: Prisma.StudentAlertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAlertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentAlertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAlertPayload>
          }
          findMany: {
            args: Prisma.StudentAlertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAlertPayload>[]
          }
          create: {
            args: Prisma.StudentAlertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAlertPayload>
          }
          createMany: {
            args: Prisma.StudentAlertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentAlertCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAlertPayload>[]
          }
          delete: {
            args: Prisma.StudentAlertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAlertPayload>
          }
          update: {
            args: Prisma.StudentAlertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAlertPayload>
          }
          deleteMany: {
            args: Prisma.StudentAlertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentAlertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentAlertUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAlertPayload>[]
          }
          upsert: {
            args: Prisma.StudentAlertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAlertPayload>
          }
          aggregate: {
            args: Prisma.StudentAlertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentAlert>
          }
          groupBy: {
            args: Prisma.StudentAlertGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentAlertGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentAlertCountArgs<ExtArgs>
            result: $Utils.Optional<StudentAlertCountAggregateOutputType> | number
          }
        }
      }
      StudentPoint: {
        payload: Prisma.$StudentPointPayload<ExtArgs>
        fields: Prisma.StudentPointFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentPointFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPointPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentPointFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPointPayload>
          }
          findFirst: {
            args: Prisma.StudentPointFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPointPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentPointFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPointPayload>
          }
          findMany: {
            args: Prisma.StudentPointFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPointPayload>[]
          }
          create: {
            args: Prisma.StudentPointCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPointPayload>
          }
          createMany: {
            args: Prisma.StudentPointCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentPointCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPointPayload>[]
          }
          delete: {
            args: Prisma.StudentPointDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPointPayload>
          }
          update: {
            args: Prisma.StudentPointUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPointPayload>
          }
          deleteMany: {
            args: Prisma.StudentPointDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentPointUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentPointUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPointPayload>[]
          }
          upsert: {
            args: Prisma.StudentPointUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPointPayload>
          }
          aggregate: {
            args: Prisma.StudentPointAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentPoint>
          }
          groupBy: {
            args: Prisma.StudentPointGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentPointGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentPointCountArgs<ExtArgs>
            result: $Utils.Optional<StudentPointCountAggregateOutputType> | number
          }
        }
      }
      Achievement: {
        payload: Prisma.$AchievementPayload<ExtArgs>
        fields: Prisma.AchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findFirst: {
            args: Prisma.AchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findMany: {
            args: Prisma.AchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          create: {
            args: Prisma.AchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          createMany: {
            args: Prisma.AchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          delete: {
            args: Prisma.AchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          update: {
            args: Prisma.AchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          deleteMany: {
            args: Prisma.AchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AchievementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          upsert: {
            args: Prisma.AchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          aggregate: {
            args: Prisma.AchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAchievement>
          }
          groupBy: {
            args: Prisma.AchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AchievementCountArgs<ExtArgs>
            result: $Utils.Optional<AchievementCountAggregateOutputType> | number
          }
        }
      }
      StudentAchievement: {
        payload: Prisma.$StudentAchievementPayload<ExtArgs>
        fields: Prisma.StudentAchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentAchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentAchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAchievementPayload>
          }
          findFirst: {
            args: Prisma.StudentAchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentAchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAchievementPayload>
          }
          findMany: {
            args: Prisma.StudentAchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAchievementPayload>[]
          }
          create: {
            args: Prisma.StudentAchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAchievementPayload>
          }
          createMany: {
            args: Prisma.StudentAchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentAchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAchievementPayload>[]
          }
          delete: {
            args: Prisma.StudentAchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAchievementPayload>
          }
          update: {
            args: Prisma.StudentAchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAchievementPayload>
          }
          deleteMany: {
            args: Prisma.StudentAchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentAchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentAchievementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAchievementPayload>[]
          }
          upsert: {
            args: Prisma.StudentAchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAchievementPayload>
          }
          aggregate: {
            args: Prisma.StudentAchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentAchievement>
          }
          groupBy: {
            args: Prisma.StudentAchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentAchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentAchievementCountArgs<ExtArgs>
            result: $Utils.Optional<StudentAchievementCountAggregateOutputType> | number
          }
        }
      }
      StudentStreak: {
        payload: Prisma.$StudentStreakPayload<ExtArgs>
        fields: Prisma.StudentStreakFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentStreakFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentStreakPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentStreakFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentStreakPayload>
          }
          findFirst: {
            args: Prisma.StudentStreakFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentStreakPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentStreakFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentStreakPayload>
          }
          findMany: {
            args: Prisma.StudentStreakFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentStreakPayload>[]
          }
          create: {
            args: Prisma.StudentStreakCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentStreakPayload>
          }
          createMany: {
            args: Prisma.StudentStreakCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentStreakCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentStreakPayload>[]
          }
          delete: {
            args: Prisma.StudentStreakDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentStreakPayload>
          }
          update: {
            args: Prisma.StudentStreakUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentStreakPayload>
          }
          deleteMany: {
            args: Prisma.StudentStreakDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentStreakUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentStreakUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentStreakPayload>[]
          }
          upsert: {
            args: Prisma.StudentStreakUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentStreakPayload>
          }
          aggregate: {
            args: Prisma.StudentStreakAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentStreak>
          }
          groupBy: {
            args: Prisma.StudentStreakGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentStreakGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentStreakCountArgs<ExtArgs>
            result: $Utils.Optional<StudentStreakCountAggregateOutputType> | number
          }
        }
      }
      LeaderboardRanking: {
        payload: Prisma.$LeaderboardRankingPayload<ExtArgs>
        fields: Prisma.LeaderboardRankingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaderboardRankingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaderboardRankingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaderboardRankingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaderboardRankingPayload>
          }
          findFirst: {
            args: Prisma.LeaderboardRankingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaderboardRankingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaderboardRankingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaderboardRankingPayload>
          }
          findMany: {
            args: Prisma.LeaderboardRankingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaderboardRankingPayload>[]
          }
          create: {
            args: Prisma.LeaderboardRankingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaderboardRankingPayload>
          }
          createMany: {
            args: Prisma.LeaderboardRankingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaderboardRankingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaderboardRankingPayload>[]
          }
          delete: {
            args: Prisma.LeaderboardRankingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaderboardRankingPayload>
          }
          update: {
            args: Prisma.LeaderboardRankingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaderboardRankingPayload>
          }
          deleteMany: {
            args: Prisma.LeaderboardRankingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaderboardRankingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeaderboardRankingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaderboardRankingPayload>[]
          }
          upsert: {
            args: Prisma.LeaderboardRankingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaderboardRankingPayload>
          }
          aggregate: {
            args: Prisma.LeaderboardRankingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaderboardRanking>
          }
          groupBy: {
            args: Prisma.LeaderboardRankingGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaderboardRankingGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaderboardRankingCountArgs<ExtArgs>
            result: $Utils.Optional<LeaderboardRankingCountAggregateOutputType> | number
          }
        }
      }
      GeofenceSettings: {
        payload: Prisma.$GeofenceSettingsPayload<ExtArgs>
        fields: Prisma.GeofenceSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeofenceSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeofenceSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeofenceSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeofenceSettingsPayload>
          }
          findFirst: {
            args: Prisma.GeofenceSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeofenceSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeofenceSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeofenceSettingsPayload>
          }
          findMany: {
            args: Prisma.GeofenceSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeofenceSettingsPayload>[]
          }
          create: {
            args: Prisma.GeofenceSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeofenceSettingsPayload>
          }
          createMany: {
            args: Prisma.GeofenceSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GeofenceSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeofenceSettingsPayload>[]
          }
          delete: {
            args: Prisma.GeofenceSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeofenceSettingsPayload>
          }
          update: {
            args: Prisma.GeofenceSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeofenceSettingsPayload>
          }
          deleteMany: {
            args: Prisma.GeofenceSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeofenceSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GeofenceSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeofenceSettingsPayload>[]
          }
          upsert: {
            args: Prisma.GeofenceSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeofenceSettingsPayload>
          }
          aggregate: {
            args: Prisma.GeofenceSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeofenceSettings>
          }
          groupBy: {
            args: Prisma.GeofenceSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeofenceSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeofenceSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<GeofenceSettingsCountAggregateOutputType> | number
          }
        }
      }
      ClassLocation: {
        payload: Prisma.$ClassLocationPayload<ExtArgs>
        fields: Prisma.ClassLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLocationPayload>
          }
          findFirst: {
            args: Prisma.ClassLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLocationPayload>
          }
          findMany: {
            args: Prisma.ClassLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLocationPayload>[]
          }
          create: {
            args: Prisma.ClassLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLocationPayload>
          }
          createMany: {
            args: Prisma.ClassLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLocationPayload>[]
          }
          delete: {
            args: Prisma.ClassLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLocationPayload>
          }
          update: {
            args: Prisma.ClassLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLocationPayload>
          }
          deleteMany: {
            args: Prisma.ClassLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassLocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLocationPayload>[]
          }
          upsert: {
            args: Prisma.ClassLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLocationPayload>
          }
          aggregate: {
            args: Prisma.ClassLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassLocation>
          }
          groupBy: {
            args: Prisma.ClassLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassLocationCountArgs<ExtArgs>
            result: $Utils.Optional<ClassLocationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    admin?: AdminOmit
    staff?: StaffOmit
    student?: StudentOmit
    class?: ClassOmit
    classEnrollment?: ClassEnrollmentOmit
    attendanceRecord?: AttendanceRecordOmit
    attendanceSession?: AttendanceSessionOmit
    qRSession?: QRSessionOmit
    absenceJustification?: AbsenceJustificationOmit
    department?: DepartmentOmit
    notification?: NotificationOmit
    studentRiskTracking?: StudentRiskTrackingOmit
    studentAlert?: StudentAlertOmit
    studentPoint?: StudentPointOmit
    achievement?: AchievementOmit
    studentAchievement?: StudentAchievementOmit
    studentStreak?: StudentStreakOmit
    leaderboardRanking?: LeaderboardRankingOmit
    geofenceSettings?: GeofenceSettingsOmit
    classLocation?: ClassLocationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    notifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type StaffCountOutputType
   */

  export type StaffCountOutputType = {
    classes: number
    attendanceSessions: number
    attendanceRecords: number
    absenceJustifications: number
    departments: number
    studentAlerts: number
  }

  export type StaffCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | StaffCountOutputTypeCountClassesArgs
    attendanceSessions?: boolean | StaffCountOutputTypeCountAttendanceSessionsArgs
    attendanceRecords?: boolean | StaffCountOutputTypeCountAttendanceRecordsArgs
    absenceJustifications?: boolean | StaffCountOutputTypeCountAbsenceJustificationsArgs
    departments?: boolean | StaffCountOutputTypeCountDepartmentsArgs
    studentAlerts?: boolean | StaffCountOutputTypeCountStudentAlertsArgs
  }

  // Custom InputTypes
  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCountOutputType
     */
    select?: StaffCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountAttendanceSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceSessionWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountAttendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceRecordWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountAbsenceJustificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceJustificationWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountStudentAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAlertWhereInput
  }


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    classEnrollments: number
    attendanceRecords: number
    absenceJustifications: number
    studentRiskTracking: number
    studentAlerts: number
    studentPoints: number
    studentAchievements: number
    studentStreaks: number
    leaderboardRankings: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classEnrollments?: boolean | StudentCountOutputTypeCountClassEnrollmentsArgs
    attendanceRecords?: boolean | StudentCountOutputTypeCountAttendanceRecordsArgs
    absenceJustifications?: boolean | StudentCountOutputTypeCountAbsenceJustificationsArgs
    studentRiskTracking?: boolean | StudentCountOutputTypeCountStudentRiskTrackingArgs
    studentAlerts?: boolean | StudentCountOutputTypeCountStudentAlertsArgs
    studentPoints?: boolean | StudentCountOutputTypeCountStudentPointsArgs
    studentAchievements?: boolean | StudentCountOutputTypeCountStudentAchievementsArgs
    studentStreaks?: boolean | StudentCountOutputTypeCountStudentStreaksArgs
    leaderboardRankings?: boolean | StudentCountOutputTypeCountLeaderboardRankingsArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountClassEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassEnrollmentWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAttendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceRecordWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAbsenceJustificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceJustificationWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountStudentRiskTrackingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentRiskTrackingWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountStudentAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAlertWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountStudentPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPointWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountStudentAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAchievementWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountStudentStreaksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentStreakWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountLeaderboardRankingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaderboardRankingWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    classEnrollments: number
    attendanceRecords: number
    attendanceSessions: number
    absenceJustifications: number
    studentPoints: number
    studentStreaks: number
    leaderboardRankings: number
    classLocations: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classEnrollments?: boolean | ClassCountOutputTypeCountClassEnrollmentsArgs
    attendanceRecords?: boolean | ClassCountOutputTypeCountAttendanceRecordsArgs
    attendanceSessions?: boolean | ClassCountOutputTypeCountAttendanceSessionsArgs
    absenceJustifications?: boolean | ClassCountOutputTypeCountAbsenceJustificationsArgs
    studentPoints?: boolean | ClassCountOutputTypeCountStudentPointsArgs
    studentStreaks?: boolean | ClassCountOutputTypeCountStudentStreaksArgs
    leaderboardRankings?: boolean | ClassCountOutputTypeCountLeaderboardRankingsArgs
    classLocations?: boolean | ClassCountOutputTypeCountClassLocationsArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountClassEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassEnrollmentWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountAttendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceRecordWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountAttendanceSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceSessionWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountAbsenceJustificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceJustificationWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPointWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentStreaksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentStreakWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountLeaderboardRankingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaderboardRankingWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountClassLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassLocationWhereInput
  }


  /**
   * Count Type AttendanceRecordCountOutputType
   */

  export type AttendanceRecordCountOutputType = {
    absenceJustifications: number
  }

  export type AttendanceRecordCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    absenceJustifications?: boolean | AttendanceRecordCountOutputTypeCountAbsenceJustificationsArgs
  }

  // Custom InputTypes
  /**
   * AttendanceRecordCountOutputType without action
   */
  export type AttendanceRecordCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecordCountOutputType
     */
    select?: AttendanceRecordCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AttendanceRecordCountOutputType without action
   */
  export type AttendanceRecordCountOutputTypeCountAbsenceJustificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceJustificationWhereInput
  }


  /**
   * Count Type AttendanceSessionCountOutputType
   */

  export type AttendanceSessionCountOutputType = {
    qrSessions: number
  }

  export type AttendanceSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qrSessions?: boolean | AttendanceSessionCountOutputTypeCountQrSessionsArgs
  }

  // Custom InputTypes
  /**
   * AttendanceSessionCountOutputType without action
   */
  export type AttendanceSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSessionCountOutputType
     */
    select?: AttendanceSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AttendanceSessionCountOutputType without action
   */
  export type AttendanceSessionCountOutputTypeCountQrSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QRSessionWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    leaderboardRankings: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaderboardRankings?: boolean | DepartmentCountOutputTypeCountLeaderboardRankingsArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountLeaderboardRankingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaderboardRankingWhereInput
  }


  /**
   * Count Type AchievementCountOutputType
   */

  export type AchievementCountOutputType = {
    studentAchievements: number
  }

  export type AchievementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentAchievements?: boolean | AchievementCountOutputTypeCountStudentAchievementsArgs
  }

  // Custom InputTypes
  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchievementCountOutputType
     */
    select?: AchievementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeCountStudentAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAchievementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    phone: string | null
    avatarUrl: string | null
    lastSeen: Date | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    phone: string | null
    avatarUrl: string | null
    lastSeen: Date | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    status: number
    phone: number
    avatarUrl: number
    lastSeen: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    status?: true
    phone?: true
    avatarUrl?: true
    lastSeen?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    status?: true
    phone?: true
    avatarUrl?: true
    lastSeen?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    status?: true
    phone?: true
    avatarUrl?: true
    lastSeen?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status: $Enums.UserStatus
    phone: string | null
    avatarUrl: string | null
    lastSeen: Date | null
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    status?: boolean
    phone?: boolean
    avatarUrl?: boolean
    lastSeen?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    admin?: boolean | User$adminArgs<ExtArgs>
    staff?: boolean | User$staffArgs<ExtArgs>
    student?: boolean | User$studentArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    status?: boolean
    phone?: boolean
    avatarUrl?: boolean
    lastSeen?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    status?: boolean
    phone?: boolean
    avatarUrl?: boolean
    lastSeen?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    status?: boolean
    phone?: boolean
    avatarUrl?: boolean
    lastSeen?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "role" | "status" | "phone" | "avatarUrl" | "lastSeen" | "lastLogin" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | User$adminArgs<ExtArgs>
    staff?: boolean | User$staffArgs<ExtArgs>
    student?: boolean | User$studentArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs> | null
      staff: Prisma.$StaffPayload<ExtArgs> | null
      student: Prisma.$StudentPayload<ExtArgs> | null
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string
      role: $Enums.UserRole
      status: $Enums.UserStatus
      phone: string | null
      avatarUrl: string | null
      lastSeen: Date | null
      lastLogin: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends User$adminArgs<ExtArgs> = {}>(args?: Subset<T, User$adminArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    staff<T extends User$staffArgs<ExtArgs> = {}>(args?: Subset<T, User$staffArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    student<T extends User$studentArgs<ExtArgs> = {}>(args?: Subset<T, User$studentArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly phone: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly lastSeen: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.admin
   */
  export type User$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
  }

  /**
   * User.staff
   */
  export type User$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
  }

  /**
   * User.student
   */
  export type User$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    userId: number | null
    adminLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    adminLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    userId: number
    adminLevel: number
    permissions: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    userId?: true
    adminLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    userId?: true
    adminLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    userId?: true
    adminLevel?: true
    permissions?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    userId: number
    adminLevel: string
    permissions: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    adminLevel?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    adminLevel?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    adminLevel?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    userId?: boolean
    adminLevel?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "adminLevel" | "permissions" | "createdAt" | "updatedAt", ExtArgs["result"]["admin"]>
  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      adminLevel: string
      permissions: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly userId: FieldRef<"Admin", 'Int'>
    readonly adminLevel: FieldRef<"Admin", 'String'>
    readonly permissions: FieldRef<"Admin", 'Json'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly updatedAt: FieldRef<"Admin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model Staff
   */

  export type AggregateStaff = {
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  export type StaffAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    salary: Decimal | null
  }

  export type StaffSumAggregateOutputType = {
    id: number | null
    userId: number | null
    salary: Decimal | null
  }

  export type StaffMinAggregateOutputType = {
    id: number | null
    userId: number | null
    employeeId: string | null
    department: string | null
    position: string | null
    joinDate: Date | null
    salary: Decimal | null
    officeLocation: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    employeeId: string | null
    department: string | null
    position: string | null
    joinDate: Date | null
    salary: Decimal | null
    officeLocation: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffCountAggregateOutputType = {
    id: number
    userId: number
    employeeId: number
    department: number
    position: number
    joinDate: number
    salary: number
    officeLocation: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StaffAvgAggregateInputType = {
    id?: true
    userId?: true
    salary?: true
  }

  export type StaffSumAggregateInputType = {
    id?: true
    userId?: true
    salary?: true
  }

  export type StaffMinAggregateInputType = {
    id?: true
    userId?: true
    employeeId?: true
    department?: true
    position?: true
    joinDate?: true
    salary?: true
    officeLocation?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffMaxAggregateInputType = {
    id?: true
    userId?: true
    employeeId?: true
    department?: true
    position?: true
    joinDate?: true
    salary?: true
    officeLocation?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffCountAggregateInputType = {
    id?: true
    userId?: true
    employeeId?: true
    department?: true
    position?: true
    joinDate?: true
    salary?: true
    officeLocation?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StaffAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to aggregate.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Staff
    **/
    _count?: true | StaffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMaxAggregateInputType
  }

  export type GetStaffAggregateType<T extends StaffAggregateArgs> = {
        [P in keyof T & keyof AggregateStaff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaff[P]>
      : GetScalarType<T[P], AggregateStaff[P]>
  }




  export type StaffGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithAggregationInput | StaffOrderByWithAggregationInput[]
    by: StaffScalarFieldEnum[] | StaffScalarFieldEnum
    having?: StaffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCountAggregateInputType | true
    _avg?: StaffAvgAggregateInputType
    _sum?: StaffSumAggregateInputType
    _min?: StaffMinAggregateInputType
    _max?: StaffMaxAggregateInputType
  }

  export type StaffGroupByOutputType = {
    id: number
    userId: number
    employeeId: string
    department: string | null
    position: string | null
    joinDate: Date | null
    salary: Decimal | null
    officeLocation: string | null
    createdAt: Date
    updatedAt: Date
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  type GetStaffGroupByPayload<T extends StaffGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffGroupByOutputType[P]>
            : GetScalarType<T[P], StaffGroupByOutputType[P]>
        }
      >
    >


  export type StaffSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    employeeId?: boolean
    department?: boolean
    position?: boolean
    joinDate?: boolean
    salary?: boolean
    officeLocation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    classes?: boolean | Staff$classesArgs<ExtArgs>
    attendanceSessions?: boolean | Staff$attendanceSessionsArgs<ExtArgs>
    attendanceRecords?: boolean | Staff$attendanceRecordsArgs<ExtArgs>
    absenceJustifications?: boolean | Staff$absenceJustificationsArgs<ExtArgs>
    departments?: boolean | Staff$departmentsArgs<ExtArgs>
    studentAlerts?: boolean | Staff$studentAlertsArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    employeeId?: boolean
    department?: boolean
    position?: boolean
    joinDate?: boolean
    salary?: boolean
    officeLocation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    employeeId?: boolean
    department?: boolean
    position?: boolean
    joinDate?: boolean
    salary?: boolean
    officeLocation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectScalar = {
    id?: boolean
    userId?: boolean
    employeeId?: boolean
    department?: boolean
    position?: boolean
    joinDate?: boolean
    salary?: boolean
    officeLocation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StaffOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "employeeId" | "department" | "position" | "joinDate" | "salary" | "officeLocation" | "createdAt" | "updatedAt", ExtArgs["result"]["staff"]>
  export type StaffInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    classes?: boolean | Staff$classesArgs<ExtArgs>
    attendanceSessions?: boolean | Staff$attendanceSessionsArgs<ExtArgs>
    attendanceRecords?: boolean | Staff$attendanceRecordsArgs<ExtArgs>
    absenceJustifications?: boolean | Staff$absenceJustificationsArgs<ExtArgs>
    departments?: boolean | Staff$departmentsArgs<ExtArgs>
    studentAlerts?: boolean | Staff$studentAlertsArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StaffIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StaffIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StaffPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Staff"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      classes: Prisma.$ClassPayload<ExtArgs>[]
      attendanceSessions: Prisma.$AttendanceSessionPayload<ExtArgs>[]
      attendanceRecords: Prisma.$AttendanceRecordPayload<ExtArgs>[]
      absenceJustifications: Prisma.$AbsenceJustificationPayload<ExtArgs>[]
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
      studentAlerts: Prisma.$StudentAlertPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      employeeId: string
      department: string | null
      position: string | null
      joinDate: Date | null
      salary: Prisma.Decimal | null
      officeLocation: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["staff"]>
    composites: {}
  }

  type StaffGetPayload<S extends boolean | null | undefined | StaffDefaultArgs> = $Result.GetResult<Prisma.$StaffPayload, S>

  type StaffCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffCountAggregateInputType | true
    }

  export interface StaffDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Staff'], meta: { name: 'Staff' } }
    /**
     * Find zero or one Staff that matches the filter.
     * @param {StaffFindUniqueArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffFindUniqueArgs>(args: SelectSubset<T, StaffFindUniqueArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Staff that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffFindUniqueOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffFindFirstArgs>(args?: SelectSubset<T, StaffFindFirstArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Staff
     * const staff = await prisma.staff.findMany()
     * 
     * // Get first 10 Staff
     * const staff = await prisma.staff.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffWithIdOnly = await prisma.staff.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffFindManyArgs>(args?: SelectSubset<T, StaffFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Staff.
     * @param {StaffCreateArgs} args - Arguments to create a Staff.
     * @example
     * // Create one Staff
     * const Staff = await prisma.staff.create({
     *   data: {
     *     // ... data to create a Staff
     *   }
     * })
     * 
     */
    create<T extends StaffCreateArgs>(args: SelectSubset<T, StaffCreateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Staff.
     * @param {StaffCreateManyArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffCreateManyArgs>(args?: SelectSubset<T, StaffCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Staff and returns the data saved in the database.
     * @param {StaffCreateManyAndReturnArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Staff and only return the `id`
     * const staffWithIdOnly = await prisma.staff.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Staff.
     * @param {StaffDeleteArgs} args - Arguments to delete one Staff.
     * @example
     * // Delete one Staff
     * const Staff = await prisma.staff.delete({
     *   where: {
     *     // ... filter to delete one Staff
     *   }
     * })
     * 
     */
    delete<T extends StaffDeleteArgs>(args: SelectSubset<T, StaffDeleteArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Staff.
     * @param {StaffUpdateArgs} args - Arguments to update one Staff.
     * @example
     * // Update one Staff
     * const staff = await prisma.staff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffUpdateArgs>(args: SelectSubset<T, StaffUpdateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Staff.
     * @param {StaffDeleteManyArgs} args - Arguments to filter Staff to delete.
     * @example
     * // Delete a few Staff
     * const { count } = await prisma.staff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffDeleteManyArgs>(args?: SelectSubset<T, StaffDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffUpdateManyArgs>(args: SelectSubset<T, StaffUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff and returns the data updated in the database.
     * @param {StaffUpdateManyAndReturnArgs} args - Arguments to update many Staff.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Staff and only return the `id`
     * const staffWithIdOnly = await prisma.staff.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaffUpdateManyAndReturnArgs>(args: SelectSubset<T, StaffUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Staff.
     * @param {StaffUpsertArgs} args - Arguments to update or create a Staff.
     * @example
     * // Update or create a Staff
     * const staff = await prisma.staff.upsert({
     *   create: {
     *     // ... data to create a Staff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Staff we want to update
     *   }
     * })
     */
    upsert<T extends StaffUpsertArgs>(args: SelectSubset<T, StaffUpsertArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCountArgs} args - Arguments to filter Staff to count.
     * @example
     * // Count the number of Staff
     * const count = await prisma.staff.count({
     *   where: {
     *     // ... the filter for the Staff we want to count
     *   }
     * })
    **/
    count<T extends StaffCountArgs>(
      args?: Subset<T, StaffCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAggregateArgs>(args: Subset<T, StaffAggregateArgs>): Prisma.PrismaPromise<GetStaffAggregateType<T>>

    /**
     * Group by Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffGroupByArgs['orderBy'] }
        : { orderBy?: StaffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Staff model
   */
  readonly fields: StaffFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Staff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    classes<T extends Staff$classesArgs<ExtArgs> = {}>(args?: Subset<T, Staff$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attendanceSessions<T extends Staff$attendanceSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Staff$attendanceSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attendanceRecords<T extends Staff$attendanceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Staff$attendanceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    absenceJustifications<T extends Staff$absenceJustificationsArgs<ExtArgs> = {}>(args?: Subset<T, Staff$absenceJustificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    departments<T extends Staff$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, Staff$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentAlerts<T extends Staff$studentAlertsArgs<ExtArgs> = {}>(args?: Subset<T, Staff$studentAlertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Staff model
   */
  interface StaffFieldRefs {
    readonly id: FieldRef<"Staff", 'Int'>
    readonly userId: FieldRef<"Staff", 'Int'>
    readonly employeeId: FieldRef<"Staff", 'String'>
    readonly department: FieldRef<"Staff", 'String'>
    readonly position: FieldRef<"Staff", 'String'>
    readonly joinDate: FieldRef<"Staff", 'DateTime'>
    readonly salary: FieldRef<"Staff", 'Decimal'>
    readonly officeLocation: FieldRef<"Staff", 'String'>
    readonly createdAt: FieldRef<"Staff", 'DateTime'>
    readonly updatedAt: FieldRef<"Staff", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Staff findUnique
   */
  export type StaffFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findUniqueOrThrow
   */
  export type StaffFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findFirst
   */
  export type StaffFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findFirstOrThrow
   */
  export type StaffFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findMany
   */
  export type StaffFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff create
   */
  export type StaffCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to create a Staff.
     */
    data: XOR<StaffCreateInput, StaffUncheckedCreateInput>
  }

  /**
   * Staff createMany
   */
  export type StaffCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Staff createManyAndReturn
   */
  export type StaffCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Staff update
   */
  export type StaffUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to update a Staff.
     */
    data: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
    /**
     * Choose, which Staff to update.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff updateMany
   */
  export type StaffUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to update.
     */
    limit?: number
  }

  /**
   * Staff updateManyAndReturn
   */
  export type StaffUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Staff upsert
   */
  export type StaffUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The filter to search for the Staff to update in case it exists.
     */
    where: StaffWhereUniqueInput
    /**
     * In case the Staff found by the `where` argument doesn't exist, create a new Staff with this data.
     */
    create: XOR<StaffCreateInput, StaffUncheckedCreateInput>
    /**
     * In case the Staff was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
  }

  /**
   * Staff delete
   */
  export type StaffDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter which Staff to delete.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff deleteMany
   */
  export type StaffDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to delete
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to delete.
     */
    limit?: number
  }

  /**
   * Staff.classes
   */
  export type Staff$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Staff.attendanceSessions
   */
  export type Staff$attendanceSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
    where?: AttendanceSessionWhereInput
    orderBy?: AttendanceSessionOrderByWithRelationInput | AttendanceSessionOrderByWithRelationInput[]
    cursor?: AttendanceSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceSessionScalarFieldEnum | AttendanceSessionScalarFieldEnum[]
  }

  /**
   * Staff.attendanceRecords
   */
  export type Staff$attendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    where?: AttendanceRecordWhereInput
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    cursor?: AttendanceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * Staff.absenceJustifications
   */
  export type Staff$absenceJustificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    where?: AbsenceJustificationWhereInput
    orderBy?: AbsenceJustificationOrderByWithRelationInput | AbsenceJustificationOrderByWithRelationInput[]
    cursor?: AbsenceJustificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceJustificationScalarFieldEnum | AbsenceJustificationScalarFieldEnum[]
  }

  /**
   * Staff.departments
   */
  export type Staff$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Staff.studentAlerts
   */
  export type Staff$studentAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
    where?: StudentAlertWhereInput
    orderBy?: StudentAlertOrderByWithRelationInput | StudentAlertOrderByWithRelationInput[]
    cursor?: StudentAlertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentAlertScalarFieldEnum | StudentAlertScalarFieldEnum[]
  }

  /**
   * Staff without action
   */
  export type StaffDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    gpa: Decimal | null
  }

  export type StudentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    gpa: Decimal | null
  }

  export type StudentMinAggregateOutputType = {
    id: number | null
    userId: number | null
    studentId: string | null
    class: string | null
    section: string | null
    year: string | null
    enrollmentDate: Date | null
    gpa: Decimal | null
    parentEmail: string | null
    parentPhone: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    studentId: string | null
    class: string | null
    section: string | null
    year: string | null
    enrollmentDate: Date | null
    gpa: Decimal | null
    parentEmail: string | null
    parentPhone: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    userId: number
    studentId: number
    class: number
    section: number
    year: number
    enrollmentDate: number
    gpa: number
    parentEmail: number
    parentPhone: number
    address: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
    userId?: true
    gpa?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
    userId?: true
    gpa?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    userId?: true
    studentId?: true
    class?: true
    section?: true
    year?: true
    enrollmentDate?: true
    gpa?: true
    parentEmail?: true
    parentPhone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    userId?: true
    studentId?: true
    class?: true
    section?: true
    year?: true
    enrollmentDate?: true
    gpa?: true
    parentEmail?: true
    parentPhone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    userId?: true
    studentId?: true
    class?: true
    section?: true
    year?: true
    enrollmentDate?: true
    gpa?: true
    parentEmail?: true
    parentPhone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: number
    userId: number
    studentId: string
    class: string | null
    section: string | null
    year: string | null
    enrollmentDate: Date | null
    gpa: Decimal | null
    parentEmail: string | null
    parentPhone: string | null
    address: string | null
    createdAt: Date
    updatedAt: Date
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    studentId?: boolean
    class?: boolean
    section?: boolean
    year?: boolean
    enrollmentDate?: boolean
    gpa?: boolean
    parentEmail?: boolean
    parentPhone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    classEnrollments?: boolean | Student$classEnrollmentsArgs<ExtArgs>
    attendanceRecords?: boolean | Student$attendanceRecordsArgs<ExtArgs>
    absenceJustifications?: boolean | Student$absenceJustificationsArgs<ExtArgs>
    studentRiskTracking?: boolean | Student$studentRiskTrackingArgs<ExtArgs>
    studentAlerts?: boolean | Student$studentAlertsArgs<ExtArgs>
    studentPoints?: boolean | Student$studentPointsArgs<ExtArgs>
    studentAchievements?: boolean | Student$studentAchievementsArgs<ExtArgs>
    studentStreaks?: boolean | Student$studentStreaksArgs<ExtArgs>
    leaderboardRankings?: boolean | Student$leaderboardRankingsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    studentId?: boolean
    class?: boolean
    section?: boolean
    year?: boolean
    enrollmentDate?: boolean
    gpa?: boolean
    parentEmail?: boolean
    parentPhone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    studentId?: boolean
    class?: boolean
    section?: boolean
    year?: boolean
    enrollmentDate?: boolean
    gpa?: boolean
    parentEmail?: boolean
    parentPhone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    userId?: boolean
    studentId?: boolean
    class?: boolean
    section?: boolean
    year?: boolean
    enrollmentDate?: boolean
    gpa?: boolean
    parentEmail?: boolean
    parentPhone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "studentId" | "class" | "section" | "year" | "enrollmentDate" | "gpa" | "parentEmail" | "parentPhone" | "address" | "createdAt" | "updatedAt", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    classEnrollments?: boolean | Student$classEnrollmentsArgs<ExtArgs>
    attendanceRecords?: boolean | Student$attendanceRecordsArgs<ExtArgs>
    absenceJustifications?: boolean | Student$absenceJustificationsArgs<ExtArgs>
    studentRiskTracking?: boolean | Student$studentRiskTrackingArgs<ExtArgs>
    studentAlerts?: boolean | Student$studentAlertsArgs<ExtArgs>
    studentPoints?: boolean | Student$studentPointsArgs<ExtArgs>
    studentAchievements?: boolean | Student$studentAchievementsArgs<ExtArgs>
    studentStreaks?: boolean | Student$studentStreaksArgs<ExtArgs>
    leaderboardRankings?: boolean | Student$leaderboardRankingsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      classEnrollments: Prisma.$ClassEnrollmentPayload<ExtArgs>[]
      attendanceRecords: Prisma.$AttendanceRecordPayload<ExtArgs>[]
      absenceJustifications: Prisma.$AbsenceJustificationPayload<ExtArgs>[]
      studentRiskTracking: Prisma.$StudentRiskTrackingPayload<ExtArgs>[]
      studentAlerts: Prisma.$StudentAlertPayload<ExtArgs>[]
      studentPoints: Prisma.$StudentPointPayload<ExtArgs>[]
      studentAchievements: Prisma.$StudentAchievementPayload<ExtArgs>[]
      studentStreaks: Prisma.$StudentStreakPayload<ExtArgs>[]
      leaderboardRankings: Prisma.$LeaderboardRankingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      studentId: string
      class: string | null
      section: string | null
      year: string | null
      enrollmentDate: Date | null
      gpa: Prisma.Decimal | null
      parentEmail: string | null
      parentPhone: string | null
      address: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    classEnrollments<T extends Student$classEnrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, Student$classEnrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attendanceRecords<T extends Student$attendanceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Student$attendanceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    absenceJustifications<T extends Student$absenceJustificationsArgs<ExtArgs> = {}>(args?: Subset<T, Student$absenceJustificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentRiskTracking<T extends Student$studentRiskTrackingArgs<ExtArgs> = {}>(args?: Subset<T, Student$studentRiskTrackingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentAlerts<T extends Student$studentAlertsArgs<ExtArgs> = {}>(args?: Subset<T, Student$studentAlertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentPoints<T extends Student$studentPointsArgs<ExtArgs> = {}>(args?: Subset<T, Student$studentPointsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentAchievements<T extends Student$studentAchievementsArgs<ExtArgs> = {}>(args?: Subset<T, Student$studentAchievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentStreaks<T extends Student$studentStreaksArgs<ExtArgs> = {}>(args?: Subset<T, Student$studentStreaksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leaderboardRankings<T extends Student$leaderboardRankingsArgs<ExtArgs> = {}>(args?: Subset<T, Student$leaderboardRankingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'Int'>
    readonly userId: FieldRef<"Student", 'Int'>
    readonly studentId: FieldRef<"Student", 'String'>
    readonly class: FieldRef<"Student", 'String'>
    readonly section: FieldRef<"Student", 'String'>
    readonly year: FieldRef<"Student", 'String'>
    readonly enrollmentDate: FieldRef<"Student", 'DateTime'>
    readonly gpa: FieldRef<"Student", 'Decimal'>
    readonly parentEmail: FieldRef<"Student", 'String'>
    readonly parentPhone: FieldRef<"Student", 'String'>
    readonly address: FieldRef<"Student", 'String'>
    readonly createdAt: FieldRef<"Student", 'DateTime'>
    readonly updatedAt: FieldRef<"Student", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.classEnrollments
   */
  export type Student$classEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
    where?: ClassEnrollmentWhereInput
    orderBy?: ClassEnrollmentOrderByWithRelationInput | ClassEnrollmentOrderByWithRelationInput[]
    cursor?: ClassEnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassEnrollmentScalarFieldEnum | ClassEnrollmentScalarFieldEnum[]
  }

  /**
   * Student.attendanceRecords
   */
  export type Student$attendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    where?: AttendanceRecordWhereInput
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    cursor?: AttendanceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * Student.absenceJustifications
   */
  export type Student$absenceJustificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    where?: AbsenceJustificationWhereInput
    orderBy?: AbsenceJustificationOrderByWithRelationInput | AbsenceJustificationOrderByWithRelationInput[]
    cursor?: AbsenceJustificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceJustificationScalarFieldEnum | AbsenceJustificationScalarFieldEnum[]
  }

  /**
   * Student.studentRiskTracking
   */
  export type Student$studentRiskTrackingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingInclude<ExtArgs> | null
    where?: StudentRiskTrackingWhereInput
    orderBy?: StudentRiskTrackingOrderByWithRelationInput | StudentRiskTrackingOrderByWithRelationInput[]
    cursor?: StudentRiskTrackingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentRiskTrackingScalarFieldEnum | StudentRiskTrackingScalarFieldEnum[]
  }

  /**
   * Student.studentAlerts
   */
  export type Student$studentAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
    where?: StudentAlertWhereInput
    orderBy?: StudentAlertOrderByWithRelationInput | StudentAlertOrderByWithRelationInput[]
    cursor?: StudentAlertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentAlertScalarFieldEnum | StudentAlertScalarFieldEnum[]
  }

  /**
   * Student.studentPoints
   */
  export type Student$studentPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
    where?: StudentPointWhereInput
    orderBy?: StudentPointOrderByWithRelationInput | StudentPointOrderByWithRelationInput[]
    cursor?: StudentPointWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentPointScalarFieldEnum | StudentPointScalarFieldEnum[]
  }

  /**
   * Student.studentAchievements
   */
  export type Student$studentAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
    where?: StudentAchievementWhereInput
    orderBy?: StudentAchievementOrderByWithRelationInput | StudentAchievementOrderByWithRelationInput[]
    cursor?: StudentAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentAchievementScalarFieldEnum | StudentAchievementScalarFieldEnum[]
  }

  /**
   * Student.studentStreaks
   */
  export type Student$studentStreaksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
    where?: StudentStreakWhereInput
    orderBy?: StudentStreakOrderByWithRelationInput | StudentStreakOrderByWithRelationInput[]
    cursor?: StudentStreakWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentStreakScalarFieldEnum | StudentStreakScalarFieldEnum[]
  }

  /**
   * Student.leaderboardRankings
   */
  export type Student$leaderboardRankingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    where?: LeaderboardRankingWhereInput
    orderBy?: LeaderboardRankingOrderByWithRelationInput | LeaderboardRankingOrderByWithRelationInput[]
    cursor?: LeaderboardRankingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaderboardRankingScalarFieldEnum | LeaderboardRankingScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    id: number | null
    facultyId: number | null
    capacity: number | null
    credits: number | null
    latitude: number | null
    longitude: number | null
    geofenceRadius: number | null
  }

  export type ClassSumAggregateOutputType = {
    id: number | null
    facultyId: number | null
    capacity: number | null
    credits: number | null
    latitude: number | null
    longitude: number | null
    geofenceRadius: number | null
  }

  export type ClassMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    subject: string | null
    description: string | null
    facultyId: number | null
    room: string | null
    capacity: number | null
    schedule: string | null
    department: string | null
    semester: string | null
    academicYear: string | null
    credits: number | null
    classType: string | null
    latitude: number | null
    longitude: number | null
    geofenceRadius: number | null
    geofenceEnabled: boolean | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    subject: string | null
    description: string | null
    facultyId: number | null
    room: string | null
    capacity: number | null
    schedule: string | null
    department: string | null
    semester: string | null
    academicYear: string | null
    credits: number | null
    classType: string | null
    latitude: number | null
    longitude: number | null
    geofenceRadius: number | null
    geofenceEnabled: boolean | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number
    code: number
    subject: number
    description: number
    facultyId: number
    room: number
    capacity: number
    schedule: number
    department: number
    semester: number
    academicYear: number
    credits: number
    classType: number
    latitude: number
    longitude: number
    geofenceRadius: number
    geofenceEnabled: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    id?: true
    facultyId?: true
    capacity?: true
    credits?: true
    latitude?: true
    longitude?: true
    geofenceRadius?: true
  }

  export type ClassSumAggregateInputType = {
    id?: true
    facultyId?: true
    capacity?: true
    credits?: true
    latitude?: true
    longitude?: true
    geofenceRadius?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    subject?: true
    description?: true
    facultyId?: true
    room?: true
    capacity?: true
    schedule?: true
    department?: true
    semester?: true
    academicYear?: true
    credits?: true
    classType?: true
    latitude?: true
    longitude?: true
    geofenceRadius?: true
    geofenceEnabled?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    subject?: true
    description?: true
    facultyId?: true
    room?: true
    capacity?: true
    schedule?: true
    department?: true
    semester?: true
    academicYear?: true
    credits?: true
    classType?: true
    latitude?: true
    longitude?: true
    geofenceRadius?: true
    geofenceEnabled?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    subject?: true
    description?: true
    facultyId?: true
    room?: true
    capacity?: true
    schedule?: true
    department?: true
    semester?: true
    academicYear?: true
    credits?: true
    classType?: true
    latitude?: true
    longitude?: true
    geofenceRadius?: true
    geofenceEnabled?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: number
    name: string
    code: string
    subject: string
    description: string | null
    facultyId: number | null
    room: string | null
    capacity: number | null
    schedule: string | null
    department: string | null
    semester: string | null
    academicYear: string | null
    credits: number | null
    classType: string | null
    latitude: number | null
    longitude: number | null
    geofenceRadius: number | null
    geofenceEnabled: boolean | null
    status: string | null
    createdAt: Date
    updatedAt: Date
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    subject?: boolean
    description?: boolean
    facultyId?: boolean
    room?: boolean
    capacity?: boolean
    schedule?: boolean
    department?: boolean
    semester?: boolean
    academicYear?: boolean
    credits?: boolean
    classType?: boolean
    latitude?: boolean
    longitude?: boolean
    geofenceRadius?: boolean
    geofenceEnabled?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    faculty?: boolean | Class$facultyArgs<ExtArgs>
    classEnrollments?: boolean | Class$classEnrollmentsArgs<ExtArgs>
    attendanceRecords?: boolean | Class$attendanceRecordsArgs<ExtArgs>
    attendanceSessions?: boolean | Class$attendanceSessionsArgs<ExtArgs>
    absenceJustifications?: boolean | Class$absenceJustificationsArgs<ExtArgs>
    studentPoints?: boolean | Class$studentPointsArgs<ExtArgs>
    studentStreaks?: boolean | Class$studentStreaksArgs<ExtArgs>
    leaderboardRankings?: boolean | Class$leaderboardRankingsArgs<ExtArgs>
    classLocations?: boolean | Class$classLocationsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    subject?: boolean
    description?: boolean
    facultyId?: boolean
    room?: boolean
    capacity?: boolean
    schedule?: boolean
    department?: boolean
    semester?: boolean
    academicYear?: boolean
    credits?: boolean
    classType?: boolean
    latitude?: boolean
    longitude?: boolean
    geofenceRadius?: boolean
    geofenceEnabled?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    faculty?: boolean | Class$facultyArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    subject?: boolean
    description?: boolean
    facultyId?: boolean
    room?: boolean
    capacity?: boolean
    schedule?: boolean
    department?: boolean
    semester?: boolean
    academicYear?: boolean
    credits?: boolean
    classType?: boolean
    latitude?: boolean
    longitude?: boolean
    geofenceRadius?: boolean
    geofenceEnabled?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    faculty?: boolean | Class$facultyArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    subject?: boolean
    description?: boolean
    facultyId?: boolean
    room?: boolean
    capacity?: boolean
    schedule?: boolean
    department?: boolean
    semester?: boolean
    academicYear?: boolean
    credits?: boolean
    classType?: boolean
    latitude?: boolean
    longitude?: boolean
    geofenceRadius?: boolean
    geofenceEnabled?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "subject" | "description" | "facultyId" | "room" | "capacity" | "schedule" | "department" | "semester" | "academicYear" | "credits" | "classType" | "latitude" | "longitude" | "geofenceRadius" | "geofenceEnabled" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["class"]>
  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faculty?: boolean | Class$facultyArgs<ExtArgs>
    classEnrollments?: boolean | Class$classEnrollmentsArgs<ExtArgs>
    attendanceRecords?: boolean | Class$attendanceRecordsArgs<ExtArgs>
    attendanceSessions?: boolean | Class$attendanceSessionsArgs<ExtArgs>
    absenceJustifications?: boolean | Class$absenceJustificationsArgs<ExtArgs>
    studentPoints?: boolean | Class$studentPointsArgs<ExtArgs>
    studentStreaks?: boolean | Class$studentStreaksArgs<ExtArgs>
    leaderboardRankings?: boolean | Class$leaderboardRankingsArgs<ExtArgs>
    classLocations?: boolean | Class$classLocationsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faculty?: boolean | Class$facultyArgs<ExtArgs>
  }
  export type ClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faculty?: boolean | Class$facultyArgs<ExtArgs>
  }

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      faculty: Prisma.$StaffPayload<ExtArgs> | null
      classEnrollments: Prisma.$ClassEnrollmentPayload<ExtArgs>[]
      attendanceRecords: Prisma.$AttendanceRecordPayload<ExtArgs>[]
      attendanceSessions: Prisma.$AttendanceSessionPayload<ExtArgs>[]
      absenceJustifications: Prisma.$AbsenceJustificationPayload<ExtArgs>[]
      studentPoints: Prisma.$StudentPointPayload<ExtArgs>[]
      studentStreaks: Prisma.$StudentStreakPayload<ExtArgs>[]
      leaderboardRankings: Prisma.$LeaderboardRankingPayload<ExtArgs>[]
      classLocations: Prisma.$ClassLocationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string
      subject: string
      description: string | null
      facultyId: number | null
      room: string | null
      capacity: number | null
      schedule: string | null
      department: string | null
      semester: string | null
      academicYear: string | null
      credits: number | null
      classType: string | null
      latitude: number | null
      longitude: number | null
      geofenceRadius: number | null
      geofenceEnabled: boolean | null
      status: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {ClassUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    faculty<T extends Class$facultyArgs<ExtArgs> = {}>(args?: Subset<T, Class$facultyArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    classEnrollments<T extends Class$classEnrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$classEnrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attendanceRecords<T extends Class$attendanceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Class$attendanceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attendanceSessions<T extends Class$attendanceSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Class$attendanceSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    absenceJustifications<T extends Class$absenceJustificationsArgs<ExtArgs> = {}>(args?: Subset<T, Class$absenceJustificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentPoints<T extends Class$studentPointsArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentPointsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentStreaks<T extends Class$studentStreaksArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentStreaksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leaderboardRankings<T extends Class$leaderboardRankingsArgs<ExtArgs> = {}>(args?: Subset<T, Class$leaderboardRankingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classLocations<T extends Class$classLocationsArgs<ExtArgs> = {}>(args?: Subset<T, Class$classLocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'Int'>
    readonly name: FieldRef<"Class", 'String'>
    readonly code: FieldRef<"Class", 'String'>
    readonly subject: FieldRef<"Class", 'String'>
    readonly description: FieldRef<"Class", 'String'>
    readonly facultyId: FieldRef<"Class", 'Int'>
    readonly room: FieldRef<"Class", 'String'>
    readonly capacity: FieldRef<"Class", 'Int'>
    readonly schedule: FieldRef<"Class", 'String'>
    readonly department: FieldRef<"Class", 'String'>
    readonly semester: FieldRef<"Class", 'String'>
    readonly academicYear: FieldRef<"Class", 'String'>
    readonly credits: FieldRef<"Class", 'Int'>
    readonly classType: FieldRef<"Class", 'String'>
    readonly latitude: FieldRef<"Class", 'Float'>
    readonly longitude: FieldRef<"Class", 'Float'>
    readonly geofenceRadius: FieldRef<"Class", 'Int'>
    readonly geofenceEnabled: FieldRef<"Class", 'Boolean'>
    readonly status: FieldRef<"Class", 'String'>
    readonly createdAt: FieldRef<"Class", 'DateTime'>
    readonly updatedAt: FieldRef<"Class", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class updateManyAndReturn
   */
  export type ClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Class.faculty
   */
  export type Class$facultyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
  }

  /**
   * Class.classEnrollments
   */
  export type Class$classEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
    where?: ClassEnrollmentWhereInput
    orderBy?: ClassEnrollmentOrderByWithRelationInput | ClassEnrollmentOrderByWithRelationInput[]
    cursor?: ClassEnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassEnrollmentScalarFieldEnum | ClassEnrollmentScalarFieldEnum[]
  }

  /**
   * Class.attendanceRecords
   */
  export type Class$attendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    where?: AttendanceRecordWhereInput
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    cursor?: AttendanceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * Class.attendanceSessions
   */
  export type Class$attendanceSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
    where?: AttendanceSessionWhereInput
    orderBy?: AttendanceSessionOrderByWithRelationInput | AttendanceSessionOrderByWithRelationInput[]
    cursor?: AttendanceSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceSessionScalarFieldEnum | AttendanceSessionScalarFieldEnum[]
  }

  /**
   * Class.absenceJustifications
   */
  export type Class$absenceJustificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    where?: AbsenceJustificationWhereInput
    orderBy?: AbsenceJustificationOrderByWithRelationInput | AbsenceJustificationOrderByWithRelationInput[]
    cursor?: AbsenceJustificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceJustificationScalarFieldEnum | AbsenceJustificationScalarFieldEnum[]
  }

  /**
   * Class.studentPoints
   */
  export type Class$studentPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
    where?: StudentPointWhereInput
    orderBy?: StudentPointOrderByWithRelationInput | StudentPointOrderByWithRelationInput[]
    cursor?: StudentPointWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentPointScalarFieldEnum | StudentPointScalarFieldEnum[]
  }

  /**
   * Class.studentStreaks
   */
  export type Class$studentStreaksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
    where?: StudentStreakWhereInput
    orderBy?: StudentStreakOrderByWithRelationInput | StudentStreakOrderByWithRelationInput[]
    cursor?: StudentStreakWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentStreakScalarFieldEnum | StudentStreakScalarFieldEnum[]
  }

  /**
   * Class.leaderboardRankings
   */
  export type Class$leaderboardRankingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    where?: LeaderboardRankingWhereInput
    orderBy?: LeaderboardRankingOrderByWithRelationInput | LeaderboardRankingOrderByWithRelationInput[]
    cursor?: LeaderboardRankingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaderboardRankingScalarFieldEnum | LeaderboardRankingScalarFieldEnum[]
  }

  /**
   * Class.classLocations
   */
  export type Class$classLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationInclude<ExtArgs> | null
    where?: ClassLocationWhereInput
    orderBy?: ClassLocationOrderByWithRelationInput | ClassLocationOrderByWithRelationInput[]
    cursor?: ClassLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassLocationScalarFieldEnum | ClassLocationScalarFieldEnum[]
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model ClassEnrollment
   */

  export type AggregateClassEnrollment = {
    _count: ClassEnrollmentCountAggregateOutputType | null
    _avg: ClassEnrollmentAvgAggregateOutputType | null
    _sum: ClassEnrollmentSumAggregateOutputType | null
    _min: ClassEnrollmentMinAggregateOutputType | null
    _max: ClassEnrollmentMaxAggregateOutputType | null
  }

  export type ClassEnrollmentAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
  }

  export type ClassEnrollmentSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
  }

  export type ClassEnrollmentMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    enrollmentDate: Date | null
    status: string | null
    grade: string | null
    createdAt: Date | null
  }

  export type ClassEnrollmentMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    enrollmentDate: Date | null
    status: string | null
    grade: string | null
    createdAt: Date | null
  }

  export type ClassEnrollmentCountAggregateOutputType = {
    id: number
    studentId: number
    classId: number
    enrollmentDate: number
    status: number
    grade: number
    createdAt: number
    _all: number
  }


  export type ClassEnrollmentAvgAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
  }

  export type ClassEnrollmentSumAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
  }

  export type ClassEnrollmentMinAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    enrollmentDate?: true
    status?: true
    grade?: true
    createdAt?: true
  }

  export type ClassEnrollmentMaxAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    enrollmentDate?: true
    status?: true
    grade?: true
    createdAt?: true
  }

  export type ClassEnrollmentCountAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    enrollmentDate?: true
    status?: true
    grade?: true
    createdAt?: true
    _all?: true
  }

  export type ClassEnrollmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassEnrollment to aggregate.
     */
    where?: ClassEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassEnrollments to fetch.
     */
    orderBy?: ClassEnrollmentOrderByWithRelationInput | ClassEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClassEnrollments
    **/
    _count?: true | ClassEnrollmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassEnrollmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassEnrollmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassEnrollmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassEnrollmentMaxAggregateInputType
  }

  export type GetClassEnrollmentAggregateType<T extends ClassEnrollmentAggregateArgs> = {
        [P in keyof T & keyof AggregateClassEnrollment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassEnrollment[P]>
      : GetScalarType<T[P], AggregateClassEnrollment[P]>
  }




  export type ClassEnrollmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassEnrollmentWhereInput
    orderBy?: ClassEnrollmentOrderByWithAggregationInput | ClassEnrollmentOrderByWithAggregationInput[]
    by: ClassEnrollmentScalarFieldEnum[] | ClassEnrollmentScalarFieldEnum
    having?: ClassEnrollmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassEnrollmentCountAggregateInputType | true
    _avg?: ClassEnrollmentAvgAggregateInputType
    _sum?: ClassEnrollmentSumAggregateInputType
    _min?: ClassEnrollmentMinAggregateInputType
    _max?: ClassEnrollmentMaxAggregateInputType
  }

  export type ClassEnrollmentGroupByOutputType = {
    id: number
    studentId: number
    classId: number
    enrollmentDate: Date
    status: string | null
    grade: string | null
    createdAt: Date
    _count: ClassEnrollmentCountAggregateOutputType | null
    _avg: ClassEnrollmentAvgAggregateOutputType | null
    _sum: ClassEnrollmentSumAggregateOutputType | null
    _min: ClassEnrollmentMinAggregateOutputType | null
    _max: ClassEnrollmentMaxAggregateOutputType | null
  }

  type GetClassEnrollmentGroupByPayload<T extends ClassEnrollmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassEnrollmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassEnrollmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassEnrollmentGroupByOutputType[P]>
            : GetScalarType<T[P], ClassEnrollmentGroupByOutputType[P]>
        }
      >
    >


  export type ClassEnrollmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    enrollmentDate?: boolean
    status?: boolean
    grade?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classEnrollment"]>

  export type ClassEnrollmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    enrollmentDate?: boolean
    status?: boolean
    grade?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classEnrollment"]>

  export type ClassEnrollmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    enrollmentDate?: boolean
    status?: boolean
    grade?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classEnrollment"]>

  export type ClassEnrollmentSelectScalar = {
    id?: boolean
    studentId?: boolean
    classId?: boolean
    enrollmentDate?: boolean
    status?: boolean
    grade?: boolean
    createdAt?: boolean
  }

  export type ClassEnrollmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "classId" | "enrollmentDate" | "status" | "grade" | "createdAt", ExtArgs["result"]["classEnrollment"]>
  export type ClassEnrollmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type ClassEnrollmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type ClassEnrollmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $ClassEnrollmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClassEnrollment"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      classId: number
      enrollmentDate: Date
      status: string | null
      grade: string | null
      createdAt: Date
    }, ExtArgs["result"]["classEnrollment"]>
    composites: {}
  }

  type ClassEnrollmentGetPayload<S extends boolean | null | undefined | ClassEnrollmentDefaultArgs> = $Result.GetResult<Prisma.$ClassEnrollmentPayload, S>

  type ClassEnrollmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassEnrollmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassEnrollmentCountAggregateInputType | true
    }

  export interface ClassEnrollmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClassEnrollment'], meta: { name: 'ClassEnrollment' } }
    /**
     * Find zero or one ClassEnrollment that matches the filter.
     * @param {ClassEnrollmentFindUniqueArgs} args - Arguments to find a ClassEnrollment
     * @example
     * // Get one ClassEnrollment
     * const classEnrollment = await prisma.classEnrollment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassEnrollmentFindUniqueArgs>(args: SelectSubset<T, ClassEnrollmentFindUniqueArgs<ExtArgs>>): Prisma__ClassEnrollmentClient<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClassEnrollment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassEnrollmentFindUniqueOrThrowArgs} args - Arguments to find a ClassEnrollment
     * @example
     * // Get one ClassEnrollment
     * const classEnrollment = await prisma.classEnrollment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassEnrollmentFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassEnrollmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassEnrollmentClient<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassEnrollment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassEnrollmentFindFirstArgs} args - Arguments to find a ClassEnrollment
     * @example
     * // Get one ClassEnrollment
     * const classEnrollment = await prisma.classEnrollment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassEnrollmentFindFirstArgs>(args?: SelectSubset<T, ClassEnrollmentFindFirstArgs<ExtArgs>>): Prisma__ClassEnrollmentClient<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassEnrollment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassEnrollmentFindFirstOrThrowArgs} args - Arguments to find a ClassEnrollment
     * @example
     * // Get one ClassEnrollment
     * const classEnrollment = await prisma.classEnrollment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassEnrollmentFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassEnrollmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassEnrollmentClient<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClassEnrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassEnrollmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClassEnrollments
     * const classEnrollments = await prisma.classEnrollment.findMany()
     * 
     * // Get first 10 ClassEnrollments
     * const classEnrollments = await prisma.classEnrollment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classEnrollmentWithIdOnly = await prisma.classEnrollment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassEnrollmentFindManyArgs>(args?: SelectSubset<T, ClassEnrollmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClassEnrollment.
     * @param {ClassEnrollmentCreateArgs} args - Arguments to create a ClassEnrollment.
     * @example
     * // Create one ClassEnrollment
     * const ClassEnrollment = await prisma.classEnrollment.create({
     *   data: {
     *     // ... data to create a ClassEnrollment
     *   }
     * })
     * 
     */
    create<T extends ClassEnrollmentCreateArgs>(args: SelectSubset<T, ClassEnrollmentCreateArgs<ExtArgs>>): Prisma__ClassEnrollmentClient<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClassEnrollments.
     * @param {ClassEnrollmentCreateManyArgs} args - Arguments to create many ClassEnrollments.
     * @example
     * // Create many ClassEnrollments
     * const classEnrollment = await prisma.classEnrollment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassEnrollmentCreateManyArgs>(args?: SelectSubset<T, ClassEnrollmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClassEnrollments and returns the data saved in the database.
     * @param {ClassEnrollmentCreateManyAndReturnArgs} args - Arguments to create many ClassEnrollments.
     * @example
     * // Create many ClassEnrollments
     * const classEnrollment = await prisma.classEnrollment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClassEnrollments and only return the `id`
     * const classEnrollmentWithIdOnly = await prisma.classEnrollment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassEnrollmentCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassEnrollmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClassEnrollment.
     * @param {ClassEnrollmentDeleteArgs} args - Arguments to delete one ClassEnrollment.
     * @example
     * // Delete one ClassEnrollment
     * const ClassEnrollment = await prisma.classEnrollment.delete({
     *   where: {
     *     // ... filter to delete one ClassEnrollment
     *   }
     * })
     * 
     */
    delete<T extends ClassEnrollmentDeleteArgs>(args: SelectSubset<T, ClassEnrollmentDeleteArgs<ExtArgs>>): Prisma__ClassEnrollmentClient<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClassEnrollment.
     * @param {ClassEnrollmentUpdateArgs} args - Arguments to update one ClassEnrollment.
     * @example
     * // Update one ClassEnrollment
     * const classEnrollment = await prisma.classEnrollment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassEnrollmentUpdateArgs>(args: SelectSubset<T, ClassEnrollmentUpdateArgs<ExtArgs>>): Prisma__ClassEnrollmentClient<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClassEnrollments.
     * @param {ClassEnrollmentDeleteManyArgs} args - Arguments to filter ClassEnrollments to delete.
     * @example
     * // Delete a few ClassEnrollments
     * const { count } = await prisma.classEnrollment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassEnrollmentDeleteManyArgs>(args?: SelectSubset<T, ClassEnrollmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassEnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClassEnrollments
     * const classEnrollment = await prisma.classEnrollment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassEnrollmentUpdateManyArgs>(args: SelectSubset<T, ClassEnrollmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassEnrollments and returns the data updated in the database.
     * @param {ClassEnrollmentUpdateManyAndReturnArgs} args - Arguments to update many ClassEnrollments.
     * @example
     * // Update many ClassEnrollments
     * const classEnrollment = await prisma.classEnrollment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClassEnrollments and only return the `id`
     * const classEnrollmentWithIdOnly = await prisma.classEnrollment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassEnrollmentUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassEnrollmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClassEnrollment.
     * @param {ClassEnrollmentUpsertArgs} args - Arguments to update or create a ClassEnrollment.
     * @example
     * // Update or create a ClassEnrollment
     * const classEnrollment = await prisma.classEnrollment.upsert({
     *   create: {
     *     // ... data to create a ClassEnrollment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClassEnrollment we want to update
     *   }
     * })
     */
    upsert<T extends ClassEnrollmentUpsertArgs>(args: SelectSubset<T, ClassEnrollmentUpsertArgs<ExtArgs>>): Prisma__ClassEnrollmentClient<$Result.GetResult<Prisma.$ClassEnrollmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClassEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassEnrollmentCountArgs} args - Arguments to filter ClassEnrollments to count.
     * @example
     * // Count the number of ClassEnrollments
     * const count = await prisma.classEnrollment.count({
     *   where: {
     *     // ... the filter for the ClassEnrollments we want to count
     *   }
     * })
    **/
    count<T extends ClassEnrollmentCountArgs>(
      args?: Subset<T, ClassEnrollmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassEnrollmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClassEnrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassEnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassEnrollmentAggregateArgs>(args: Subset<T, ClassEnrollmentAggregateArgs>): Prisma.PrismaPromise<GetClassEnrollmentAggregateType<T>>

    /**
     * Group by ClassEnrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassEnrollmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassEnrollmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassEnrollmentGroupByArgs['orderBy'] }
        : { orderBy?: ClassEnrollmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassEnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassEnrollmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClassEnrollment model
   */
  readonly fields: ClassEnrollmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClassEnrollment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassEnrollmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClassEnrollment model
   */
  interface ClassEnrollmentFieldRefs {
    readonly id: FieldRef<"ClassEnrollment", 'Int'>
    readonly studentId: FieldRef<"ClassEnrollment", 'Int'>
    readonly classId: FieldRef<"ClassEnrollment", 'Int'>
    readonly enrollmentDate: FieldRef<"ClassEnrollment", 'DateTime'>
    readonly status: FieldRef<"ClassEnrollment", 'String'>
    readonly grade: FieldRef<"ClassEnrollment", 'String'>
    readonly createdAt: FieldRef<"ClassEnrollment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClassEnrollment findUnique
   */
  export type ClassEnrollmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which ClassEnrollment to fetch.
     */
    where: ClassEnrollmentWhereUniqueInput
  }

  /**
   * ClassEnrollment findUniqueOrThrow
   */
  export type ClassEnrollmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which ClassEnrollment to fetch.
     */
    where: ClassEnrollmentWhereUniqueInput
  }

  /**
   * ClassEnrollment findFirst
   */
  export type ClassEnrollmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which ClassEnrollment to fetch.
     */
    where?: ClassEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassEnrollments to fetch.
     */
    orderBy?: ClassEnrollmentOrderByWithRelationInput | ClassEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassEnrollments.
     */
    cursor?: ClassEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassEnrollments.
     */
    distinct?: ClassEnrollmentScalarFieldEnum | ClassEnrollmentScalarFieldEnum[]
  }

  /**
   * ClassEnrollment findFirstOrThrow
   */
  export type ClassEnrollmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which ClassEnrollment to fetch.
     */
    where?: ClassEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassEnrollments to fetch.
     */
    orderBy?: ClassEnrollmentOrderByWithRelationInput | ClassEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassEnrollments.
     */
    cursor?: ClassEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassEnrollments.
     */
    distinct?: ClassEnrollmentScalarFieldEnum | ClassEnrollmentScalarFieldEnum[]
  }

  /**
   * ClassEnrollment findMany
   */
  export type ClassEnrollmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which ClassEnrollments to fetch.
     */
    where?: ClassEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassEnrollments to fetch.
     */
    orderBy?: ClassEnrollmentOrderByWithRelationInput | ClassEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClassEnrollments.
     */
    cursor?: ClassEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassEnrollments.
     */
    skip?: number
    distinct?: ClassEnrollmentScalarFieldEnum | ClassEnrollmentScalarFieldEnum[]
  }

  /**
   * ClassEnrollment create
   */
  export type ClassEnrollmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to create a ClassEnrollment.
     */
    data: XOR<ClassEnrollmentCreateInput, ClassEnrollmentUncheckedCreateInput>
  }

  /**
   * ClassEnrollment createMany
   */
  export type ClassEnrollmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClassEnrollments.
     */
    data: ClassEnrollmentCreateManyInput | ClassEnrollmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClassEnrollment createManyAndReturn
   */
  export type ClassEnrollmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * The data used to create many ClassEnrollments.
     */
    data: ClassEnrollmentCreateManyInput | ClassEnrollmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassEnrollment update
   */
  export type ClassEnrollmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to update a ClassEnrollment.
     */
    data: XOR<ClassEnrollmentUpdateInput, ClassEnrollmentUncheckedUpdateInput>
    /**
     * Choose, which ClassEnrollment to update.
     */
    where: ClassEnrollmentWhereUniqueInput
  }

  /**
   * ClassEnrollment updateMany
   */
  export type ClassEnrollmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClassEnrollments.
     */
    data: XOR<ClassEnrollmentUpdateManyMutationInput, ClassEnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which ClassEnrollments to update
     */
    where?: ClassEnrollmentWhereInput
    /**
     * Limit how many ClassEnrollments to update.
     */
    limit?: number
  }

  /**
   * ClassEnrollment updateManyAndReturn
   */
  export type ClassEnrollmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * The data used to update ClassEnrollments.
     */
    data: XOR<ClassEnrollmentUpdateManyMutationInput, ClassEnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which ClassEnrollments to update
     */
    where?: ClassEnrollmentWhereInput
    /**
     * Limit how many ClassEnrollments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassEnrollment upsert
   */
  export type ClassEnrollmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
    /**
     * The filter to search for the ClassEnrollment to update in case it exists.
     */
    where: ClassEnrollmentWhereUniqueInput
    /**
     * In case the ClassEnrollment found by the `where` argument doesn't exist, create a new ClassEnrollment with this data.
     */
    create: XOR<ClassEnrollmentCreateInput, ClassEnrollmentUncheckedCreateInput>
    /**
     * In case the ClassEnrollment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassEnrollmentUpdateInput, ClassEnrollmentUncheckedUpdateInput>
  }

  /**
   * ClassEnrollment delete
   */
  export type ClassEnrollmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
    /**
     * Filter which ClassEnrollment to delete.
     */
    where: ClassEnrollmentWhereUniqueInput
  }

  /**
   * ClassEnrollment deleteMany
   */
  export type ClassEnrollmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassEnrollments to delete
     */
    where?: ClassEnrollmentWhereInput
    /**
     * Limit how many ClassEnrollments to delete.
     */
    limit?: number
  }

  /**
   * ClassEnrollment without action
   */
  export type ClassEnrollmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassEnrollment
     */
    select?: ClassEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassEnrollment
     */
    omit?: ClassEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassEnrollmentInclude<ExtArgs> | null
  }


  /**
   * Model AttendanceRecord
   */

  export type AggregateAttendanceRecord = {
    _count: AttendanceRecordCountAggregateOutputType | null
    _avg: AttendanceRecordAvgAggregateOutputType | null
    _sum: AttendanceRecordSumAggregateOutputType | null
    _min: AttendanceRecordMinAggregateOutputType | null
    _max: AttendanceRecordMaxAggregateOutputType | null
  }

  export type AttendanceRecordAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    justificationId: number | null
    studentLatitude: number | null
    studentLongitude: number | null
    distanceFromClass: number | null
    recordedBy: number | null
  }

  export type AttendanceRecordSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    justificationId: number | null
    studentLatitude: number | null
    studentLongitude: number | null
    distanceFromClass: number | null
    recordedBy: number | null
  }

  export type AttendanceRecordMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    sessionDate: Date | null
    sessionTime: Date | null
    status: $Enums.AttendanceStatus | null
    checkInTime: Date | null
    method: $Enums.AttendanceMethod | null
    qrSessionId: string | null
    scanTimestamp: Date | null
    isJustified: boolean | null
    justificationId: number | null
    studentLatitude: number | null
    studentLongitude: number | null
    distanceFromClass: number | null
    locationVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    recordedBy: number | null
  }

  export type AttendanceRecordMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    sessionDate: Date | null
    sessionTime: Date | null
    status: $Enums.AttendanceStatus | null
    checkInTime: Date | null
    method: $Enums.AttendanceMethod | null
    qrSessionId: string | null
    scanTimestamp: Date | null
    isJustified: boolean | null
    justificationId: number | null
    studentLatitude: number | null
    studentLongitude: number | null
    distanceFromClass: number | null
    locationVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    recordedBy: number | null
  }

  export type AttendanceRecordCountAggregateOutputType = {
    id: number
    studentId: number
    classId: number
    sessionDate: number
    sessionTime: number
    status: number
    checkInTime: number
    method: number
    qrSessionId: number
    scanTimestamp: number
    isJustified: number
    justificationId: number
    studentLatitude: number
    studentLongitude: number
    distanceFromClass: number
    locationVerified: number
    createdAt: number
    updatedAt: number
    recordedBy: number
    _all: number
  }


  export type AttendanceRecordAvgAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    justificationId?: true
    studentLatitude?: true
    studentLongitude?: true
    distanceFromClass?: true
    recordedBy?: true
  }

  export type AttendanceRecordSumAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    justificationId?: true
    studentLatitude?: true
    studentLongitude?: true
    distanceFromClass?: true
    recordedBy?: true
  }

  export type AttendanceRecordMinAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    sessionDate?: true
    sessionTime?: true
    status?: true
    checkInTime?: true
    method?: true
    qrSessionId?: true
    scanTimestamp?: true
    isJustified?: true
    justificationId?: true
    studentLatitude?: true
    studentLongitude?: true
    distanceFromClass?: true
    locationVerified?: true
    createdAt?: true
    updatedAt?: true
    recordedBy?: true
  }

  export type AttendanceRecordMaxAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    sessionDate?: true
    sessionTime?: true
    status?: true
    checkInTime?: true
    method?: true
    qrSessionId?: true
    scanTimestamp?: true
    isJustified?: true
    justificationId?: true
    studentLatitude?: true
    studentLongitude?: true
    distanceFromClass?: true
    locationVerified?: true
    createdAt?: true
    updatedAt?: true
    recordedBy?: true
  }

  export type AttendanceRecordCountAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    sessionDate?: true
    sessionTime?: true
    status?: true
    checkInTime?: true
    method?: true
    qrSessionId?: true
    scanTimestamp?: true
    isJustified?: true
    justificationId?: true
    studentLatitude?: true
    studentLongitude?: true
    distanceFromClass?: true
    locationVerified?: true
    createdAt?: true
    updatedAt?: true
    recordedBy?: true
    _all?: true
  }

  export type AttendanceRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceRecord to aggregate.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AttendanceRecords
    **/
    _count?: true | AttendanceRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceRecordMaxAggregateInputType
  }

  export type GetAttendanceRecordAggregateType<T extends AttendanceRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendanceRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendanceRecord[P]>
      : GetScalarType<T[P], AggregateAttendanceRecord[P]>
  }




  export type AttendanceRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceRecordWhereInput
    orderBy?: AttendanceRecordOrderByWithAggregationInput | AttendanceRecordOrderByWithAggregationInput[]
    by: AttendanceRecordScalarFieldEnum[] | AttendanceRecordScalarFieldEnum
    having?: AttendanceRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceRecordCountAggregateInputType | true
    _avg?: AttendanceRecordAvgAggregateInputType
    _sum?: AttendanceRecordSumAggregateInputType
    _min?: AttendanceRecordMinAggregateInputType
    _max?: AttendanceRecordMaxAggregateInputType
  }

  export type AttendanceRecordGroupByOutputType = {
    id: number
    studentId: number
    classId: number
    sessionDate: Date
    sessionTime: Date | null
    status: $Enums.AttendanceStatus
    checkInTime: Date | null
    method: $Enums.AttendanceMethod
    qrSessionId: string | null
    scanTimestamp: Date | null
    isJustified: boolean
    justificationId: number | null
    studentLatitude: number | null
    studentLongitude: number | null
    distanceFromClass: number | null
    locationVerified: boolean | null
    createdAt: Date
    updatedAt: Date
    recordedBy: number | null
    _count: AttendanceRecordCountAggregateOutputType | null
    _avg: AttendanceRecordAvgAggregateOutputType | null
    _sum: AttendanceRecordSumAggregateOutputType | null
    _min: AttendanceRecordMinAggregateOutputType | null
    _max: AttendanceRecordMaxAggregateOutputType | null
  }

  type GetAttendanceRecordGroupByPayload<T extends AttendanceRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceRecordGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceRecordGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    sessionDate?: boolean
    sessionTime?: boolean
    status?: boolean
    checkInTime?: boolean
    method?: boolean
    qrSessionId?: boolean
    scanTimestamp?: boolean
    isJustified?: boolean
    justificationId?: boolean
    studentLatitude?: boolean
    studentLongitude?: boolean
    distanceFromClass?: boolean
    locationVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    recordedBy?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    recordedByStaff?: boolean | AttendanceRecord$recordedByStaffArgs<ExtArgs>
    absenceJustifications?: boolean | AttendanceRecord$absenceJustificationsArgs<ExtArgs>
    _count?: boolean | AttendanceRecordCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceRecord"]>

  export type AttendanceRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    sessionDate?: boolean
    sessionTime?: boolean
    status?: boolean
    checkInTime?: boolean
    method?: boolean
    qrSessionId?: boolean
    scanTimestamp?: boolean
    isJustified?: boolean
    justificationId?: boolean
    studentLatitude?: boolean
    studentLongitude?: boolean
    distanceFromClass?: boolean
    locationVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    recordedBy?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    recordedByStaff?: boolean | AttendanceRecord$recordedByStaffArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceRecord"]>

  export type AttendanceRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    sessionDate?: boolean
    sessionTime?: boolean
    status?: boolean
    checkInTime?: boolean
    method?: boolean
    qrSessionId?: boolean
    scanTimestamp?: boolean
    isJustified?: boolean
    justificationId?: boolean
    studentLatitude?: boolean
    studentLongitude?: boolean
    distanceFromClass?: boolean
    locationVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    recordedBy?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    recordedByStaff?: boolean | AttendanceRecord$recordedByStaffArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceRecord"]>

  export type AttendanceRecordSelectScalar = {
    id?: boolean
    studentId?: boolean
    classId?: boolean
    sessionDate?: boolean
    sessionTime?: boolean
    status?: boolean
    checkInTime?: boolean
    method?: boolean
    qrSessionId?: boolean
    scanTimestamp?: boolean
    isJustified?: boolean
    justificationId?: boolean
    studentLatitude?: boolean
    studentLongitude?: boolean
    distanceFromClass?: boolean
    locationVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    recordedBy?: boolean
  }

  export type AttendanceRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "classId" | "sessionDate" | "sessionTime" | "status" | "checkInTime" | "method" | "qrSessionId" | "scanTimestamp" | "isJustified" | "justificationId" | "studentLatitude" | "studentLongitude" | "distanceFromClass" | "locationVerified" | "createdAt" | "updatedAt" | "recordedBy", ExtArgs["result"]["attendanceRecord"]>
  export type AttendanceRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    recordedByStaff?: boolean | AttendanceRecord$recordedByStaffArgs<ExtArgs>
    absenceJustifications?: boolean | AttendanceRecord$absenceJustificationsArgs<ExtArgs>
    _count?: boolean | AttendanceRecordCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AttendanceRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    recordedByStaff?: boolean | AttendanceRecord$recordedByStaffArgs<ExtArgs>
  }
  export type AttendanceRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    recordedByStaff?: boolean | AttendanceRecord$recordedByStaffArgs<ExtArgs>
  }

  export type $AttendanceRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AttendanceRecord"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
      recordedByStaff: Prisma.$StaffPayload<ExtArgs> | null
      absenceJustifications: Prisma.$AbsenceJustificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      classId: number
      sessionDate: Date
      sessionTime: Date | null
      status: $Enums.AttendanceStatus
      checkInTime: Date | null
      method: $Enums.AttendanceMethod
      qrSessionId: string | null
      scanTimestamp: Date | null
      isJustified: boolean
      justificationId: number | null
      studentLatitude: number | null
      studentLongitude: number | null
      distanceFromClass: number | null
      locationVerified: boolean | null
      createdAt: Date
      updatedAt: Date
      recordedBy: number | null
    }, ExtArgs["result"]["attendanceRecord"]>
    composites: {}
  }

  type AttendanceRecordGetPayload<S extends boolean | null | undefined | AttendanceRecordDefaultArgs> = $Result.GetResult<Prisma.$AttendanceRecordPayload, S>

  type AttendanceRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttendanceRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttendanceRecordCountAggregateInputType | true
    }

  export interface AttendanceRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AttendanceRecord'], meta: { name: 'AttendanceRecord' } }
    /**
     * Find zero or one AttendanceRecord that matches the filter.
     * @param {AttendanceRecordFindUniqueArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceRecordFindUniqueArgs>(args: SelectSubset<T, AttendanceRecordFindUniqueArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AttendanceRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttendanceRecordFindUniqueOrThrowArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AttendanceRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordFindFirstArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceRecordFindFirstArgs>(args?: SelectSubset<T, AttendanceRecordFindFirstArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AttendanceRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordFindFirstOrThrowArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AttendanceRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AttendanceRecords
     * const attendanceRecords = await prisma.attendanceRecord.findMany()
     * 
     * // Get first 10 AttendanceRecords
     * const attendanceRecords = await prisma.attendanceRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceRecordWithIdOnly = await prisma.attendanceRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceRecordFindManyArgs>(args?: SelectSubset<T, AttendanceRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AttendanceRecord.
     * @param {AttendanceRecordCreateArgs} args - Arguments to create a AttendanceRecord.
     * @example
     * // Create one AttendanceRecord
     * const AttendanceRecord = await prisma.attendanceRecord.create({
     *   data: {
     *     // ... data to create a AttendanceRecord
     *   }
     * })
     * 
     */
    create<T extends AttendanceRecordCreateArgs>(args: SelectSubset<T, AttendanceRecordCreateArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AttendanceRecords.
     * @param {AttendanceRecordCreateManyArgs} args - Arguments to create many AttendanceRecords.
     * @example
     * // Create many AttendanceRecords
     * const attendanceRecord = await prisma.attendanceRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceRecordCreateManyArgs>(args?: SelectSubset<T, AttendanceRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AttendanceRecords and returns the data saved in the database.
     * @param {AttendanceRecordCreateManyAndReturnArgs} args - Arguments to create many AttendanceRecords.
     * @example
     * // Create many AttendanceRecords
     * const attendanceRecord = await prisma.attendanceRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AttendanceRecords and only return the `id`
     * const attendanceRecordWithIdOnly = await prisma.attendanceRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AttendanceRecord.
     * @param {AttendanceRecordDeleteArgs} args - Arguments to delete one AttendanceRecord.
     * @example
     * // Delete one AttendanceRecord
     * const AttendanceRecord = await prisma.attendanceRecord.delete({
     *   where: {
     *     // ... filter to delete one AttendanceRecord
     *   }
     * })
     * 
     */
    delete<T extends AttendanceRecordDeleteArgs>(args: SelectSubset<T, AttendanceRecordDeleteArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AttendanceRecord.
     * @param {AttendanceRecordUpdateArgs} args - Arguments to update one AttendanceRecord.
     * @example
     * // Update one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceRecordUpdateArgs>(args: SelectSubset<T, AttendanceRecordUpdateArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AttendanceRecords.
     * @param {AttendanceRecordDeleteManyArgs} args - Arguments to filter AttendanceRecords to delete.
     * @example
     * // Delete a few AttendanceRecords
     * const { count } = await prisma.attendanceRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceRecordDeleteManyArgs>(args?: SelectSubset<T, AttendanceRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttendanceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AttendanceRecords
     * const attendanceRecord = await prisma.attendanceRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceRecordUpdateManyArgs>(args: SelectSubset<T, AttendanceRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttendanceRecords and returns the data updated in the database.
     * @param {AttendanceRecordUpdateManyAndReturnArgs} args - Arguments to update many AttendanceRecords.
     * @example
     * // Update many AttendanceRecords
     * const attendanceRecord = await prisma.attendanceRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AttendanceRecords and only return the `id`
     * const attendanceRecordWithIdOnly = await prisma.attendanceRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttendanceRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, AttendanceRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AttendanceRecord.
     * @param {AttendanceRecordUpsertArgs} args - Arguments to update or create a AttendanceRecord.
     * @example
     * // Update or create a AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.upsert({
     *   create: {
     *     // ... data to create a AttendanceRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AttendanceRecord we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceRecordUpsertArgs>(args: SelectSubset<T, AttendanceRecordUpsertArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AttendanceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordCountArgs} args - Arguments to filter AttendanceRecords to count.
     * @example
     * // Count the number of AttendanceRecords
     * const count = await prisma.attendanceRecord.count({
     *   where: {
     *     // ... the filter for the AttendanceRecords we want to count
     *   }
     * })
    **/
    count<T extends AttendanceRecordCountArgs>(
      args?: Subset<T, AttendanceRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AttendanceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceRecordAggregateArgs>(args: Subset<T, AttendanceRecordAggregateArgs>): Prisma.PrismaPromise<GetAttendanceRecordAggregateType<T>>

    /**
     * Group by AttendanceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceRecordGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AttendanceRecord model
   */
  readonly fields: AttendanceRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AttendanceRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    recordedByStaff<T extends AttendanceRecord$recordedByStaffArgs<ExtArgs> = {}>(args?: Subset<T, AttendanceRecord$recordedByStaffArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    absenceJustifications<T extends AttendanceRecord$absenceJustificationsArgs<ExtArgs> = {}>(args?: Subset<T, AttendanceRecord$absenceJustificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AttendanceRecord model
   */
  interface AttendanceRecordFieldRefs {
    readonly id: FieldRef<"AttendanceRecord", 'Int'>
    readonly studentId: FieldRef<"AttendanceRecord", 'Int'>
    readonly classId: FieldRef<"AttendanceRecord", 'Int'>
    readonly sessionDate: FieldRef<"AttendanceRecord", 'DateTime'>
    readonly sessionTime: FieldRef<"AttendanceRecord", 'DateTime'>
    readonly status: FieldRef<"AttendanceRecord", 'AttendanceStatus'>
    readonly checkInTime: FieldRef<"AttendanceRecord", 'DateTime'>
    readonly method: FieldRef<"AttendanceRecord", 'AttendanceMethod'>
    readonly qrSessionId: FieldRef<"AttendanceRecord", 'String'>
    readonly scanTimestamp: FieldRef<"AttendanceRecord", 'DateTime'>
    readonly isJustified: FieldRef<"AttendanceRecord", 'Boolean'>
    readonly justificationId: FieldRef<"AttendanceRecord", 'Int'>
    readonly studentLatitude: FieldRef<"AttendanceRecord", 'Float'>
    readonly studentLongitude: FieldRef<"AttendanceRecord", 'Float'>
    readonly distanceFromClass: FieldRef<"AttendanceRecord", 'Float'>
    readonly locationVerified: FieldRef<"AttendanceRecord", 'Boolean'>
    readonly createdAt: FieldRef<"AttendanceRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"AttendanceRecord", 'DateTime'>
    readonly recordedBy: FieldRef<"AttendanceRecord", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AttendanceRecord findUnique
   */
  export type AttendanceRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where: AttendanceRecordWhereUniqueInput
  }

  /**
   * AttendanceRecord findUniqueOrThrow
   */
  export type AttendanceRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where: AttendanceRecordWhereUniqueInput
  }

  /**
   * AttendanceRecord findFirst
   */
  export type AttendanceRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceRecords.
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceRecords.
     */
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * AttendanceRecord findFirstOrThrow
   */
  export type AttendanceRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceRecords.
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceRecords.
     */
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * AttendanceRecord findMany
   */
  export type AttendanceRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceRecords to fetch.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AttendanceRecords.
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * AttendanceRecord create
   */
  export type AttendanceRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a AttendanceRecord.
     */
    data: XOR<AttendanceRecordCreateInput, AttendanceRecordUncheckedCreateInput>
  }

  /**
   * AttendanceRecord createMany
   */
  export type AttendanceRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AttendanceRecords.
     */
    data: AttendanceRecordCreateManyInput | AttendanceRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AttendanceRecord createManyAndReturn
   */
  export type AttendanceRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * The data used to create many AttendanceRecords.
     */
    data: AttendanceRecordCreateManyInput | AttendanceRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttendanceRecord update
   */
  export type AttendanceRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a AttendanceRecord.
     */
    data: XOR<AttendanceRecordUpdateInput, AttendanceRecordUncheckedUpdateInput>
    /**
     * Choose, which AttendanceRecord to update.
     */
    where: AttendanceRecordWhereUniqueInput
  }

  /**
   * AttendanceRecord updateMany
   */
  export type AttendanceRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AttendanceRecords.
     */
    data: XOR<AttendanceRecordUpdateManyMutationInput, AttendanceRecordUncheckedUpdateManyInput>
    /**
     * Filter which AttendanceRecords to update
     */
    where?: AttendanceRecordWhereInput
    /**
     * Limit how many AttendanceRecords to update.
     */
    limit?: number
  }

  /**
   * AttendanceRecord updateManyAndReturn
   */
  export type AttendanceRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * The data used to update AttendanceRecords.
     */
    data: XOR<AttendanceRecordUpdateManyMutationInput, AttendanceRecordUncheckedUpdateManyInput>
    /**
     * Filter which AttendanceRecords to update
     */
    where?: AttendanceRecordWhereInput
    /**
     * Limit how many AttendanceRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttendanceRecord upsert
   */
  export type AttendanceRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the AttendanceRecord to update in case it exists.
     */
    where: AttendanceRecordWhereUniqueInput
    /**
     * In case the AttendanceRecord found by the `where` argument doesn't exist, create a new AttendanceRecord with this data.
     */
    create: XOR<AttendanceRecordCreateInput, AttendanceRecordUncheckedCreateInput>
    /**
     * In case the AttendanceRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceRecordUpdateInput, AttendanceRecordUncheckedUpdateInput>
  }

  /**
   * AttendanceRecord delete
   */
  export type AttendanceRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter which AttendanceRecord to delete.
     */
    where: AttendanceRecordWhereUniqueInput
  }

  /**
   * AttendanceRecord deleteMany
   */
  export type AttendanceRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceRecords to delete
     */
    where?: AttendanceRecordWhereInput
    /**
     * Limit how many AttendanceRecords to delete.
     */
    limit?: number
  }

  /**
   * AttendanceRecord.recordedByStaff
   */
  export type AttendanceRecord$recordedByStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
  }

  /**
   * AttendanceRecord.absenceJustifications
   */
  export type AttendanceRecord$absenceJustificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    where?: AbsenceJustificationWhereInput
    orderBy?: AbsenceJustificationOrderByWithRelationInput | AbsenceJustificationOrderByWithRelationInput[]
    cursor?: AbsenceJustificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceJustificationScalarFieldEnum | AbsenceJustificationScalarFieldEnum[]
  }

  /**
   * AttendanceRecord without action
   */
  export type AttendanceRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
  }


  /**
   * Model AttendanceSession
   */

  export type AggregateAttendanceSession = {
    _count: AttendanceSessionCountAggregateOutputType | null
    _avg: AttendanceSessionAvgAggregateOutputType | null
    _sum: AttendanceSessionSumAggregateOutputType | null
    _min: AttendanceSessionMinAggregateOutputType | null
    _max: AttendanceSessionMaxAggregateOutputType | null
  }

  export type AttendanceSessionAvgAggregateOutputType = {
    id: number | null
    classId: number | null
    createdBy: number | null
    latitude: number | null
    longitude: number | null
    geofenceRadius: number | null
  }

  export type AttendanceSessionSumAggregateOutputType = {
    id: number | null
    classId: number | null
    createdBy: number | null
    latitude: number | null
    longitude: number | null
    geofenceRadius: number | null
  }

  export type AttendanceSessionMinAggregateOutputType = {
    id: number | null
    sessionId: string | null
    classId: number | null
    createdBy: number | null
    sessionDate: Date | null
    sessionTime: Date | null
    sessionType: $Enums.SessionType | null
    location: string | null
    plannedTopic: string | null
    targetLearning: string | null
    targetLevel: string | null
    planningStatus: $Enums.PlanningStatus | null
    notes: string | null
    latitude: number | null
    longitude: number | null
    geofenceRadius: number | null
    expiresAt: Date | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttendanceSessionMaxAggregateOutputType = {
    id: number | null
    sessionId: string | null
    classId: number | null
    createdBy: number | null
    sessionDate: Date | null
    sessionTime: Date | null
    sessionType: $Enums.SessionType | null
    location: string | null
    plannedTopic: string | null
    targetLearning: string | null
    targetLevel: string | null
    planningStatus: $Enums.PlanningStatus | null
    notes: string | null
    latitude: number | null
    longitude: number | null
    geofenceRadius: number | null
    expiresAt: Date | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttendanceSessionCountAggregateOutputType = {
    id: number
    sessionId: number
    classId: number
    createdBy: number
    sessionDate: number
    sessionTime: number
    sessionType: number
    location: number
    plannedTopic: number
    targetLearning: number
    targetLevel: number
    planningStatus: number
    notes: number
    latitude: number
    longitude: number
    geofenceRadius: number
    expiresAt: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AttendanceSessionAvgAggregateInputType = {
    id?: true
    classId?: true
    createdBy?: true
    latitude?: true
    longitude?: true
    geofenceRadius?: true
  }

  export type AttendanceSessionSumAggregateInputType = {
    id?: true
    classId?: true
    createdBy?: true
    latitude?: true
    longitude?: true
    geofenceRadius?: true
  }

  export type AttendanceSessionMinAggregateInputType = {
    id?: true
    sessionId?: true
    classId?: true
    createdBy?: true
    sessionDate?: true
    sessionTime?: true
    sessionType?: true
    location?: true
    plannedTopic?: true
    targetLearning?: true
    targetLevel?: true
    planningStatus?: true
    notes?: true
    latitude?: true
    longitude?: true
    geofenceRadius?: true
    expiresAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttendanceSessionMaxAggregateInputType = {
    id?: true
    sessionId?: true
    classId?: true
    createdBy?: true
    sessionDate?: true
    sessionTime?: true
    sessionType?: true
    location?: true
    plannedTopic?: true
    targetLearning?: true
    targetLevel?: true
    planningStatus?: true
    notes?: true
    latitude?: true
    longitude?: true
    geofenceRadius?: true
    expiresAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttendanceSessionCountAggregateInputType = {
    id?: true
    sessionId?: true
    classId?: true
    createdBy?: true
    sessionDate?: true
    sessionTime?: true
    sessionType?: true
    location?: true
    plannedTopic?: true
    targetLearning?: true
    targetLevel?: true
    planningStatus?: true
    notes?: true
    latitude?: true
    longitude?: true
    geofenceRadius?: true
    expiresAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AttendanceSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceSession to aggregate.
     */
    where?: AttendanceSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceSessions to fetch.
     */
    orderBy?: AttendanceSessionOrderByWithRelationInput | AttendanceSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AttendanceSessions
    **/
    _count?: true | AttendanceSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceSessionMaxAggregateInputType
  }

  export type GetAttendanceSessionAggregateType<T extends AttendanceSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendanceSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendanceSession[P]>
      : GetScalarType<T[P], AggregateAttendanceSession[P]>
  }




  export type AttendanceSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceSessionWhereInput
    orderBy?: AttendanceSessionOrderByWithAggregationInput | AttendanceSessionOrderByWithAggregationInput[]
    by: AttendanceSessionScalarFieldEnum[] | AttendanceSessionScalarFieldEnum
    having?: AttendanceSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceSessionCountAggregateInputType | true
    _avg?: AttendanceSessionAvgAggregateInputType
    _sum?: AttendanceSessionSumAggregateInputType
    _min?: AttendanceSessionMinAggregateInputType
    _max?: AttendanceSessionMaxAggregateInputType
  }

  export type AttendanceSessionGroupByOutputType = {
    id: number
    sessionId: string
    classId: number
    createdBy: number
    sessionDate: Date
    sessionTime: Date
    sessionType: $Enums.SessionType
    location: string | null
    plannedTopic: string | null
    targetLearning: string | null
    targetLevel: string | null
    planningStatus: $Enums.PlanningStatus
    notes: string | null
    latitude: number | null
    longitude: number | null
    geofenceRadius: number | null
    expiresAt: Date
    status: string | null
    createdAt: Date
    updatedAt: Date
    _count: AttendanceSessionCountAggregateOutputType | null
    _avg: AttendanceSessionAvgAggregateOutputType | null
    _sum: AttendanceSessionSumAggregateOutputType | null
    _min: AttendanceSessionMinAggregateOutputType | null
    _max: AttendanceSessionMaxAggregateOutputType | null
  }

  type GetAttendanceSessionGroupByPayload<T extends AttendanceSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceSessionGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceSessionGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    classId?: boolean
    createdBy?: boolean
    sessionDate?: boolean
    sessionTime?: boolean
    sessionType?: boolean
    location?: boolean
    plannedTopic?: boolean
    targetLearning?: boolean
    targetLevel?: boolean
    planningStatus?: boolean
    notes?: boolean
    latitude?: boolean
    longitude?: boolean
    geofenceRadius?: boolean
    expiresAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    creator?: boolean | StaffDefaultArgs<ExtArgs>
    qrSessions?: boolean | AttendanceSession$qrSessionsArgs<ExtArgs>
    _count?: boolean | AttendanceSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceSession"]>

  export type AttendanceSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    classId?: boolean
    createdBy?: boolean
    sessionDate?: boolean
    sessionTime?: boolean
    sessionType?: boolean
    location?: boolean
    plannedTopic?: boolean
    targetLearning?: boolean
    targetLevel?: boolean
    planningStatus?: boolean
    notes?: boolean
    latitude?: boolean
    longitude?: boolean
    geofenceRadius?: boolean
    expiresAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    creator?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceSession"]>

  export type AttendanceSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    classId?: boolean
    createdBy?: boolean
    sessionDate?: boolean
    sessionTime?: boolean
    sessionType?: boolean
    location?: boolean
    plannedTopic?: boolean
    targetLearning?: boolean
    targetLevel?: boolean
    planningStatus?: boolean
    notes?: boolean
    latitude?: boolean
    longitude?: boolean
    geofenceRadius?: boolean
    expiresAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    creator?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceSession"]>

  export type AttendanceSessionSelectScalar = {
    id?: boolean
    sessionId?: boolean
    classId?: boolean
    createdBy?: boolean
    sessionDate?: boolean
    sessionTime?: boolean
    sessionType?: boolean
    location?: boolean
    plannedTopic?: boolean
    targetLearning?: boolean
    targetLevel?: boolean
    planningStatus?: boolean
    notes?: boolean
    latitude?: boolean
    longitude?: boolean
    geofenceRadius?: boolean
    expiresAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AttendanceSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "classId" | "createdBy" | "sessionDate" | "sessionTime" | "sessionType" | "location" | "plannedTopic" | "targetLearning" | "targetLevel" | "planningStatus" | "notes" | "latitude" | "longitude" | "geofenceRadius" | "expiresAt" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["attendanceSession"]>
  export type AttendanceSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    creator?: boolean | StaffDefaultArgs<ExtArgs>
    qrSessions?: boolean | AttendanceSession$qrSessionsArgs<ExtArgs>
    _count?: boolean | AttendanceSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AttendanceSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    creator?: boolean | StaffDefaultArgs<ExtArgs>
  }
  export type AttendanceSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    creator?: boolean | StaffDefaultArgs<ExtArgs>
  }

  export type $AttendanceSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AttendanceSession"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      creator: Prisma.$StaffPayload<ExtArgs>
      qrSessions: Prisma.$QRSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionId: string
      classId: number
      createdBy: number
      sessionDate: Date
      sessionTime: Date
      sessionType: $Enums.SessionType
      location: string | null
      plannedTopic: string | null
      targetLearning: string | null
      targetLevel: string | null
      planningStatus: $Enums.PlanningStatus
      notes: string | null
      latitude: number | null
      longitude: number | null
      geofenceRadius: number | null
      expiresAt: Date
      status: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["attendanceSession"]>
    composites: {}
  }

  type AttendanceSessionGetPayload<S extends boolean | null | undefined | AttendanceSessionDefaultArgs> = $Result.GetResult<Prisma.$AttendanceSessionPayload, S>

  type AttendanceSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttendanceSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttendanceSessionCountAggregateInputType | true
    }

  export interface AttendanceSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AttendanceSession'], meta: { name: 'AttendanceSession' } }
    /**
     * Find zero or one AttendanceSession that matches the filter.
     * @param {AttendanceSessionFindUniqueArgs} args - Arguments to find a AttendanceSession
     * @example
     * // Get one AttendanceSession
     * const attendanceSession = await prisma.attendanceSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceSessionFindUniqueArgs>(args: SelectSubset<T, AttendanceSessionFindUniqueArgs<ExtArgs>>): Prisma__AttendanceSessionClient<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AttendanceSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttendanceSessionFindUniqueOrThrowArgs} args - Arguments to find a AttendanceSession
     * @example
     * // Get one AttendanceSession
     * const attendanceSession = await prisma.attendanceSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceSessionClient<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AttendanceSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSessionFindFirstArgs} args - Arguments to find a AttendanceSession
     * @example
     * // Get one AttendanceSession
     * const attendanceSession = await prisma.attendanceSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceSessionFindFirstArgs>(args?: SelectSubset<T, AttendanceSessionFindFirstArgs<ExtArgs>>): Prisma__AttendanceSessionClient<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AttendanceSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSessionFindFirstOrThrowArgs} args - Arguments to find a AttendanceSession
     * @example
     * // Get one AttendanceSession
     * const attendanceSession = await prisma.attendanceSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceSessionClient<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AttendanceSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AttendanceSessions
     * const attendanceSessions = await prisma.attendanceSession.findMany()
     * 
     * // Get first 10 AttendanceSessions
     * const attendanceSessions = await prisma.attendanceSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceSessionWithIdOnly = await prisma.attendanceSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceSessionFindManyArgs>(args?: SelectSubset<T, AttendanceSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AttendanceSession.
     * @param {AttendanceSessionCreateArgs} args - Arguments to create a AttendanceSession.
     * @example
     * // Create one AttendanceSession
     * const AttendanceSession = await prisma.attendanceSession.create({
     *   data: {
     *     // ... data to create a AttendanceSession
     *   }
     * })
     * 
     */
    create<T extends AttendanceSessionCreateArgs>(args: SelectSubset<T, AttendanceSessionCreateArgs<ExtArgs>>): Prisma__AttendanceSessionClient<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AttendanceSessions.
     * @param {AttendanceSessionCreateManyArgs} args - Arguments to create many AttendanceSessions.
     * @example
     * // Create many AttendanceSessions
     * const attendanceSession = await prisma.attendanceSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceSessionCreateManyArgs>(args?: SelectSubset<T, AttendanceSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AttendanceSessions and returns the data saved in the database.
     * @param {AttendanceSessionCreateManyAndReturnArgs} args - Arguments to create many AttendanceSessions.
     * @example
     * // Create many AttendanceSessions
     * const attendanceSession = await prisma.attendanceSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AttendanceSessions and only return the `id`
     * const attendanceSessionWithIdOnly = await prisma.attendanceSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AttendanceSession.
     * @param {AttendanceSessionDeleteArgs} args - Arguments to delete one AttendanceSession.
     * @example
     * // Delete one AttendanceSession
     * const AttendanceSession = await prisma.attendanceSession.delete({
     *   where: {
     *     // ... filter to delete one AttendanceSession
     *   }
     * })
     * 
     */
    delete<T extends AttendanceSessionDeleteArgs>(args: SelectSubset<T, AttendanceSessionDeleteArgs<ExtArgs>>): Prisma__AttendanceSessionClient<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AttendanceSession.
     * @param {AttendanceSessionUpdateArgs} args - Arguments to update one AttendanceSession.
     * @example
     * // Update one AttendanceSession
     * const attendanceSession = await prisma.attendanceSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceSessionUpdateArgs>(args: SelectSubset<T, AttendanceSessionUpdateArgs<ExtArgs>>): Prisma__AttendanceSessionClient<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AttendanceSessions.
     * @param {AttendanceSessionDeleteManyArgs} args - Arguments to filter AttendanceSessions to delete.
     * @example
     * // Delete a few AttendanceSessions
     * const { count } = await prisma.attendanceSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceSessionDeleteManyArgs>(args?: SelectSubset<T, AttendanceSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttendanceSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AttendanceSessions
     * const attendanceSession = await prisma.attendanceSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceSessionUpdateManyArgs>(args: SelectSubset<T, AttendanceSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttendanceSessions and returns the data updated in the database.
     * @param {AttendanceSessionUpdateManyAndReturnArgs} args - Arguments to update many AttendanceSessions.
     * @example
     * // Update many AttendanceSessions
     * const attendanceSession = await prisma.attendanceSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AttendanceSessions and only return the `id`
     * const attendanceSessionWithIdOnly = await prisma.attendanceSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttendanceSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, AttendanceSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AttendanceSession.
     * @param {AttendanceSessionUpsertArgs} args - Arguments to update or create a AttendanceSession.
     * @example
     * // Update or create a AttendanceSession
     * const attendanceSession = await prisma.attendanceSession.upsert({
     *   create: {
     *     // ... data to create a AttendanceSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AttendanceSession we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceSessionUpsertArgs>(args: SelectSubset<T, AttendanceSessionUpsertArgs<ExtArgs>>): Prisma__AttendanceSessionClient<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AttendanceSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSessionCountArgs} args - Arguments to filter AttendanceSessions to count.
     * @example
     * // Count the number of AttendanceSessions
     * const count = await prisma.attendanceSession.count({
     *   where: {
     *     // ... the filter for the AttendanceSessions we want to count
     *   }
     * })
    **/
    count<T extends AttendanceSessionCountArgs>(
      args?: Subset<T, AttendanceSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AttendanceSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceSessionAggregateArgs>(args: Subset<T, AttendanceSessionAggregateArgs>): Prisma.PrismaPromise<GetAttendanceSessionAggregateType<T>>

    /**
     * Group by AttendanceSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceSessionGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AttendanceSession model
   */
  readonly fields: AttendanceSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AttendanceSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creator<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    qrSessions<T extends AttendanceSession$qrSessionsArgs<ExtArgs> = {}>(args?: Subset<T, AttendanceSession$qrSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AttendanceSession model
   */
  interface AttendanceSessionFieldRefs {
    readonly id: FieldRef<"AttendanceSession", 'Int'>
    readonly sessionId: FieldRef<"AttendanceSession", 'String'>
    readonly classId: FieldRef<"AttendanceSession", 'Int'>
    readonly createdBy: FieldRef<"AttendanceSession", 'Int'>
    readonly sessionDate: FieldRef<"AttendanceSession", 'DateTime'>
    readonly sessionTime: FieldRef<"AttendanceSession", 'DateTime'>
    readonly sessionType: FieldRef<"AttendanceSession", 'SessionType'>
    readonly location: FieldRef<"AttendanceSession", 'String'>
    readonly plannedTopic: FieldRef<"AttendanceSession", 'String'>
    readonly targetLearning: FieldRef<"AttendanceSession", 'String'>
    readonly targetLevel: FieldRef<"AttendanceSession", 'String'>
    readonly planningStatus: FieldRef<"AttendanceSession", 'PlanningStatus'>
    readonly notes: FieldRef<"AttendanceSession", 'String'>
    readonly latitude: FieldRef<"AttendanceSession", 'Float'>
    readonly longitude: FieldRef<"AttendanceSession", 'Float'>
    readonly geofenceRadius: FieldRef<"AttendanceSession", 'Int'>
    readonly expiresAt: FieldRef<"AttendanceSession", 'DateTime'>
    readonly status: FieldRef<"AttendanceSession", 'String'>
    readonly createdAt: FieldRef<"AttendanceSession", 'DateTime'>
    readonly updatedAt: FieldRef<"AttendanceSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AttendanceSession findUnique
   */
  export type AttendanceSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceSession to fetch.
     */
    where: AttendanceSessionWhereUniqueInput
  }

  /**
   * AttendanceSession findUniqueOrThrow
   */
  export type AttendanceSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceSession to fetch.
     */
    where: AttendanceSessionWhereUniqueInput
  }

  /**
   * AttendanceSession findFirst
   */
  export type AttendanceSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceSession to fetch.
     */
    where?: AttendanceSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceSessions to fetch.
     */
    orderBy?: AttendanceSessionOrderByWithRelationInput | AttendanceSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceSessions.
     */
    cursor?: AttendanceSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceSessions.
     */
    distinct?: AttendanceSessionScalarFieldEnum | AttendanceSessionScalarFieldEnum[]
  }

  /**
   * AttendanceSession findFirstOrThrow
   */
  export type AttendanceSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceSession to fetch.
     */
    where?: AttendanceSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceSessions to fetch.
     */
    orderBy?: AttendanceSessionOrderByWithRelationInput | AttendanceSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceSessions.
     */
    cursor?: AttendanceSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceSessions.
     */
    distinct?: AttendanceSessionScalarFieldEnum | AttendanceSessionScalarFieldEnum[]
  }

  /**
   * AttendanceSession findMany
   */
  export type AttendanceSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceSessions to fetch.
     */
    where?: AttendanceSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceSessions to fetch.
     */
    orderBy?: AttendanceSessionOrderByWithRelationInput | AttendanceSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AttendanceSessions.
     */
    cursor?: AttendanceSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceSessions.
     */
    skip?: number
    distinct?: AttendanceSessionScalarFieldEnum | AttendanceSessionScalarFieldEnum[]
  }

  /**
   * AttendanceSession create
   */
  export type AttendanceSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a AttendanceSession.
     */
    data: XOR<AttendanceSessionCreateInput, AttendanceSessionUncheckedCreateInput>
  }

  /**
   * AttendanceSession createMany
   */
  export type AttendanceSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AttendanceSessions.
     */
    data: AttendanceSessionCreateManyInput | AttendanceSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AttendanceSession createManyAndReturn
   */
  export type AttendanceSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * The data used to create many AttendanceSessions.
     */
    data: AttendanceSessionCreateManyInput | AttendanceSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttendanceSession update
   */
  export type AttendanceSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a AttendanceSession.
     */
    data: XOR<AttendanceSessionUpdateInput, AttendanceSessionUncheckedUpdateInput>
    /**
     * Choose, which AttendanceSession to update.
     */
    where: AttendanceSessionWhereUniqueInput
  }

  /**
   * AttendanceSession updateMany
   */
  export type AttendanceSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AttendanceSessions.
     */
    data: XOR<AttendanceSessionUpdateManyMutationInput, AttendanceSessionUncheckedUpdateManyInput>
    /**
     * Filter which AttendanceSessions to update
     */
    where?: AttendanceSessionWhereInput
    /**
     * Limit how many AttendanceSessions to update.
     */
    limit?: number
  }

  /**
   * AttendanceSession updateManyAndReturn
   */
  export type AttendanceSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * The data used to update AttendanceSessions.
     */
    data: XOR<AttendanceSessionUpdateManyMutationInput, AttendanceSessionUncheckedUpdateManyInput>
    /**
     * Filter which AttendanceSessions to update
     */
    where?: AttendanceSessionWhereInput
    /**
     * Limit how many AttendanceSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttendanceSession upsert
   */
  export type AttendanceSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the AttendanceSession to update in case it exists.
     */
    where: AttendanceSessionWhereUniqueInput
    /**
     * In case the AttendanceSession found by the `where` argument doesn't exist, create a new AttendanceSession with this data.
     */
    create: XOR<AttendanceSessionCreateInput, AttendanceSessionUncheckedCreateInput>
    /**
     * In case the AttendanceSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceSessionUpdateInput, AttendanceSessionUncheckedUpdateInput>
  }

  /**
   * AttendanceSession delete
   */
  export type AttendanceSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
    /**
     * Filter which AttendanceSession to delete.
     */
    where: AttendanceSessionWhereUniqueInput
  }

  /**
   * AttendanceSession deleteMany
   */
  export type AttendanceSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceSessions to delete
     */
    where?: AttendanceSessionWhereInput
    /**
     * Limit how many AttendanceSessions to delete.
     */
    limit?: number
  }

  /**
   * AttendanceSession.qrSessions
   */
  export type AttendanceSession$qrSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionInclude<ExtArgs> | null
    where?: QRSessionWhereInput
    orderBy?: QRSessionOrderByWithRelationInput | QRSessionOrderByWithRelationInput[]
    cursor?: QRSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QRSessionScalarFieldEnum | QRSessionScalarFieldEnum[]
  }

  /**
   * AttendanceSession without action
   */
  export type AttendanceSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSession
     */
    select?: AttendanceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceSession
     */
    omit?: AttendanceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSessionInclude<ExtArgs> | null
  }


  /**
   * Model QRSession
   */

  export type AggregateQRSession = {
    _count: QRSessionCountAggregateOutputType | null
    _avg: QRSessionAvgAggregateOutputType | null
    _sum: QRSessionSumAggregateOutputType | null
    _min: QRSessionMinAggregateOutputType | null
    _max: QRSessionMaxAggregateOutputType | null
  }

  export type QRSessionAvgAggregateOutputType = {
    id: number | null
    attendanceSessionId: number | null
    scanCount: number | null
    maxScans: number | null
  }

  export type QRSessionSumAggregateOutputType = {
    id: number | null
    attendanceSessionId: number | null
    scanCount: number | null
    maxScans: number | null
  }

  export type QRSessionMinAggregateOutputType = {
    id: number | null
    sessionId: string | null
    attendanceSessionId: number | null
    qrData: string | null
    scanCount: number | null
    maxScans: number | null
    expiresAt: Date | null
    status: string | null
    createdAt: Date | null
  }

  export type QRSessionMaxAggregateOutputType = {
    id: number | null
    sessionId: string | null
    attendanceSessionId: number | null
    qrData: string | null
    scanCount: number | null
    maxScans: number | null
    expiresAt: Date | null
    status: string | null
    createdAt: Date | null
  }

  export type QRSessionCountAggregateOutputType = {
    id: number
    sessionId: number
    attendanceSessionId: number
    qrData: number
    scanCount: number
    maxScans: number
    expiresAt: number
    status: number
    createdAt: number
    _all: number
  }


  export type QRSessionAvgAggregateInputType = {
    id?: true
    attendanceSessionId?: true
    scanCount?: true
    maxScans?: true
  }

  export type QRSessionSumAggregateInputType = {
    id?: true
    attendanceSessionId?: true
    scanCount?: true
    maxScans?: true
  }

  export type QRSessionMinAggregateInputType = {
    id?: true
    sessionId?: true
    attendanceSessionId?: true
    qrData?: true
    scanCount?: true
    maxScans?: true
    expiresAt?: true
    status?: true
    createdAt?: true
  }

  export type QRSessionMaxAggregateInputType = {
    id?: true
    sessionId?: true
    attendanceSessionId?: true
    qrData?: true
    scanCount?: true
    maxScans?: true
    expiresAt?: true
    status?: true
    createdAt?: true
  }

  export type QRSessionCountAggregateInputType = {
    id?: true
    sessionId?: true
    attendanceSessionId?: true
    qrData?: true
    scanCount?: true
    maxScans?: true
    expiresAt?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type QRSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QRSession to aggregate.
     */
    where?: QRSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QRSessions to fetch.
     */
    orderBy?: QRSessionOrderByWithRelationInput | QRSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QRSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QRSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QRSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QRSessions
    **/
    _count?: true | QRSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QRSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QRSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QRSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QRSessionMaxAggregateInputType
  }

  export type GetQRSessionAggregateType<T extends QRSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateQRSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQRSession[P]>
      : GetScalarType<T[P], AggregateQRSession[P]>
  }




  export type QRSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QRSessionWhereInput
    orderBy?: QRSessionOrderByWithAggregationInput | QRSessionOrderByWithAggregationInput[]
    by: QRSessionScalarFieldEnum[] | QRSessionScalarFieldEnum
    having?: QRSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QRSessionCountAggregateInputType | true
    _avg?: QRSessionAvgAggregateInputType
    _sum?: QRSessionSumAggregateInputType
    _min?: QRSessionMinAggregateInputType
    _max?: QRSessionMaxAggregateInputType
  }

  export type QRSessionGroupByOutputType = {
    id: number
    sessionId: string
    attendanceSessionId: number
    qrData: string
    scanCount: number
    maxScans: number | null
    expiresAt: Date
    status: string | null
    createdAt: Date
    _count: QRSessionCountAggregateOutputType | null
    _avg: QRSessionAvgAggregateOutputType | null
    _sum: QRSessionSumAggregateOutputType | null
    _min: QRSessionMinAggregateOutputType | null
    _max: QRSessionMaxAggregateOutputType | null
  }

  type GetQRSessionGroupByPayload<T extends QRSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QRSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QRSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QRSessionGroupByOutputType[P]>
            : GetScalarType<T[P], QRSessionGroupByOutputType[P]>
        }
      >
    >


  export type QRSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    attendanceSessionId?: boolean
    qrData?: boolean
    scanCount?: boolean
    maxScans?: boolean
    expiresAt?: boolean
    status?: boolean
    createdAt?: boolean
    attendanceSession?: boolean | AttendanceSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qRSession"]>

  export type QRSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    attendanceSessionId?: boolean
    qrData?: boolean
    scanCount?: boolean
    maxScans?: boolean
    expiresAt?: boolean
    status?: boolean
    createdAt?: boolean
    attendanceSession?: boolean | AttendanceSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qRSession"]>

  export type QRSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    attendanceSessionId?: boolean
    qrData?: boolean
    scanCount?: boolean
    maxScans?: boolean
    expiresAt?: boolean
    status?: boolean
    createdAt?: boolean
    attendanceSession?: boolean | AttendanceSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qRSession"]>

  export type QRSessionSelectScalar = {
    id?: boolean
    sessionId?: boolean
    attendanceSessionId?: boolean
    qrData?: boolean
    scanCount?: boolean
    maxScans?: boolean
    expiresAt?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type QRSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "attendanceSessionId" | "qrData" | "scanCount" | "maxScans" | "expiresAt" | "status" | "createdAt", ExtArgs["result"]["qRSession"]>
  export type QRSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendanceSession?: boolean | AttendanceSessionDefaultArgs<ExtArgs>
  }
  export type QRSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendanceSession?: boolean | AttendanceSessionDefaultArgs<ExtArgs>
  }
  export type QRSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendanceSession?: boolean | AttendanceSessionDefaultArgs<ExtArgs>
  }

  export type $QRSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QRSession"
    objects: {
      attendanceSession: Prisma.$AttendanceSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionId: string
      attendanceSessionId: number
      qrData: string
      scanCount: number
      maxScans: number | null
      expiresAt: Date
      status: string | null
      createdAt: Date
    }, ExtArgs["result"]["qRSession"]>
    composites: {}
  }

  type QRSessionGetPayload<S extends boolean | null | undefined | QRSessionDefaultArgs> = $Result.GetResult<Prisma.$QRSessionPayload, S>

  type QRSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QRSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QRSessionCountAggregateInputType | true
    }

  export interface QRSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QRSession'], meta: { name: 'QRSession' } }
    /**
     * Find zero or one QRSession that matches the filter.
     * @param {QRSessionFindUniqueArgs} args - Arguments to find a QRSession
     * @example
     * // Get one QRSession
     * const qRSession = await prisma.qRSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QRSessionFindUniqueArgs>(args: SelectSubset<T, QRSessionFindUniqueArgs<ExtArgs>>): Prisma__QRSessionClient<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QRSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QRSessionFindUniqueOrThrowArgs} args - Arguments to find a QRSession
     * @example
     * // Get one QRSession
     * const qRSession = await prisma.qRSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QRSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, QRSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QRSessionClient<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QRSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRSessionFindFirstArgs} args - Arguments to find a QRSession
     * @example
     * // Get one QRSession
     * const qRSession = await prisma.qRSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QRSessionFindFirstArgs>(args?: SelectSubset<T, QRSessionFindFirstArgs<ExtArgs>>): Prisma__QRSessionClient<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QRSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRSessionFindFirstOrThrowArgs} args - Arguments to find a QRSession
     * @example
     * // Get one QRSession
     * const qRSession = await prisma.qRSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QRSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, QRSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QRSessionClient<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QRSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QRSessions
     * const qRSessions = await prisma.qRSession.findMany()
     * 
     * // Get first 10 QRSessions
     * const qRSessions = await prisma.qRSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const qRSessionWithIdOnly = await prisma.qRSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QRSessionFindManyArgs>(args?: SelectSubset<T, QRSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QRSession.
     * @param {QRSessionCreateArgs} args - Arguments to create a QRSession.
     * @example
     * // Create one QRSession
     * const QRSession = await prisma.qRSession.create({
     *   data: {
     *     // ... data to create a QRSession
     *   }
     * })
     * 
     */
    create<T extends QRSessionCreateArgs>(args: SelectSubset<T, QRSessionCreateArgs<ExtArgs>>): Prisma__QRSessionClient<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QRSessions.
     * @param {QRSessionCreateManyArgs} args - Arguments to create many QRSessions.
     * @example
     * // Create many QRSessions
     * const qRSession = await prisma.qRSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QRSessionCreateManyArgs>(args?: SelectSubset<T, QRSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QRSessions and returns the data saved in the database.
     * @param {QRSessionCreateManyAndReturnArgs} args - Arguments to create many QRSessions.
     * @example
     * // Create many QRSessions
     * const qRSession = await prisma.qRSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QRSessions and only return the `id`
     * const qRSessionWithIdOnly = await prisma.qRSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QRSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, QRSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QRSession.
     * @param {QRSessionDeleteArgs} args - Arguments to delete one QRSession.
     * @example
     * // Delete one QRSession
     * const QRSession = await prisma.qRSession.delete({
     *   where: {
     *     // ... filter to delete one QRSession
     *   }
     * })
     * 
     */
    delete<T extends QRSessionDeleteArgs>(args: SelectSubset<T, QRSessionDeleteArgs<ExtArgs>>): Prisma__QRSessionClient<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QRSession.
     * @param {QRSessionUpdateArgs} args - Arguments to update one QRSession.
     * @example
     * // Update one QRSession
     * const qRSession = await prisma.qRSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QRSessionUpdateArgs>(args: SelectSubset<T, QRSessionUpdateArgs<ExtArgs>>): Prisma__QRSessionClient<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QRSessions.
     * @param {QRSessionDeleteManyArgs} args - Arguments to filter QRSessions to delete.
     * @example
     * // Delete a few QRSessions
     * const { count } = await prisma.qRSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QRSessionDeleteManyArgs>(args?: SelectSubset<T, QRSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QRSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QRSessions
     * const qRSession = await prisma.qRSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QRSessionUpdateManyArgs>(args: SelectSubset<T, QRSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QRSessions and returns the data updated in the database.
     * @param {QRSessionUpdateManyAndReturnArgs} args - Arguments to update many QRSessions.
     * @example
     * // Update many QRSessions
     * const qRSession = await prisma.qRSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QRSessions and only return the `id`
     * const qRSessionWithIdOnly = await prisma.qRSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QRSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, QRSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QRSession.
     * @param {QRSessionUpsertArgs} args - Arguments to update or create a QRSession.
     * @example
     * // Update or create a QRSession
     * const qRSession = await prisma.qRSession.upsert({
     *   create: {
     *     // ... data to create a QRSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QRSession we want to update
     *   }
     * })
     */
    upsert<T extends QRSessionUpsertArgs>(args: SelectSubset<T, QRSessionUpsertArgs<ExtArgs>>): Prisma__QRSessionClient<$Result.GetResult<Prisma.$QRSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QRSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRSessionCountArgs} args - Arguments to filter QRSessions to count.
     * @example
     * // Count the number of QRSessions
     * const count = await prisma.qRSession.count({
     *   where: {
     *     // ... the filter for the QRSessions we want to count
     *   }
     * })
    **/
    count<T extends QRSessionCountArgs>(
      args?: Subset<T, QRSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QRSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QRSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QRSessionAggregateArgs>(args: Subset<T, QRSessionAggregateArgs>): Prisma.PrismaPromise<GetQRSessionAggregateType<T>>

    /**
     * Group by QRSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QRSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QRSessionGroupByArgs['orderBy'] }
        : { orderBy?: QRSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QRSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQRSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QRSession model
   */
  readonly fields: QRSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QRSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QRSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attendanceSession<T extends AttendanceSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AttendanceSessionDefaultArgs<ExtArgs>>): Prisma__AttendanceSessionClient<$Result.GetResult<Prisma.$AttendanceSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QRSession model
   */
  interface QRSessionFieldRefs {
    readonly id: FieldRef<"QRSession", 'Int'>
    readonly sessionId: FieldRef<"QRSession", 'String'>
    readonly attendanceSessionId: FieldRef<"QRSession", 'Int'>
    readonly qrData: FieldRef<"QRSession", 'String'>
    readonly scanCount: FieldRef<"QRSession", 'Int'>
    readonly maxScans: FieldRef<"QRSession", 'Int'>
    readonly expiresAt: FieldRef<"QRSession", 'DateTime'>
    readonly status: FieldRef<"QRSession", 'String'>
    readonly createdAt: FieldRef<"QRSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QRSession findUnique
   */
  export type QRSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionInclude<ExtArgs> | null
    /**
     * Filter, which QRSession to fetch.
     */
    where: QRSessionWhereUniqueInput
  }

  /**
   * QRSession findUniqueOrThrow
   */
  export type QRSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionInclude<ExtArgs> | null
    /**
     * Filter, which QRSession to fetch.
     */
    where: QRSessionWhereUniqueInput
  }

  /**
   * QRSession findFirst
   */
  export type QRSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionInclude<ExtArgs> | null
    /**
     * Filter, which QRSession to fetch.
     */
    where?: QRSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QRSessions to fetch.
     */
    orderBy?: QRSessionOrderByWithRelationInput | QRSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QRSessions.
     */
    cursor?: QRSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QRSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QRSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QRSessions.
     */
    distinct?: QRSessionScalarFieldEnum | QRSessionScalarFieldEnum[]
  }

  /**
   * QRSession findFirstOrThrow
   */
  export type QRSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionInclude<ExtArgs> | null
    /**
     * Filter, which QRSession to fetch.
     */
    where?: QRSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QRSessions to fetch.
     */
    orderBy?: QRSessionOrderByWithRelationInput | QRSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QRSessions.
     */
    cursor?: QRSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QRSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QRSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QRSessions.
     */
    distinct?: QRSessionScalarFieldEnum | QRSessionScalarFieldEnum[]
  }

  /**
   * QRSession findMany
   */
  export type QRSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionInclude<ExtArgs> | null
    /**
     * Filter, which QRSessions to fetch.
     */
    where?: QRSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QRSessions to fetch.
     */
    orderBy?: QRSessionOrderByWithRelationInput | QRSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QRSessions.
     */
    cursor?: QRSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QRSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QRSessions.
     */
    skip?: number
    distinct?: QRSessionScalarFieldEnum | QRSessionScalarFieldEnum[]
  }

  /**
   * QRSession create
   */
  export type QRSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a QRSession.
     */
    data: XOR<QRSessionCreateInput, QRSessionUncheckedCreateInput>
  }

  /**
   * QRSession createMany
   */
  export type QRSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QRSessions.
     */
    data: QRSessionCreateManyInput | QRSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QRSession createManyAndReturn
   */
  export type QRSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * The data used to create many QRSessions.
     */
    data: QRSessionCreateManyInput | QRSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QRSession update
   */
  export type QRSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a QRSession.
     */
    data: XOR<QRSessionUpdateInput, QRSessionUncheckedUpdateInput>
    /**
     * Choose, which QRSession to update.
     */
    where: QRSessionWhereUniqueInput
  }

  /**
   * QRSession updateMany
   */
  export type QRSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QRSessions.
     */
    data: XOR<QRSessionUpdateManyMutationInput, QRSessionUncheckedUpdateManyInput>
    /**
     * Filter which QRSessions to update
     */
    where?: QRSessionWhereInput
    /**
     * Limit how many QRSessions to update.
     */
    limit?: number
  }

  /**
   * QRSession updateManyAndReturn
   */
  export type QRSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * The data used to update QRSessions.
     */
    data: XOR<QRSessionUpdateManyMutationInput, QRSessionUncheckedUpdateManyInput>
    /**
     * Filter which QRSessions to update
     */
    where?: QRSessionWhereInput
    /**
     * Limit how many QRSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QRSession upsert
   */
  export type QRSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the QRSession to update in case it exists.
     */
    where: QRSessionWhereUniqueInput
    /**
     * In case the QRSession found by the `where` argument doesn't exist, create a new QRSession with this data.
     */
    create: XOR<QRSessionCreateInput, QRSessionUncheckedCreateInput>
    /**
     * In case the QRSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QRSessionUpdateInput, QRSessionUncheckedUpdateInput>
  }

  /**
   * QRSession delete
   */
  export type QRSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionInclude<ExtArgs> | null
    /**
     * Filter which QRSession to delete.
     */
    where: QRSessionWhereUniqueInput
  }

  /**
   * QRSession deleteMany
   */
  export type QRSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QRSessions to delete
     */
    where?: QRSessionWhereInput
    /**
     * Limit how many QRSessions to delete.
     */
    limit?: number
  }

  /**
   * QRSession without action
   */
  export type QRSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRSession
     */
    select?: QRSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QRSession
     */
    omit?: QRSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QRSessionInclude<ExtArgs> | null
  }


  /**
   * Model AbsenceJustification
   */

  export type AggregateAbsenceJustification = {
    _count: AbsenceJustificationCountAggregateOutputType | null
    _avg: AbsenceJustificationAvgAggregateOutputType | null
    _sum: AbsenceJustificationSumAggregateOutputType | null
    _min: AbsenceJustificationMinAggregateOutputType | null
    _max: AbsenceJustificationMaxAggregateOutputType | null
  }

  export type AbsenceJustificationAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    attendanceRecordId: number | null
    reviewedBy: number | null
  }

  export type AbsenceJustificationSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    attendanceRecordId: number | null
    reviewedBy: number | null
  }

  export type AbsenceJustificationMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    attendanceRecordId: number | null
    absenceDate: Date | null
    reason: $Enums.JustificationReason | null
    description: string | null
    status: $Enums.JustificationStatus | null
    submittedAt: Date | null
    reviewedAt: Date | null
    reviewedBy: number | null
    reviewNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AbsenceJustificationMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    attendanceRecordId: number | null
    absenceDate: Date | null
    reason: $Enums.JustificationReason | null
    description: string | null
    status: $Enums.JustificationStatus | null
    submittedAt: Date | null
    reviewedAt: Date | null
    reviewedBy: number | null
    reviewNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AbsenceJustificationCountAggregateOutputType = {
    id: number
    studentId: number
    classId: number
    attendanceRecordId: number
    absenceDate: number
    reason: number
    description: number
    documents: number
    status: number
    submittedAt: number
    reviewedAt: number
    reviewedBy: number
    reviewNote: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AbsenceJustificationAvgAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    attendanceRecordId?: true
    reviewedBy?: true
  }

  export type AbsenceJustificationSumAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    attendanceRecordId?: true
    reviewedBy?: true
  }

  export type AbsenceJustificationMinAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    attendanceRecordId?: true
    absenceDate?: true
    reason?: true
    description?: true
    status?: true
    submittedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    reviewNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AbsenceJustificationMaxAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    attendanceRecordId?: true
    absenceDate?: true
    reason?: true
    description?: true
    status?: true
    submittedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    reviewNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AbsenceJustificationCountAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    attendanceRecordId?: true
    absenceDate?: true
    reason?: true
    description?: true
    documents?: true
    status?: true
    submittedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    reviewNote?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AbsenceJustificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AbsenceJustification to aggregate.
     */
    where?: AbsenceJustificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceJustifications to fetch.
     */
    orderBy?: AbsenceJustificationOrderByWithRelationInput | AbsenceJustificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AbsenceJustificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceJustifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceJustifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AbsenceJustifications
    **/
    _count?: true | AbsenceJustificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AbsenceJustificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AbsenceJustificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AbsenceJustificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AbsenceJustificationMaxAggregateInputType
  }

  export type GetAbsenceJustificationAggregateType<T extends AbsenceJustificationAggregateArgs> = {
        [P in keyof T & keyof AggregateAbsenceJustification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAbsenceJustification[P]>
      : GetScalarType<T[P], AggregateAbsenceJustification[P]>
  }




  export type AbsenceJustificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceJustificationWhereInput
    orderBy?: AbsenceJustificationOrderByWithAggregationInput | AbsenceJustificationOrderByWithAggregationInput[]
    by: AbsenceJustificationScalarFieldEnum[] | AbsenceJustificationScalarFieldEnum
    having?: AbsenceJustificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AbsenceJustificationCountAggregateInputType | true
    _avg?: AbsenceJustificationAvgAggregateInputType
    _sum?: AbsenceJustificationSumAggregateInputType
    _min?: AbsenceJustificationMinAggregateInputType
    _max?: AbsenceJustificationMaxAggregateInputType
  }

  export type AbsenceJustificationGroupByOutputType = {
    id: number
    studentId: number
    classId: number
    attendanceRecordId: number | null
    absenceDate: Date
    reason: $Enums.JustificationReason
    description: string | null
    documents: JsonValue | null
    status: $Enums.JustificationStatus
    submittedAt: Date
    reviewedAt: Date | null
    reviewedBy: number | null
    reviewNote: string | null
    createdAt: Date
    updatedAt: Date
    _count: AbsenceJustificationCountAggregateOutputType | null
    _avg: AbsenceJustificationAvgAggregateOutputType | null
    _sum: AbsenceJustificationSumAggregateOutputType | null
    _min: AbsenceJustificationMinAggregateOutputType | null
    _max: AbsenceJustificationMaxAggregateOutputType | null
  }

  type GetAbsenceJustificationGroupByPayload<T extends AbsenceJustificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AbsenceJustificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AbsenceJustificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AbsenceJustificationGroupByOutputType[P]>
            : GetScalarType<T[P], AbsenceJustificationGroupByOutputType[P]>
        }
      >
    >


  export type AbsenceJustificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    attendanceRecordId?: boolean
    absenceDate?: boolean
    reason?: boolean
    description?: boolean
    documents?: boolean
    status?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    reviewNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    attendanceRecord?: boolean | AbsenceJustification$attendanceRecordArgs<ExtArgs>
    reviewedByStaff?: boolean | AbsenceJustification$reviewedByStaffArgs<ExtArgs>
  }, ExtArgs["result"]["absenceJustification"]>

  export type AbsenceJustificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    attendanceRecordId?: boolean
    absenceDate?: boolean
    reason?: boolean
    description?: boolean
    documents?: boolean
    status?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    reviewNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    attendanceRecord?: boolean | AbsenceJustification$attendanceRecordArgs<ExtArgs>
    reviewedByStaff?: boolean | AbsenceJustification$reviewedByStaffArgs<ExtArgs>
  }, ExtArgs["result"]["absenceJustification"]>

  export type AbsenceJustificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    attendanceRecordId?: boolean
    absenceDate?: boolean
    reason?: boolean
    description?: boolean
    documents?: boolean
    status?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    reviewNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    attendanceRecord?: boolean | AbsenceJustification$attendanceRecordArgs<ExtArgs>
    reviewedByStaff?: boolean | AbsenceJustification$reviewedByStaffArgs<ExtArgs>
  }, ExtArgs["result"]["absenceJustification"]>

  export type AbsenceJustificationSelectScalar = {
    id?: boolean
    studentId?: boolean
    classId?: boolean
    attendanceRecordId?: boolean
    absenceDate?: boolean
    reason?: boolean
    description?: boolean
    documents?: boolean
    status?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    reviewNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AbsenceJustificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "classId" | "attendanceRecordId" | "absenceDate" | "reason" | "description" | "documents" | "status" | "submittedAt" | "reviewedAt" | "reviewedBy" | "reviewNote" | "createdAt" | "updatedAt", ExtArgs["result"]["absenceJustification"]>
  export type AbsenceJustificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    attendanceRecord?: boolean | AbsenceJustification$attendanceRecordArgs<ExtArgs>
    reviewedByStaff?: boolean | AbsenceJustification$reviewedByStaffArgs<ExtArgs>
  }
  export type AbsenceJustificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    attendanceRecord?: boolean | AbsenceJustification$attendanceRecordArgs<ExtArgs>
    reviewedByStaff?: boolean | AbsenceJustification$reviewedByStaffArgs<ExtArgs>
  }
  export type AbsenceJustificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    attendanceRecord?: boolean | AbsenceJustification$attendanceRecordArgs<ExtArgs>
    reviewedByStaff?: boolean | AbsenceJustification$reviewedByStaffArgs<ExtArgs>
  }

  export type $AbsenceJustificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AbsenceJustification"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
      attendanceRecord: Prisma.$AttendanceRecordPayload<ExtArgs> | null
      reviewedByStaff: Prisma.$StaffPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      classId: number
      attendanceRecordId: number | null
      absenceDate: Date
      reason: $Enums.JustificationReason
      description: string | null
      documents: Prisma.JsonValue | null
      status: $Enums.JustificationStatus
      submittedAt: Date
      reviewedAt: Date | null
      reviewedBy: number | null
      reviewNote: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["absenceJustification"]>
    composites: {}
  }

  type AbsenceJustificationGetPayload<S extends boolean | null | undefined | AbsenceJustificationDefaultArgs> = $Result.GetResult<Prisma.$AbsenceJustificationPayload, S>

  type AbsenceJustificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AbsenceJustificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AbsenceJustificationCountAggregateInputType | true
    }

  export interface AbsenceJustificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AbsenceJustification'], meta: { name: 'AbsenceJustification' } }
    /**
     * Find zero or one AbsenceJustification that matches the filter.
     * @param {AbsenceJustificationFindUniqueArgs} args - Arguments to find a AbsenceJustification
     * @example
     * // Get one AbsenceJustification
     * const absenceJustification = await prisma.absenceJustification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AbsenceJustificationFindUniqueArgs>(args: SelectSubset<T, AbsenceJustificationFindUniqueArgs<ExtArgs>>): Prisma__AbsenceJustificationClient<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AbsenceJustification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AbsenceJustificationFindUniqueOrThrowArgs} args - Arguments to find a AbsenceJustification
     * @example
     * // Get one AbsenceJustification
     * const absenceJustification = await prisma.absenceJustification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AbsenceJustificationFindUniqueOrThrowArgs>(args: SelectSubset<T, AbsenceJustificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AbsenceJustificationClient<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AbsenceJustification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceJustificationFindFirstArgs} args - Arguments to find a AbsenceJustification
     * @example
     * // Get one AbsenceJustification
     * const absenceJustification = await prisma.absenceJustification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AbsenceJustificationFindFirstArgs>(args?: SelectSubset<T, AbsenceJustificationFindFirstArgs<ExtArgs>>): Prisma__AbsenceJustificationClient<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AbsenceJustification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceJustificationFindFirstOrThrowArgs} args - Arguments to find a AbsenceJustification
     * @example
     * // Get one AbsenceJustification
     * const absenceJustification = await prisma.absenceJustification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AbsenceJustificationFindFirstOrThrowArgs>(args?: SelectSubset<T, AbsenceJustificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AbsenceJustificationClient<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AbsenceJustifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceJustificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AbsenceJustifications
     * const absenceJustifications = await prisma.absenceJustification.findMany()
     * 
     * // Get first 10 AbsenceJustifications
     * const absenceJustifications = await prisma.absenceJustification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const absenceJustificationWithIdOnly = await prisma.absenceJustification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AbsenceJustificationFindManyArgs>(args?: SelectSubset<T, AbsenceJustificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AbsenceJustification.
     * @param {AbsenceJustificationCreateArgs} args - Arguments to create a AbsenceJustification.
     * @example
     * // Create one AbsenceJustification
     * const AbsenceJustification = await prisma.absenceJustification.create({
     *   data: {
     *     // ... data to create a AbsenceJustification
     *   }
     * })
     * 
     */
    create<T extends AbsenceJustificationCreateArgs>(args: SelectSubset<T, AbsenceJustificationCreateArgs<ExtArgs>>): Prisma__AbsenceJustificationClient<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AbsenceJustifications.
     * @param {AbsenceJustificationCreateManyArgs} args - Arguments to create many AbsenceJustifications.
     * @example
     * // Create many AbsenceJustifications
     * const absenceJustification = await prisma.absenceJustification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AbsenceJustificationCreateManyArgs>(args?: SelectSubset<T, AbsenceJustificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AbsenceJustifications and returns the data saved in the database.
     * @param {AbsenceJustificationCreateManyAndReturnArgs} args - Arguments to create many AbsenceJustifications.
     * @example
     * // Create many AbsenceJustifications
     * const absenceJustification = await prisma.absenceJustification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AbsenceJustifications and only return the `id`
     * const absenceJustificationWithIdOnly = await prisma.absenceJustification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AbsenceJustificationCreateManyAndReturnArgs>(args?: SelectSubset<T, AbsenceJustificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AbsenceJustification.
     * @param {AbsenceJustificationDeleteArgs} args - Arguments to delete one AbsenceJustification.
     * @example
     * // Delete one AbsenceJustification
     * const AbsenceJustification = await prisma.absenceJustification.delete({
     *   where: {
     *     // ... filter to delete one AbsenceJustification
     *   }
     * })
     * 
     */
    delete<T extends AbsenceJustificationDeleteArgs>(args: SelectSubset<T, AbsenceJustificationDeleteArgs<ExtArgs>>): Prisma__AbsenceJustificationClient<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AbsenceJustification.
     * @param {AbsenceJustificationUpdateArgs} args - Arguments to update one AbsenceJustification.
     * @example
     * // Update one AbsenceJustification
     * const absenceJustification = await prisma.absenceJustification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AbsenceJustificationUpdateArgs>(args: SelectSubset<T, AbsenceJustificationUpdateArgs<ExtArgs>>): Prisma__AbsenceJustificationClient<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AbsenceJustifications.
     * @param {AbsenceJustificationDeleteManyArgs} args - Arguments to filter AbsenceJustifications to delete.
     * @example
     * // Delete a few AbsenceJustifications
     * const { count } = await prisma.absenceJustification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AbsenceJustificationDeleteManyArgs>(args?: SelectSubset<T, AbsenceJustificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AbsenceJustifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceJustificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AbsenceJustifications
     * const absenceJustification = await prisma.absenceJustification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AbsenceJustificationUpdateManyArgs>(args: SelectSubset<T, AbsenceJustificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AbsenceJustifications and returns the data updated in the database.
     * @param {AbsenceJustificationUpdateManyAndReturnArgs} args - Arguments to update many AbsenceJustifications.
     * @example
     * // Update many AbsenceJustifications
     * const absenceJustification = await prisma.absenceJustification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AbsenceJustifications and only return the `id`
     * const absenceJustificationWithIdOnly = await prisma.absenceJustification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AbsenceJustificationUpdateManyAndReturnArgs>(args: SelectSubset<T, AbsenceJustificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AbsenceJustification.
     * @param {AbsenceJustificationUpsertArgs} args - Arguments to update or create a AbsenceJustification.
     * @example
     * // Update or create a AbsenceJustification
     * const absenceJustification = await prisma.absenceJustification.upsert({
     *   create: {
     *     // ... data to create a AbsenceJustification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AbsenceJustification we want to update
     *   }
     * })
     */
    upsert<T extends AbsenceJustificationUpsertArgs>(args: SelectSubset<T, AbsenceJustificationUpsertArgs<ExtArgs>>): Prisma__AbsenceJustificationClient<$Result.GetResult<Prisma.$AbsenceJustificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AbsenceJustifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceJustificationCountArgs} args - Arguments to filter AbsenceJustifications to count.
     * @example
     * // Count the number of AbsenceJustifications
     * const count = await prisma.absenceJustification.count({
     *   where: {
     *     // ... the filter for the AbsenceJustifications we want to count
     *   }
     * })
    **/
    count<T extends AbsenceJustificationCountArgs>(
      args?: Subset<T, AbsenceJustificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AbsenceJustificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AbsenceJustification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceJustificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AbsenceJustificationAggregateArgs>(args: Subset<T, AbsenceJustificationAggregateArgs>): Prisma.PrismaPromise<GetAbsenceJustificationAggregateType<T>>

    /**
     * Group by AbsenceJustification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceJustificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AbsenceJustificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AbsenceJustificationGroupByArgs['orderBy'] }
        : { orderBy?: AbsenceJustificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AbsenceJustificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAbsenceJustificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AbsenceJustification model
   */
  readonly fields: AbsenceJustificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AbsenceJustification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AbsenceJustificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attendanceRecord<T extends AbsenceJustification$attendanceRecordArgs<ExtArgs> = {}>(args?: Subset<T, AbsenceJustification$attendanceRecordArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reviewedByStaff<T extends AbsenceJustification$reviewedByStaffArgs<ExtArgs> = {}>(args?: Subset<T, AbsenceJustification$reviewedByStaffArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AbsenceJustification model
   */
  interface AbsenceJustificationFieldRefs {
    readonly id: FieldRef<"AbsenceJustification", 'Int'>
    readonly studentId: FieldRef<"AbsenceJustification", 'Int'>
    readonly classId: FieldRef<"AbsenceJustification", 'Int'>
    readonly attendanceRecordId: FieldRef<"AbsenceJustification", 'Int'>
    readonly absenceDate: FieldRef<"AbsenceJustification", 'DateTime'>
    readonly reason: FieldRef<"AbsenceJustification", 'JustificationReason'>
    readonly description: FieldRef<"AbsenceJustification", 'String'>
    readonly documents: FieldRef<"AbsenceJustification", 'Json'>
    readonly status: FieldRef<"AbsenceJustification", 'JustificationStatus'>
    readonly submittedAt: FieldRef<"AbsenceJustification", 'DateTime'>
    readonly reviewedAt: FieldRef<"AbsenceJustification", 'DateTime'>
    readonly reviewedBy: FieldRef<"AbsenceJustification", 'Int'>
    readonly reviewNote: FieldRef<"AbsenceJustification", 'String'>
    readonly createdAt: FieldRef<"AbsenceJustification", 'DateTime'>
    readonly updatedAt: FieldRef<"AbsenceJustification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AbsenceJustification findUnique
   */
  export type AbsenceJustificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceJustification to fetch.
     */
    where: AbsenceJustificationWhereUniqueInput
  }

  /**
   * AbsenceJustification findUniqueOrThrow
   */
  export type AbsenceJustificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceJustification to fetch.
     */
    where: AbsenceJustificationWhereUniqueInput
  }

  /**
   * AbsenceJustification findFirst
   */
  export type AbsenceJustificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceJustification to fetch.
     */
    where?: AbsenceJustificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceJustifications to fetch.
     */
    orderBy?: AbsenceJustificationOrderByWithRelationInput | AbsenceJustificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AbsenceJustifications.
     */
    cursor?: AbsenceJustificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceJustifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceJustifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AbsenceJustifications.
     */
    distinct?: AbsenceJustificationScalarFieldEnum | AbsenceJustificationScalarFieldEnum[]
  }

  /**
   * AbsenceJustification findFirstOrThrow
   */
  export type AbsenceJustificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceJustification to fetch.
     */
    where?: AbsenceJustificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceJustifications to fetch.
     */
    orderBy?: AbsenceJustificationOrderByWithRelationInput | AbsenceJustificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AbsenceJustifications.
     */
    cursor?: AbsenceJustificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceJustifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceJustifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AbsenceJustifications.
     */
    distinct?: AbsenceJustificationScalarFieldEnum | AbsenceJustificationScalarFieldEnum[]
  }

  /**
   * AbsenceJustification findMany
   */
  export type AbsenceJustificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceJustifications to fetch.
     */
    where?: AbsenceJustificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceJustifications to fetch.
     */
    orderBy?: AbsenceJustificationOrderByWithRelationInput | AbsenceJustificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AbsenceJustifications.
     */
    cursor?: AbsenceJustificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceJustifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceJustifications.
     */
    skip?: number
    distinct?: AbsenceJustificationScalarFieldEnum | AbsenceJustificationScalarFieldEnum[]
  }

  /**
   * AbsenceJustification create
   */
  export type AbsenceJustificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    /**
     * The data needed to create a AbsenceJustification.
     */
    data: XOR<AbsenceJustificationCreateInput, AbsenceJustificationUncheckedCreateInput>
  }

  /**
   * AbsenceJustification createMany
   */
  export type AbsenceJustificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AbsenceJustifications.
     */
    data: AbsenceJustificationCreateManyInput | AbsenceJustificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AbsenceJustification createManyAndReturn
   */
  export type AbsenceJustificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * The data used to create many AbsenceJustifications.
     */
    data: AbsenceJustificationCreateManyInput | AbsenceJustificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AbsenceJustification update
   */
  export type AbsenceJustificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    /**
     * The data needed to update a AbsenceJustification.
     */
    data: XOR<AbsenceJustificationUpdateInput, AbsenceJustificationUncheckedUpdateInput>
    /**
     * Choose, which AbsenceJustification to update.
     */
    where: AbsenceJustificationWhereUniqueInput
  }

  /**
   * AbsenceJustification updateMany
   */
  export type AbsenceJustificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AbsenceJustifications.
     */
    data: XOR<AbsenceJustificationUpdateManyMutationInput, AbsenceJustificationUncheckedUpdateManyInput>
    /**
     * Filter which AbsenceJustifications to update
     */
    where?: AbsenceJustificationWhereInput
    /**
     * Limit how many AbsenceJustifications to update.
     */
    limit?: number
  }

  /**
   * AbsenceJustification updateManyAndReturn
   */
  export type AbsenceJustificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * The data used to update AbsenceJustifications.
     */
    data: XOR<AbsenceJustificationUpdateManyMutationInput, AbsenceJustificationUncheckedUpdateManyInput>
    /**
     * Filter which AbsenceJustifications to update
     */
    where?: AbsenceJustificationWhereInput
    /**
     * Limit how many AbsenceJustifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AbsenceJustification upsert
   */
  export type AbsenceJustificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    /**
     * The filter to search for the AbsenceJustification to update in case it exists.
     */
    where: AbsenceJustificationWhereUniqueInput
    /**
     * In case the AbsenceJustification found by the `where` argument doesn't exist, create a new AbsenceJustification with this data.
     */
    create: XOR<AbsenceJustificationCreateInput, AbsenceJustificationUncheckedCreateInput>
    /**
     * In case the AbsenceJustification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AbsenceJustificationUpdateInput, AbsenceJustificationUncheckedUpdateInput>
  }

  /**
   * AbsenceJustification delete
   */
  export type AbsenceJustificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
    /**
     * Filter which AbsenceJustification to delete.
     */
    where: AbsenceJustificationWhereUniqueInput
  }

  /**
   * AbsenceJustification deleteMany
   */
  export type AbsenceJustificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AbsenceJustifications to delete
     */
    where?: AbsenceJustificationWhereInput
    /**
     * Limit how many AbsenceJustifications to delete.
     */
    limit?: number
  }

  /**
   * AbsenceJustification.attendanceRecord
   */
  export type AbsenceJustification$attendanceRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttendanceRecord
     */
    omit?: AttendanceRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    where?: AttendanceRecordWhereInput
  }

  /**
   * AbsenceJustification.reviewedByStaff
   */
  export type AbsenceJustification$reviewedByStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
  }

  /**
   * AbsenceJustification without action
   */
  export type AbsenceJustificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceJustification
     */
    select?: AbsenceJustificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AbsenceJustification
     */
    omit?: AbsenceJustificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceJustificationInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number | null
    headId: number | null
    programsCount: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    id: number | null
    headId: number | null
    programsCount: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    headId: number | null
    type: $Enums.DepartmentType | null
    status: $Enums.DepartmentStatus | null
    programsCount: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    headId: number | null
    type: $Enums.DepartmentType | null
    status: $Enums.DepartmentStatus | null
    programsCount: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    code: number
    headId: number
    type: number
    status: number
    programsCount: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
    headId?: true
    programsCount?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
    headId?: true
    programsCount?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    headId?: true
    type?: true
    status?: true
    programsCount?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    headId?: true
    type?: true
    status?: true
    programsCount?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    headId?: true
    type?: true
    status?: true
    programsCount?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: number
    name: string
    code: string
    headId: number | null
    type: $Enums.DepartmentType
    status: $Enums.DepartmentStatus
    programsCount: number
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    headId?: boolean
    type?: boolean
    status?: boolean
    programsCount?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    head?: boolean | Department$headArgs<ExtArgs>
    leaderboardRankings?: boolean | Department$leaderboardRankingsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    headId?: boolean
    type?: boolean
    status?: boolean
    programsCount?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    head?: boolean | Department$headArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    headId?: boolean
    type?: boolean
    status?: boolean
    programsCount?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    head?: boolean | Department$headArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    headId?: boolean
    type?: boolean
    status?: boolean
    programsCount?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "headId" | "type" | "status" | "programsCount" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    head?: boolean | Department$headArgs<ExtArgs>
    leaderboardRankings?: boolean | Department$leaderboardRankingsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    head?: boolean | Department$headArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    head?: boolean | Department$headArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      head: Prisma.$StaffPayload<ExtArgs> | null
      leaderboardRankings: Prisma.$LeaderboardRankingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string
      headId: number | null
      type: $Enums.DepartmentType
      status: $Enums.DepartmentStatus
      programsCount: number
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    head<T extends Department$headArgs<ExtArgs> = {}>(args?: Subset<T, Department$headArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    leaderboardRankings<T extends Department$leaderboardRankingsArgs<ExtArgs> = {}>(args?: Subset<T, Department$leaderboardRankingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'Int'>
    readonly name: FieldRef<"Department", 'String'>
    readonly code: FieldRef<"Department", 'String'>
    readonly headId: FieldRef<"Department", 'Int'>
    readonly type: FieldRef<"Department", 'DepartmentType'>
    readonly status: FieldRef<"Department", 'DepartmentStatus'>
    readonly programsCount: FieldRef<"Department", 'Int'>
    readonly description: FieldRef<"Department", 'String'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.head
   */
  export type Department$headArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
  }

  /**
   * Department.leaderboardRankings
   */
  export type Department$leaderboardRankingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    where?: LeaderboardRankingWhereInput
    orderBy?: LeaderboardRankingOrderByWithRelationInput | LeaderboardRankingOrderByWithRelationInput[]
    cursor?: LeaderboardRankingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaderboardRankingScalarFieldEnum | LeaderboardRankingScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    read: boolean | null
    priority: $Enums.NotificationPriority | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    read: boolean | null
    priority: $Enums.NotificationPriority | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    read: number
    priority: number
    data: number
    createdAt: number
    expiresAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    read?: true
    priority?: true
    createdAt?: true
    expiresAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    read?: true
    priority?: true
    createdAt?: true
    expiresAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    read?: true
    priority?: true
    data?: true
    createdAt?: true
    expiresAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    type: $Enums.NotificationType
    title: string
    message: string
    read: boolean
    priority: $Enums.NotificationPriority
    data: JsonValue | null
    createdAt: Date
    expiresAt: Date | null
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    priority?: boolean
    data?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    priority?: boolean
    data?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    priority?: boolean
    data?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    priority?: boolean
    data?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "title" | "message" | "read" | "priority" | "data" | "createdAt" | "expiresAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      type: $Enums.NotificationType
      title: string
      message: string
      read: boolean
      priority: $Enums.NotificationPriority
      data: Prisma.JsonValue | null
      createdAt: Date
      expiresAt: Date | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly priority: FieldRef<"Notification", 'NotificationPriority'>
    readonly data: FieldRef<"Notification", 'Json'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly expiresAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model StudentRiskTracking
   */

  export type AggregateStudentRiskTracking = {
    _count: StudentRiskTrackingCountAggregateOutputType | null
    _avg: StudentRiskTrackingAvgAggregateOutputType | null
    _sum: StudentRiskTrackingSumAggregateOutputType | null
    _min: StudentRiskTrackingMinAggregateOutputType | null
    _max: StudentRiskTrackingMaxAggregateOutputType | null
  }

  export type StudentRiskTrackingAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    attendanceRate: Decimal | null
    consecutiveAbsences: number | null
    totalAbsences: number | null
  }

  export type StudentRiskTrackingSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    attendanceRate: Decimal | null
    consecutiveAbsences: number | null
    totalAbsences: number | null
  }

  export type StudentRiskTrackingMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    riskLevel: $Enums.RiskLevel | null
    attendanceRate: Decimal | null
    consecutiveAbsences: number | null
    totalAbsences: number | null
    lastAttendanceDate: Date | null
    parentEmail: string | null
    parentPhone: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentRiskTrackingMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    riskLevel: $Enums.RiskLevel | null
    attendanceRate: Decimal | null
    consecutiveAbsences: number | null
    totalAbsences: number | null
    lastAttendanceDate: Date | null
    parentEmail: string | null
    parentPhone: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentRiskTrackingCountAggregateOutputType = {
    id: number
    studentId: number
    riskLevel: number
    attendanceRate: number
    consecutiveAbsences: number
    totalAbsences: number
    lastAttendanceDate: number
    parentEmail: number
    parentPhone: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StudentRiskTrackingAvgAggregateInputType = {
    id?: true
    studentId?: true
    attendanceRate?: true
    consecutiveAbsences?: true
    totalAbsences?: true
  }

  export type StudentRiskTrackingSumAggregateInputType = {
    id?: true
    studentId?: true
    attendanceRate?: true
    consecutiveAbsences?: true
    totalAbsences?: true
  }

  export type StudentRiskTrackingMinAggregateInputType = {
    id?: true
    studentId?: true
    riskLevel?: true
    attendanceRate?: true
    consecutiveAbsences?: true
    totalAbsences?: true
    lastAttendanceDate?: true
    parentEmail?: true
    parentPhone?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentRiskTrackingMaxAggregateInputType = {
    id?: true
    studentId?: true
    riskLevel?: true
    attendanceRate?: true
    consecutiveAbsences?: true
    totalAbsences?: true
    lastAttendanceDate?: true
    parentEmail?: true
    parentPhone?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentRiskTrackingCountAggregateInputType = {
    id?: true
    studentId?: true
    riskLevel?: true
    attendanceRate?: true
    consecutiveAbsences?: true
    totalAbsences?: true
    lastAttendanceDate?: true
    parentEmail?: true
    parentPhone?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StudentRiskTrackingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentRiskTracking to aggregate.
     */
    where?: StudentRiskTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentRiskTrackings to fetch.
     */
    orderBy?: StudentRiskTrackingOrderByWithRelationInput | StudentRiskTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentRiskTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentRiskTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentRiskTrackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentRiskTrackings
    **/
    _count?: true | StudentRiskTrackingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentRiskTrackingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentRiskTrackingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentRiskTrackingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentRiskTrackingMaxAggregateInputType
  }

  export type GetStudentRiskTrackingAggregateType<T extends StudentRiskTrackingAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentRiskTracking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentRiskTracking[P]>
      : GetScalarType<T[P], AggregateStudentRiskTracking[P]>
  }




  export type StudentRiskTrackingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentRiskTrackingWhereInput
    orderBy?: StudentRiskTrackingOrderByWithAggregationInput | StudentRiskTrackingOrderByWithAggregationInput[]
    by: StudentRiskTrackingScalarFieldEnum[] | StudentRiskTrackingScalarFieldEnum
    having?: StudentRiskTrackingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentRiskTrackingCountAggregateInputType | true
    _avg?: StudentRiskTrackingAvgAggregateInputType
    _sum?: StudentRiskTrackingSumAggregateInputType
    _min?: StudentRiskTrackingMinAggregateInputType
    _max?: StudentRiskTrackingMaxAggregateInputType
  }

  export type StudentRiskTrackingGroupByOutputType = {
    id: number
    studentId: number
    riskLevel: $Enums.RiskLevel
    attendanceRate: Decimal
    consecutiveAbsences: number
    totalAbsences: number
    lastAttendanceDate: Date | null
    parentEmail: string | null
    parentPhone: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: StudentRiskTrackingCountAggregateOutputType | null
    _avg: StudentRiskTrackingAvgAggregateOutputType | null
    _sum: StudentRiskTrackingSumAggregateOutputType | null
    _min: StudentRiskTrackingMinAggregateOutputType | null
    _max: StudentRiskTrackingMaxAggregateOutputType | null
  }

  type GetStudentRiskTrackingGroupByPayload<T extends StudentRiskTrackingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentRiskTrackingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentRiskTrackingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentRiskTrackingGroupByOutputType[P]>
            : GetScalarType<T[P], StudentRiskTrackingGroupByOutputType[P]>
        }
      >
    >


  export type StudentRiskTrackingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    riskLevel?: boolean
    attendanceRate?: boolean
    consecutiveAbsences?: boolean
    totalAbsences?: boolean
    lastAttendanceDate?: boolean
    parentEmail?: boolean
    parentPhone?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentRiskTracking"]>

  export type StudentRiskTrackingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    riskLevel?: boolean
    attendanceRate?: boolean
    consecutiveAbsences?: boolean
    totalAbsences?: boolean
    lastAttendanceDate?: boolean
    parentEmail?: boolean
    parentPhone?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentRiskTracking"]>

  export type StudentRiskTrackingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    riskLevel?: boolean
    attendanceRate?: boolean
    consecutiveAbsences?: boolean
    totalAbsences?: boolean
    lastAttendanceDate?: boolean
    parentEmail?: boolean
    parentPhone?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentRiskTracking"]>

  export type StudentRiskTrackingSelectScalar = {
    id?: boolean
    studentId?: boolean
    riskLevel?: boolean
    attendanceRate?: boolean
    consecutiveAbsences?: boolean
    totalAbsences?: boolean
    lastAttendanceDate?: boolean
    parentEmail?: boolean
    parentPhone?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StudentRiskTrackingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "riskLevel" | "attendanceRate" | "consecutiveAbsences" | "totalAbsences" | "lastAttendanceDate" | "parentEmail" | "parentPhone" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["studentRiskTracking"]>
  export type StudentRiskTrackingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentRiskTrackingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentRiskTrackingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $StudentRiskTrackingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentRiskTracking"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      riskLevel: $Enums.RiskLevel
      attendanceRate: Prisma.Decimal
      consecutiveAbsences: number
      totalAbsences: number
      lastAttendanceDate: Date | null
      parentEmail: string | null
      parentPhone: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["studentRiskTracking"]>
    composites: {}
  }

  type StudentRiskTrackingGetPayload<S extends boolean | null | undefined | StudentRiskTrackingDefaultArgs> = $Result.GetResult<Prisma.$StudentRiskTrackingPayload, S>

  type StudentRiskTrackingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentRiskTrackingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentRiskTrackingCountAggregateInputType | true
    }

  export interface StudentRiskTrackingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentRiskTracking'], meta: { name: 'StudentRiskTracking' } }
    /**
     * Find zero or one StudentRiskTracking that matches the filter.
     * @param {StudentRiskTrackingFindUniqueArgs} args - Arguments to find a StudentRiskTracking
     * @example
     * // Get one StudentRiskTracking
     * const studentRiskTracking = await prisma.studentRiskTracking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentRiskTrackingFindUniqueArgs>(args: SelectSubset<T, StudentRiskTrackingFindUniqueArgs<ExtArgs>>): Prisma__StudentRiskTrackingClient<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentRiskTracking that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentRiskTrackingFindUniqueOrThrowArgs} args - Arguments to find a StudentRiskTracking
     * @example
     * // Get one StudentRiskTracking
     * const studentRiskTracking = await prisma.studentRiskTracking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentRiskTrackingFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentRiskTrackingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentRiskTrackingClient<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentRiskTracking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentRiskTrackingFindFirstArgs} args - Arguments to find a StudentRiskTracking
     * @example
     * // Get one StudentRiskTracking
     * const studentRiskTracking = await prisma.studentRiskTracking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentRiskTrackingFindFirstArgs>(args?: SelectSubset<T, StudentRiskTrackingFindFirstArgs<ExtArgs>>): Prisma__StudentRiskTrackingClient<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentRiskTracking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentRiskTrackingFindFirstOrThrowArgs} args - Arguments to find a StudentRiskTracking
     * @example
     * // Get one StudentRiskTracking
     * const studentRiskTracking = await prisma.studentRiskTracking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentRiskTrackingFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentRiskTrackingFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentRiskTrackingClient<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentRiskTrackings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentRiskTrackingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentRiskTrackings
     * const studentRiskTrackings = await prisma.studentRiskTracking.findMany()
     * 
     * // Get first 10 StudentRiskTrackings
     * const studentRiskTrackings = await prisma.studentRiskTracking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentRiskTrackingWithIdOnly = await prisma.studentRiskTracking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentRiskTrackingFindManyArgs>(args?: SelectSubset<T, StudentRiskTrackingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentRiskTracking.
     * @param {StudentRiskTrackingCreateArgs} args - Arguments to create a StudentRiskTracking.
     * @example
     * // Create one StudentRiskTracking
     * const StudentRiskTracking = await prisma.studentRiskTracking.create({
     *   data: {
     *     // ... data to create a StudentRiskTracking
     *   }
     * })
     * 
     */
    create<T extends StudentRiskTrackingCreateArgs>(args: SelectSubset<T, StudentRiskTrackingCreateArgs<ExtArgs>>): Prisma__StudentRiskTrackingClient<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentRiskTrackings.
     * @param {StudentRiskTrackingCreateManyArgs} args - Arguments to create many StudentRiskTrackings.
     * @example
     * // Create many StudentRiskTrackings
     * const studentRiskTracking = await prisma.studentRiskTracking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentRiskTrackingCreateManyArgs>(args?: SelectSubset<T, StudentRiskTrackingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentRiskTrackings and returns the data saved in the database.
     * @param {StudentRiskTrackingCreateManyAndReturnArgs} args - Arguments to create many StudentRiskTrackings.
     * @example
     * // Create many StudentRiskTrackings
     * const studentRiskTracking = await prisma.studentRiskTracking.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentRiskTrackings and only return the `id`
     * const studentRiskTrackingWithIdOnly = await prisma.studentRiskTracking.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentRiskTrackingCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentRiskTrackingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentRiskTracking.
     * @param {StudentRiskTrackingDeleteArgs} args - Arguments to delete one StudentRiskTracking.
     * @example
     * // Delete one StudentRiskTracking
     * const StudentRiskTracking = await prisma.studentRiskTracking.delete({
     *   where: {
     *     // ... filter to delete one StudentRiskTracking
     *   }
     * })
     * 
     */
    delete<T extends StudentRiskTrackingDeleteArgs>(args: SelectSubset<T, StudentRiskTrackingDeleteArgs<ExtArgs>>): Prisma__StudentRiskTrackingClient<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentRiskTracking.
     * @param {StudentRiskTrackingUpdateArgs} args - Arguments to update one StudentRiskTracking.
     * @example
     * // Update one StudentRiskTracking
     * const studentRiskTracking = await prisma.studentRiskTracking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentRiskTrackingUpdateArgs>(args: SelectSubset<T, StudentRiskTrackingUpdateArgs<ExtArgs>>): Prisma__StudentRiskTrackingClient<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentRiskTrackings.
     * @param {StudentRiskTrackingDeleteManyArgs} args - Arguments to filter StudentRiskTrackings to delete.
     * @example
     * // Delete a few StudentRiskTrackings
     * const { count } = await prisma.studentRiskTracking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentRiskTrackingDeleteManyArgs>(args?: SelectSubset<T, StudentRiskTrackingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentRiskTrackings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentRiskTrackingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentRiskTrackings
     * const studentRiskTracking = await prisma.studentRiskTracking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentRiskTrackingUpdateManyArgs>(args: SelectSubset<T, StudentRiskTrackingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentRiskTrackings and returns the data updated in the database.
     * @param {StudentRiskTrackingUpdateManyAndReturnArgs} args - Arguments to update many StudentRiskTrackings.
     * @example
     * // Update many StudentRiskTrackings
     * const studentRiskTracking = await prisma.studentRiskTracking.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentRiskTrackings and only return the `id`
     * const studentRiskTrackingWithIdOnly = await prisma.studentRiskTracking.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentRiskTrackingUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentRiskTrackingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentRiskTracking.
     * @param {StudentRiskTrackingUpsertArgs} args - Arguments to update or create a StudentRiskTracking.
     * @example
     * // Update or create a StudentRiskTracking
     * const studentRiskTracking = await prisma.studentRiskTracking.upsert({
     *   create: {
     *     // ... data to create a StudentRiskTracking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentRiskTracking we want to update
     *   }
     * })
     */
    upsert<T extends StudentRiskTrackingUpsertArgs>(args: SelectSubset<T, StudentRiskTrackingUpsertArgs<ExtArgs>>): Prisma__StudentRiskTrackingClient<$Result.GetResult<Prisma.$StudentRiskTrackingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentRiskTrackings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentRiskTrackingCountArgs} args - Arguments to filter StudentRiskTrackings to count.
     * @example
     * // Count the number of StudentRiskTrackings
     * const count = await prisma.studentRiskTracking.count({
     *   where: {
     *     // ... the filter for the StudentRiskTrackings we want to count
     *   }
     * })
    **/
    count<T extends StudentRiskTrackingCountArgs>(
      args?: Subset<T, StudentRiskTrackingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentRiskTrackingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentRiskTracking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentRiskTrackingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentRiskTrackingAggregateArgs>(args: Subset<T, StudentRiskTrackingAggregateArgs>): Prisma.PrismaPromise<GetStudentRiskTrackingAggregateType<T>>

    /**
     * Group by StudentRiskTracking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentRiskTrackingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentRiskTrackingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentRiskTrackingGroupByArgs['orderBy'] }
        : { orderBy?: StudentRiskTrackingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentRiskTrackingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentRiskTrackingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentRiskTracking model
   */
  readonly fields: StudentRiskTrackingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentRiskTracking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentRiskTrackingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentRiskTracking model
   */
  interface StudentRiskTrackingFieldRefs {
    readonly id: FieldRef<"StudentRiskTracking", 'Int'>
    readonly studentId: FieldRef<"StudentRiskTracking", 'Int'>
    readonly riskLevel: FieldRef<"StudentRiskTracking", 'RiskLevel'>
    readonly attendanceRate: FieldRef<"StudentRiskTracking", 'Decimal'>
    readonly consecutiveAbsences: FieldRef<"StudentRiskTracking", 'Int'>
    readonly totalAbsences: FieldRef<"StudentRiskTracking", 'Int'>
    readonly lastAttendanceDate: FieldRef<"StudentRiskTracking", 'DateTime'>
    readonly parentEmail: FieldRef<"StudentRiskTracking", 'String'>
    readonly parentPhone: FieldRef<"StudentRiskTracking", 'String'>
    readonly notes: FieldRef<"StudentRiskTracking", 'String'>
    readonly createdAt: FieldRef<"StudentRiskTracking", 'DateTime'>
    readonly updatedAt: FieldRef<"StudentRiskTracking", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudentRiskTracking findUnique
   */
  export type StudentRiskTrackingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingInclude<ExtArgs> | null
    /**
     * Filter, which StudentRiskTracking to fetch.
     */
    where: StudentRiskTrackingWhereUniqueInput
  }

  /**
   * StudentRiskTracking findUniqueOrThrow
   */
  export type StudentRiskTrackingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingInclude<ExtArgs> | null
    /**
     * Filter, which StudentRiskTracking to fetch.
     */
    where: StudentRiskTrackingWhereUniqueInput
  }

  /**
   * StudentRiskTracking findFirst
   */
  export type StudentRiskTrackingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingInclude<ExtArgs> | null
    /**
     * Filter, which StudentRiskTracking to fetch.
     */
    where?: StudentRiskTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentRiskTrackings to fetch.
     */
    orderBy?: StudentRiskTrackingOrderByWithRelationInput | StudentRiskTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentRiskTrackings.
     */
    cursor?: StudentRiskTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentRiskTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentRiskTrackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentRiskTrackings.
     */
    distinct?: StudentRiskTrackingScalarFieldEnum | StudentRiskTrackingScalarFieldEnum[]
  }

  /**
   * StudentRiskTracking findFirstOrThrow
   */
  export type StudentRiskTrackingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingInclude<ExtArgs> | null
    /**
     * Filter, which StudentRiskTracking to fetch.
     */
    where?: StudentRiskTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentRiskTrackings to fetch.
     */
    orderBy?: StudentRiskTrackingOrderByWithRelationInput | StudentRiskTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentRiskTrackings.
     */
    cursor?: StudentRiskTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentRiskTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentRiskTrackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentRiskTrackings.
     */
    distinct?: StudentRiskTrackingScalarFieldEnum | StudentRiskTrackingScalarFieldEnum[]
  }

  /**
   * StudentRiskTracking findMany
   */
  export type StudentRiskTrackingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingInclude<ExtArgs> | null
    /**
     * Filter, which StudentRiskTrackings to fetch.
     */
    where?: StudentRiskTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentRiskTrackings to fetch.
     */
    orderBy?: StudentRiskTrackingOrderByWithRelationInput | StudentRiskTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentRiskTrackings.
     */
    cursor?: StudentRiskTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentRiskTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentRiskTrackings.
     */
    skip?: number
    distinct?: StudentRiskTrackingScalarFieldEnum | StudentRiskTrackingScalarFieldEnum[]
  }

  /**
   * StudentRiskTracking create
   */
  export type StudentRiskTrackingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentRiskTracking.
     */
    data: XOR<StudentRiskTrackingCreateInput, StudentRiskTrackingUncheckedCreateInput>
  }

  /**
   * StudentRiskTracking createMany
   */
  export type StudentRiskTrackingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentRiskTrackings.
     */
    data: StudentRiskTrackingCreateManyInput | StudentRiskTrackingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentRiskTracking createManyAndReturn
   */
  export type StudentRiskTrackingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * The data used to create many StudentRiskTrackings.
     */
    data: StudentRiskTrackingCreateManyInput | StudentRiskTrackingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentRiskTracking update
   */
  export type StudentRiskTrackingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentRiskTracking.
     */
    data: XOR<StudentRiskTrackingUpdateInput, StudentRiskTrackingUncheckedUpdateInput>
    /**
     * Choose, which StudentRiskTracking to update.
     */
    where: StudentRiskTrackingWhereUniqueInput
  }

  /**
   * StudentRiskTracking updateMany
   */
  export type StudentRiskTrackingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentRiskTrackings.
     */
    data: XOR<StudentRiskTrackingUpdateManyMutationInput, StudentRiskTrackingUncheckedUpdateManyInput>
    /**
     * Filter which StudentRiskTrackings to update
     */
    where?: StudentRiskTrackingWhereInput
    /**
     * Limit how many StudentRiskTrackings to update.
     */
    limit?: number
  }

  /**
   * StudentRiskTracking updateManyAndReturn
   */
  export type StudentRiskTrackingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * The data used to update StudentRiskTrackings.
     */
    data: XOR<StudentRiskTrackingUpdateManyMutationInput, StudentRiskTrackingUncheckedUpdateManyInput>
    /**
     * Filter which StudentRiskTrackings to update
     */
    where?: StudentRiskTrackingWhereInput
    /**
     * Limit how many StudentRiskTrackings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentRiskTracking upsert
   */
  export type StudentRiskTrackingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentRiskTracking to update in case it exists.
     */
    where: StudentRiskTrackingWhereUniqueInput
    /**
     * In case the StudentRiskTracking found by the `where` argument doesn't exist, create a new StudentRiskTracking with this data.
     */
    create: XOR<StudentRiskTrackingCreateInput, StudentRiskTrackingUncheckedCreateInput>
    /**
     * In case the StudentRiskTracking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentRiskTrackingUpdateInput, StudentRiskTrackingUncheckedUpdateInput>
  }

  /**
   * StudentRiskTracking delete
   */
  export type StudentRiskTrackingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingInclude<ExtArgs> | null
    /**
     * Filter which StudentRiskTracking to delete.
     */
    where: StudentRiskTrackingWhereUniqueInput
  }

  /**
   * StudentRiskTracking deleteMany
   */
  export type StudentRiskTrackingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentRiskTrackings to delete
     */
    where?: StudentRiskTrackingWhereInput
    /**
     * Limit how many StudentRiskTrackings to delete.
     */
    limit?: number
  }

  /**
   * StudentRiskTracking without action
   */
  export type StudentRiskTrackingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentRiskTracking
     */
    select?: StudentRiskTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentRiskTracking
     */
    omit?: StudentRiskTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentRiskTrackingInclude<ExtArgs> | null
  }


  /**
   * Model StudentAlert
   */

  export type AggregateStudentAlert = {
    _count: StudentAlertCountAggregateOutputType | null
    _avg: StudentAlertAvgAggregateOutputType | null
    _sum: StudentAlertSumAggregateOutputType | null
    _min: StudentAlertMinAggregateOutputType | null
    _max: StudentAlertMaxAggregateOutputType | null
  }

  export type StudentAlertAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    sentBy: number | null
  }

  export type StudentAlertSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    sentBy: number | null
  }

  export type StudentAlertMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    alertType: $Enums.AlertType | null
    message: string | null
    recipient: string | null
    status: $Enums.AlertStatus | null
    sentBy: number | null
    sentAt: Date | null
    createdAt: Date | null
  }

  export type StudentAlertMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    alertType: $Enums.AlertType | null
    message: string | null
    recipient: string | null
    status: $Enums.AlertStatus | null
    sentBy: number | null
    sentAt: Date | null
    createdAt: Date | null
  }

  export type StudentAlertCountAggregateOutputType = {
    id: number
    studentId: number
    alertType: number
    message: number
    recipient: number
    status: number
    sentBy: number
    sentAt: number
    createdAt: number
    _all: number
  }


  export type StudentAlertAvgAggregateInputType = {
    id?: true
    studentId?: true
    sentBy?: true
  }

  export type StudentAlertSumAggregateInputType = {
    id?: true
    studentId?: true
    sentBy?: true
  }

  export type StudentAlertMinAggregateInputType = {
    id?: true
    studentId?: true
    alertType?: true
    message?: true
    recipient?: true
    status?: true
    sentBy?: true
    sentAt?: true
    createdAt?: true
  }

  export type StudentAlertMaxAggregateInputType = {
    id?: true
    studentId?: true
    alertType?: true
    message?: true
    recipient?: true
    status?: true
    sentBy?: true
    sentAt?: true
    createdAt?: true
  }

  export type StudentAlertCountAggregateInputType = {
    id?: true
    studentId?: true
    alertType?: true
    message?: true
    recipient?: true
    status?: true
    sentBy?: true
    sentAt?: true
    createdAt?: true
    _all?: true
  }

  export type StudentAlertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentAlert to aggregate.
     */
    where?: StudentAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAlerts to fetch.
     */
    orderBy?: StudentAlertOrderByWithRelationInput | StudentAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentAlerts
    **/
    _count?: true | StudentAlertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAlertAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentAlertSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentAlertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentAlertMaxAggregateInputType
  }

  export type GetStudentAlertAggregateType<T extends StudentAlertAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentAlert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentAlert[P]>
      : GetScalarType<T[P], AggregateStudentAlert[P]>
  }




  export type StudentAlertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAlertWhereInput
    orderBy?: StudentAlertOrderByWithAggregationInput | StudentAlertOrderByWithAggregationInput[]
    by: StudentAlertScalarFieldEnum[] | StudentAlertScalarFieldEnum
    having?: StudentAlertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentAlertCountAggregateInputType | true
    _avg?: StudentAlertAvgAggregateInputType
    _sum?: StudentAlertSumAggregateInputType
    _min?: StudentAlertMinAggregateInputType
    _max?: StudentAlertMaxAggregateInputType
  }

  export type StudentAlertGroupByOutputType = {
    id: number
    studentId: number
    alertType: $Enums.AlertType
    message: string
    recipient: string | null
    status: $Enums.AlertStatus
    sentBy: number | null
    sentAt: Date | null
    createdAt: Date
    _count: StudentAlertCountAggregateOutputType | null
    _avg: StudentAlertAvgAggregateOutputType | null
    _sum: StudentAlertSumAggregateOutputType | null
    _min: StudentAlertMinAggregateOutputType | null
    _max: StudentAlertMaxAggregateOutputType | null
  }

  type GetStudentAlertGroupByPayload<T extends StudentAlertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentAlertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentAlertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentAlertGroupByOutputType[P]>
            : GetScalarType<T[P], StudentAlertGroupByOutputType[P]>
        }
      >
    >


  export type StudentAlertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    alertType?: boolean
    message?: boolean
    recipient?: boolean
    status?: boolean
    sentBy?: boolean
    sentAt?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    sentByStaff?: boolean | StudentAlert$sentByStaffArgs<ExtArgs>
  }, ExtArgs["result"]["studentAlert"]>

  export type StudentAlertSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    alertType?: boolean
    message?: boolean
    recipient?: boolean
    status?: boolean
    sentBy?: boolean
    sentAt?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    sentByStaff?: boolean | StudentAlert$sentByStaffArgs<ExtArgs>
  }, ExtArgs["result"]["studentAlert"]>

  export type StudentAlertSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    alertType?: boolean
    message?: boolean
    recipient?: boolean
    status?: boolean
    sentBy?: boolean
    sentAt?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    sentByStaff?: boolean | StudentAlert$sentByStaffArgs<ExtArgs>
  }, ExtArgs["result"]["studentAlert"]>

  export type StudentAlertSelectScalar = {
    id?: boolean
    studentId?: boolean
    alertType?: boolean
    message?: boolean
    recipient?: boolean
    status?: boolean
    sentBy?: boolean
    sentAt?: boolean
    createdAt?: boolean
  }

  export type StudentAlertOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "alertType" | "message" | "recipient" | "status" | "sentBy" | "sentAt" | "createdAt", ExtArgs["result"]["studentAlert"]>
  export type StudentAlertInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    sentByStaff?: boolean | StudentAlert$sentByStaffArgs<ExtArgs>
  }
  export type StudentAlertIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    sentByStaff?: boolean | StudentAlert$sentByStaffArgs<ExtArgs>
  }
  export type StudentAlertIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    sentByStaff?: boolean | StudentAlert$sentByStaffArgs<ExtArgs>
  }

  export type $StudentAlertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentAlert"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      sentByStaff: Prisma.$StaffPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      alertType: $Enums.AlertType
      message: string
      recipient: string | null
      status: $Enums.AlertStatus
      sentBy: number | null
      sentAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["studentAlert"]>
    composites: {}
  }

  type StudentAlertGetPayload<S extends boolean | null | undefined | StudentAlertDefaultArgs> = $Result.GetResult<Prisma.$StudentAlertPayload, S>

  type StudentAlertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentAlertFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentAlertCountAggregateInputType | true
    }

  export interface StudentAlertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentAlert'], meta: { name: 'StudentAlert' } }
    /**
     * Find zero or one StudentAlert that matches the filter.
     * @param {StudentAlertFindUniqueArgs} args - Arguments to find a StudentAlert
     * @example
     * // Get one StudentAlert
     * const studentAlert = await prisma.studentAlert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentAlertFindUniqueArgs>(args: SelectSubset<T, StudentAlertFindUniqueArgs<ExtArgs>>): Prisma__StudentAlertClient<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentAlert that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentAlertFindUniqueOrThrowArgs} args - Arguments to find a StudentAlert
     * @example
     * // Get one StudentAlert
     * const studentAlert = await prisma.studentAlert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentAlertFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentAlertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentAlertClient<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentAlert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAlertFindFirstArgs} args - Arguments to find a StudentAlert
     * @example
     * // Get one StudentAlert
     * const studentAlert = await prisma.studentAlert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentAlertFindFirstArgs>(args?: SelectSubset<T, StudentAlertFindFirstArgs<ExtArgs>>): Prisma__StudentAlertClient<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentAlert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAlertFindFirstOrThrowArgs} args - Arguments to find a StudentAlert
     * @example
     * // Get one StudentAlert
     * const studentAlert = await prisma.studentAlert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentAlertFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentAlertFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentAlertClient<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentAlerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAlertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentAlerts
     * const studentAlerts = await prisma.studentAlert.findMany()
     * 
     * // Get first 10 StudentAlerts
     * const studentAlerts = await prisma.studentAlert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentAlertWithIdOnly = await prisma.studentAlert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentAlertFindManyArgs>(args?: SelectSubset<T, StudentAlertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentAlert.
     * @param {StudentAlertCreateArgs} args - Arguments to create a StudentAlert.
     * @example
     * // Create one StudentAlert
     * const StudentAlert = await prisma.studentAlert.create({
     *   data: {
     *     // ... data to create a StudentAlert
     *   }
     * })
     * 
     */
    create<T extends StudentAlertCreateArgs>(args: SelectSubset<T, StudentAlertCreateArgs<ExtArgs>>): Prisma__StudentAlertClient<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentAlerts.
     * @param {StudentAlertCreateManyArgs} args - Arguments to create many StudentAlerts.
     * @example
     * // Create many StudentAlerts
     * const studentAlert = await prisma.studentAlert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentAlertCreateManyArgs>(args?: SelectSubset<T, StudentAlertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentAlerts and returns the data saved in the database.
     * @param {StudentAlertCreateManyAndReturnArgs} args - Arguments to create many StudentAlerts.
     * @example
     * // Create many StudentAlerts
     * const studentAlert = await prisma.studentAlert.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentAlerts and only return the `id`
     * const studentAlertWithIdOnly = await prisma.studentAlert.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentAlertCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentAlertCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentAlert.
     * @param {StudentAlertDeleteArgs} args - Arguments to delete one StudentAlert.
     * @example
     * // Delete one StudentAlert
     * const StudentAlert = await prisma.studentAlert.delete({
     *   where: {
     *     // ... filter to delete one StudentAlert
     *   }
     * })
     * 
     */
    delete<T extends StudentAlertDeleteArgs>(args: SelectSubset<T, StudentAlertDeleteArgs<ExtArgs>>): Prisma__StudentAlertClient<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentAlert.
     * @param {StudentAlertUpdateArgs} args - Arguments to update one StudentAlert.
     * @example
     * // Update one StudentAlert
     * const studentAlert = await prisma.studentAlert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentAlertUpdateArgs>(args: SelectSubset<T, StudentAlertUpdateArgs<ExtArgs>>): Prisma__StudentAlertClient<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentAlerts.
     * @param {StudentAlertDeleteManyArgs} args - Arguments to filter StudentAlerts to delete.
     * @example
     * // Delete a few StudentAlerts
     * const { count } = await prisma.studentAlert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentAlertDeleteManyArgs>(args?: SelectSubset<T, StudentAlertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentAlerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAlertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentAlerts
     * const studentAlert = await prisma.studentAlert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentAlertUpdateManyArgs>(args: SelectSubset<T, StudentAlertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentAlerts and returns the data updated in the database.
     * @param {StudentAlertUpdateManyAndReturnArgs} args - Arguments to update many StudentAlerts.
     * @example
     * // Update many StudentAlerts
     * const studentAlert = await prisma.studentAlert.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentAlerts and only return the `id`
     * const studentAlertWithIdOnly = await prisma.studentAlert.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentAlertUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentAlertUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentAlert.
     * @param {StudentAlertUpsertArgs} args - Arguments to update or create a StudentAlert.
     * @example
     * // Update or create a StudentAlert
     * const studentAlert = await prisma.studentAlert.upsert({
     *   create: {
     *     // ... data to create a StudentAlert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentAlert we want to update
     *   }
     * })
     */
    upsert<T extends StudentAlertUpsertArgs>(args: SelectSubset<T, StudentAlertUpsertArgs<ExtArgs>>): Prisma__StudentAlertClient<$Result.GetResult<Prisma.$StudentAlertPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentAlerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAlertCountArgs} args - Arguments to filter StudentAlerts to count.
     * @example
     * // Count the number of StudentAlerts
     * const count = await prisma.studentAlert.count({
     *   where: {
     *     // ... the filter for the StudentAlerts we want to count
     *   }
     * })
    **/
    count<T extends StudentAlertCountArgs>(
      args?: Subset<T, StudentAlertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentAlertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentAlert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAlertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAlertAggregateArgs>(args: Subset<T, StudentAlertAggregateArgs>): Prisma.PrismaPromise<GetStudentAlertAggregateType<T>>

    /**
     * Group by StudentAlert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAlertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentAlertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentAlertGroupByArgs['orderBy'] }
        : { orderBy?: StudentAlertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentAlertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentAlertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentAlert model
   */
  readonly fields: StudentAlertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentAlert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentAlertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sentByStaff<T extends StudentAlert$sentByStaffArgs<ExtArgs> = {}>(args?: Subset<T, StudentAlert$sentByStaffArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentAlert model
   */
  interface StudentAlertFieldRefs {
    readonly id: FieldRef<"StudentAlert", 'Int'>
    readonly studentId: FieldRef<"StudentAlert", 'Int'>
    readonly alertType: FieldRef<"StudentAlert", 'AlertType'>
    readonly message: FieldRef<"StudentAlert", 'String'>
    readonly recipient: FieldRef<"StudentAlert", 'String'>
    readonly status: FieldRef<"StudentAlert", 'AlertStatus'>
    readonly sentBy: FieldRef<"StudentAlert", 'Int'>
    readonly sentAt: FieldRef<"StudentAlert", 'DateTime'>
    readonly createdAt: FieldRef<"StudentAlert", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudentAlert findUnique
   */
  export type StudentAlertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
    /**
     * Filter, which StudentAlert to fetch.
     */
    where: StudentAlertWhereUniqueInput
  }

  /**
   * StudentAlert findUniqueOrThrow
   */
  export type StudentAlertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
    /**
     * Filter, which StudentAlert to fetch.
     */
    where: StudentAlertWhereUniqueInput
  }

  /**
   * StudentAlert findFirst
   */
  export type StudentAlertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
    /**
     * Filter, which StudentAlert to fetch.
     */
    where?: StudentAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAlerts to fetch.
     */
    orderBy?: StudentAlertOrderByWithRelationInput | StudentAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentAlerts.
     */
    cursor?: StudentAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentAlerts.
     */
    distinct?: StudentAlertScalarFieldEnum | StudentAlertScalarFieldEnum[]
  }

  /**
   * StudentAlert findFirstOrThrow
   */
  export type StudentAlertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
    /**
     * Filter, which StudentAlert to fetch.
     */
    where?: StudentAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAlerts to fetch.
     */
    orderBy?: StudentAlertOrderByWithRelationInput | StudentAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentAlerts.
     */
    cursor?: StudentAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentAlerts.
     */
    distinct?: StudentAlertScalarFieldEnum | StudentAlertScalarFieldEnum[]
  }

  /**
   * StudentAlert findMany
   */
  export type StudentAlertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
    /**
     * Filter, which StudentAlerts to fetch.
     */
    where?: StudentAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAlerts to fetch.
     */
    orderBy?: StudentAlertOrderByWithRelationInput | StudentAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentAlerts.
     */
    cursor?: StudentAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAlerts.
     */
    skip?: number
    distinct?: StudentAlertScalarFieldEnum | StudentAlertScalarFieldEnum[]
  }

  /**
   * StudentAlert create
   */
  export type StudentAlertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentAlert.
     */
    data: XOR<StudentAlertCreateInput, StudentAlertUncheckedCreateInput>
  }

  /**
   * StudentAlert createMany
   */
  export type StudentAlertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentAlerts.
     */
    data: StudentAlertCreateManyInput | StudentAlertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentAlert createManyAndReturn
   */
  export type StudentAlertCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * The data used to create many StudentAlerts.
     */
    data: StudentAlertCreateManyInput | StudentAlertCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentAlert update
   */
  export type StudentAlertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentAlert.
     */
    data: XOR<StudentAlertUpdateInput, StudentAlertUncheckedUpdateInput>
    /**
     * Choose, which StudentAlert to update.
     */
    where: StudentAlertWhereUniqueInput
  }

  /**
   * StudentAlert updateMany
   */
  export type StudentAlertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentAlerts.
     */
    data: XOR<StudentAlertUpdateManyMutationInput, StudentAlertUncheckedUpdateManyInput>
    /**
     * Filter which StudentAlerts to update
     */
    where?: StudentAlertWhereInput
    /**
     * Limit how many StudentAlerts to update.
     */
    limit?: number
  }

  /**
   * StudentAlert updateManyAndReturn
   */
  export type StudentAlertUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * The data used to update StudentAlerts.
     */
    data: XOR<StudentAlertUpdateManyMutationInput, StudentAlertUncheckedUpdateManyInput>
    /**
     * Filter which StudentAlerts to update
     */
    where?: StudentAlertWhereInput
    /**
     * Limit how many StudentAlerts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentAlert upsert
   */
  export type StudentAlertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentAlert to update in case it exists.
     */
    where: StudentAlertWhereUniqueInput
    /**
     * In case the StudentAlert found by the `where` argument doesn't exist, create a new StudentAlert with this data.
     */
    create: XOR<StudentAlertCreateInput, StudentAlertUncheckedCreateInput>
    /**
     * In case the StudentAlert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentAlertUpdateInput, StudentAlertUncheckedUpdateInput>
  }

  /**
   * StudentAlert delete
   */
  export type StudentAlertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
    /**
     * Filter which StudentAlert to delete.
     */
    where: StudentAlertWhereUniqueInput
  }

  /**
   * StudentAlert deleteMany
   */
  export type StudentAlertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentAlerts to delete
     */
    where?: StudentAlertWhereInput
    /**
     * Limit how many StudentAlerts to delete.
     */
    limit?: number
  }

  /**
   * StudentAlert.sentByStaff
   */
  export type StudentAlert$sentByStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
  }

  /**
   * StudentAlert without action
   */
  export type StudentAlertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAlert
     */
    select?: StudentAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAlert
     */
    omit?: StudentAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAlertInclude<ExtArgs> | null
  }


  /**
   * Model StudentPoint
   */

  export type AggregateStudentPoint = {
    _count: StudentPointCountAggregateOutputType | null
    _avg: StudentPointAvgAggregateOutputType | null
    _sum: StudentPointSumAggregateOutputType | null
    _min: StudentPointMinAggregateOutputType | null
    _max: StudentPointMaxAggregateOutputType | null
  }

  export type StudentPointAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    points: number | null
    referenceId: number | null
    awardedBy: number | null
  }

  export type StudentPointSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    points: number | null
    referenceId: number | null
    awardedBy: number | null
  }

  export type StudentPointMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    points: number | null
    pointType: string | null
    description: string | null
    referenceId: number | null
    awardedBy: number | null
    createdAt: Date | null
  }

  export type StudentPointMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    points: number | null
    pointType: string | null
    description: string | null
    referenceId: number | null
    awardedBy: number | null
    createdAt: Date | null
  }

  export type StudentPointCountAggregateOutputType = {
    id: number
    studentId: number
    classId: number
    points: number
    pointType: number
    description: number
    referenceId: number
    awardedBy: number
    createdAt: number
    _all: number
  }


  export type StudentPointAvgAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    points?: true
    referenceId?: true
    awardedBy?: true
  }

  export type StudentPointSumAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    points?: true
    referenceId?: true
    awardedBy?: true
  }

  export type StudentPointMinAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    points?: true
    pointType?: true
    description?: true
    referenceId?: true
    awardedBy?: true
    createdAt?: true
  }

  export type StudentPointMaxAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    points?: true
    pointType?: true
    description?: true
    referenceId?: true
    awardedBy?: true
    createdAt?: true
  }

  export type StudentPointCountAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    points?: true
    pointType?: true
    description?: true
    referenceId?: true
    awardedBy?: true
    createdAt?: true
    _all?: true
  }

  export type StudentPointAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentPoint to aggregate.
     */
    where?: StudentPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPoints to fetch.
     */
    orderBy?: StudentPointOrderByWithRelationInput | StudentPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentPoints
    **/
    _count?: true | StudentPointCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentPointAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentPointSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentPointMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentPointMaxAggregateInputType
  }

  export type GetStudentPointAggregateType<T extends StudentPointAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentPoint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentPoint[P]>
      : GetScalarType<T[P], AggregateStudentPoint[P]>
  }




  export type StudentPointGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPointWhereInput
    orderBy?: StudentPointOrderByWithAggregationInput | StudentPointOrderByWithAggregationInput[]
    by: StudentPointScalarFieldEnum[] | StudentPointScalarFieldEnum
    having?: StudentPointScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentPointCountAggregateInputType | true
    _avg?: StudentPointAvgAggregateInputType
    _sum?: StudentPointSumAggregateInputType
    _min?: StudentPointMinAggregateInputType
    _max?: StudentPointMaxAggregateInputType
  }

  export type StudentPointGroupByOutputType = {
    id: number
    studentId: number
    classId: number | null
    points: number
    pointType: string
    description: string | null
    referenceId: number | null
    awardedBy: number | null
    createdAt: Date
    _count: StudentPointCountAggregateOutputType | null
    _avg: StudentPointAvgAggregateOutputType | null
    _sum: StudentPointSumAggregateOutputType | null
    _min: StudentPointMinAggregateOutputType | null
    _max: StudentPointMaxAggregateOutputType | null
  }

  type GetStudentPointGroupByPayload<T extends StudentPointGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentPointGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentPointGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentPointGroupByOutputType[P]>
            : GetScalarType<T[P], StudentPointGroupByOutputType[P]>
        }
      >
    >


  export type StudentPointSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    points?: boolean
    pointType?: boolean
    description?: boolean
    referenceId?: boolean
    awardedBy?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | StudentPoint$classArgs<ExtArgs>
  }, ExtArgs["result"]["studentPoint"]>

  export type StudentPointSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    points?: boolean
    pointType?: boolean
    description?: boolean
    referenceId?: boolean
    awardedBy?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | StudentPoint$classArgs<ExtArgs>
  }, ExtArgs["result"]["studentPoint"]>

  export type StudentPointSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    points?: boolean
    pointType?: boolean
    description?: boolean
    referenceId?: boolean
    awardedBy?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | StudentPoint$classArgs<ExtArgs>
  }, ExtArgs["result"]["studentPoint"]>

  export type StudentPointSelectScalar = {
    id?: boolean
    studentId?: boolean
    classId?: boolean
    points?: boolean
    pointType?: boolean
    description?: boolean
    referenceId?: boolean
    awardedBy?: boolean
    createdAt?: boolean
  }

  export type StudentPointOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "classId" | "points" | "pointType" | "description" | "referenceId" | "awardedBy" | "createdAt", ExtArgs["result"]["studentPoint"]>
  export type StudentPointInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | StudentPoint$classArgs<ExtArgs>
  }
  export type StudentPointIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | StudentPoint$classArgs<ExtArgs>
  }
  export type StudentPointIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | StudentPoint$classArgs<ExtArgs>
  }

  export type $StudentPointPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentPoint"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      classId: number | null
      points: number
      pointType: string
      description: string | null
      referenceId: number | null
      awardedBy: number | null
      createdAt: Date
    }, ExtArgs["result"]["studentPoint"]>
    composites: {}
  }

  type StudentPointGetPayload<S extends boolean | null | undefined | StudentPointDefaultArgs> = $Result.GetResult<Prisma.$StudentPointPayload, S>

  type StudentPointCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentPointFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentPointCountAggregateInputType | true
    }

  export interface StudentPointDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentPoint'], meta: { name: 'StudentPoint' } }
    /**
     * Find zero or one StudentPoint that matches the filter.
     * @param {StudentPointFindUniqueArgs} args - Arguments to find a StudentPoint
     * @example
     * // Get one StudentPoint
     * const studentPoint = await prisma.studentPoint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentPointFindUniqueArgs>(args: SelectSubset<T, StudentPointFindUniqueArgs<ExtArgs>>): Prisma__StudentPointClient<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentPoint that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentPointFindUniqueOrThrowArgs} args - Arguments to find a StudentPoint
     * @example
     * // Get one StudentPoint
     * const studentPoint = await prisma.studentPoint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentPointFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentPointFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentPointClient<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentPoint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPointFindFirstArgs} args - Arguments to find a StudentPoint
     * @example
     * // Get one StudentPoint
     * const studentPoint = await prisma.studentPoint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentPointFindFirstArgs>(args?: SelectSubset<T, StudentPointFindFirstArgs<ExtArgs>>): Prisma__StudentPointClient<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentPoint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPointFindFirstOrThrowArgs} args - Arguments to find a StudentPoint
     * @example
     * // Get one StudentPoint
     * const studentPoint = await prisma.studentPoint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentPointFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentPointFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentPointClient<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentPoints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPointFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentPoints
     * const studentPoints = await prisma.studentPoint.findMany()
     * 
     * // Get first 10 StudentPoints
     * const studentPoints = await prisma.studentPoint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentPointWithIdOnly = await prisma.studentPoint.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentPointFindManyArgs>(args?: SelectSubset<T, StudentPointFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentPoint.
     * @param {StudentPointCreateArgs} args - Arguments to create a StudentPoint.
     * @example
     * // Create one StudentPoint
     * const StudentPoint = await prisma.studentPoint.create({
     *   data: {
     *     // ... data to create a StudentPoint
     *   }
     * })
     * 
     */
    create<T extends StudentPointCreateArgs>(args: SelectSubset<T, StudentPointCreateArgs<ExtArgs>>): Prisma__StudentPointClient<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentPoints.
     * @param {StudentPointCreateManyArgs} args - Arguments to create many StudentPoints.
     * @example
     * // Create many StudentPoints
     * const studentPoint = await prisma.studentPoint.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentPointCreateManyArgs>(args?: SelectSubset<T, StudentPointCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentPoints and returns the data saved in the database.
     * @param {StudentPointCreateManyAndReturnArgs} args - Arguments to create many StudentPoints.
     * @example
     * // Create many StudentPoints
     * const studentPoint = await prisma.studentPoint.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentPoints and only return the `id`
     * const studentPointWithIdOnly = await prisma.studentPoint.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentPointCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentPointCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentPoint.
     * @param {StudentPointDeleteArgs} args - Arguments to delete one StudentPoint.
     * @example
     * // Delete one StudentPoint
     * const StudentPoint = await prisma.studentPoint.delete({
     *   where: {
     *     // ... filter to delete one StudentPoint
     *   }
     * })
     * 
     */
    delete<T extends StudentPointDeleteArgs>(args: SelectSubset<T, StudentPointDeleteArgs<ExtArgs>>): Prisma__StudentPointClient<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentPoint.
     * @param {StudentPointUpdateArgs} args - Arguments to update one StudentPoint.
     * @example
     * // Update one StudentPoint
     * const studentPoint = await prisma.studentPoint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentPointUpdateArgs>(args: SelectSubset<T, StudentPointUpdateArgs<ExtArgs>>): Prisma__StudentPointClient<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentPoints.
     * @param {StudentPointDeleteManyArgs} args - Arguments to filter StudentPoints to delete.
     * @example
     * // Delete a few StudentPoints
     * const { count } = await prisma.studentPoint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentPointDeleteManyArgs>(args?: SelectSubset<T, StudentPointDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPointUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentPoints
     * const studentPoint = await prisma.studentPoint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentPointUpdateManyArgs>(args: SelectSubset<T, StudentPointUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentPoints and returns the data updated in the database.
     * @param {StudentPointUpdateManyAndReturnArgs} args - Arguments to update many StudentPoints.
     * @example
     * // Update many StudentPoints
     * const studentPoint = await prisma.studentPoint.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentPoints and only return the `id`
     * const studentPointWithIdOnly = await prisma.studentPoint.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentPointUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentPointUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentPoint.
     * @param {StudentPointUpsertArgs} args - Arguments to update or create a StudentPoint.
     * @example
     * // Update or create a StudentPoint
     * const studentPoint = await prisma.studentPoint.upsert({
     *   create: {
     *     // ... data to create a StudentPoint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentPoint we want to update
     *   }
     * })
     */
    upsert<T extends StudentPointUpsertArgs>(args: SelectSubset<T, StudentPointUpsertArgs<ExtArgs>>): Prisma__StudentPointClient<$Result.GetResult<Prisma.$StudentPointPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPointCountArgs} args - Arguments to filter StudentPoints to count.
     * @example
     * // Count the number of StudentPoints
     * const count = await prisma.studentPoint.count({
     *   where: {
     *     // ... the filter for the StudentPoints we want to count
     *   }
     * })
    **/
    count<T extends StudentPointCountArgs>(
      args?: Subset<T, StudentPointCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentPointCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentPoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPointAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentPointAggregateArgs>(args: Subset<T, StudentPointAggregateArgs>): Prisma.PrismaPromise<GetStudentPointAggregateType<T>>

    /**
     * Group by StudentPoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPointGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentPointGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentPointGroupByArgs['orderBy'] }
        : { orderBy?: StudentPointGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentPointGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentPointGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentPoint model
   */
  readonly fields: StudentPointFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentPoint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentPointClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends StudentPoint$classArgs<ExtArgs> = {}>(args?: Subset<T, StudentPoint$classArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentPoint model
   */
  interface StudentPointFieldRefs {
    readonly id: FieldRef<"StudentPoint", 'Int'>
    readonly studentId: FieldRef<"StudentPoint", 'Int'>
    readonly classId: FieldRef<"StudentPoint", 'Int'>
    readonly points: FieldRef<"StudentPoint", 'Int'>
    readonly pointType: FieldRef<"StudentPoint", 'String'>
    readonly description: FieldRef<"StudentPoint", 'String'>
    readonly referenceId: FieldRef<"StudentPoint", 'Int'>
    readonly awardedBy: FieldRef<"StudentPoint", 'Int'>
    readonly createdAt: FieldRef<"StudentPoint", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudentPoint findUnique
   */
  export type StudentPointFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
    /**
     * Filter, which StudentPoint to fetch.
     */
    where: StudentPointWhereUniqueInput
  }

  /**
   * StudentPoint findUniqueOrThrow
   */
  export type StudentPointFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
    /**
     * Filter, which StudentPoint to fetch.
     */
    where: StudentPointWhereUniqueInput
  }

  /**
   * StudentPoint findFirst
   */
  export type StudentPointFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
    /**
     * Filter, which StudentPoint to fetch.
     */
    where?: StudentPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPoints to fetch.
     */
    orderBy?: StudentPointOrderByWithRelationInput | StudentPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentPoints.
     */
    cursor?: StudentPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentPoints.
     */
    distinct?: StudentPointScalarFieldEnum | StudentPointScalarFieldEnum[]
  }

  /**
   * StudentPoint findFirstOrThrow
   */
  export type StudentPointFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
    /**
     * Filter, which StudentPoint to fetch.
     */
    where?: StudentPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPoints to fetch.
     */
    orderBy?: StudentPointOrderByWithRelationInput | StudentPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentPoints.
     */
    cursor?: StudentPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentPoints.
     */
    distinct?: StudentPointScalarFieldEnum | StudentPointScalarFieldEnum[]
  }

  /**
   * StudentPoint findMany
   */
  export type StudentPointFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
    /**
     * Filter, which StudentPoints to fetch.
     */
    where?: StudentPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPoints to fetch.
     */
    orderBy?: StudentPointOrderByWithRelationInput | StudentPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentPoints.
     */
    cursor?: StudentPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPoints.
     */
    skip?: number
    distinct?: StudentPointScalarFieldEnum | StudentPointScalarFieldEnum[]
  }

  /**
   * StudentPoint create
   */
  export type StudentPointCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentPoint.
     */
    data: XOR<StudentPointCreateInput, StudentPointUncheckedCreateInput>
  }

  /**
   * StudentPoint createMany
   */
  export type StudentPointCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentPoints.
     */
    data: StudentPointCreateManyInput | StudentPointCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentPoint createManyAndReturn
   */
  export type StudentPointCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * The data used to create many StudentPoints.
     */
    data: StudentPointCreateManyInput | StudentPointCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentPoint update
   */
  export type StudentPointUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentPoint.
     */
    data: XOR<StudentPointUpdateInput, StudentPointUncheckedUpdateInput>
    /**
     * Choose, which StudentPoint to update.
     */
    where: StudentPointWhereUniqueInput
  }

  /**
   * StudentPoint updateMany
   */
  export type StudentPointUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentPoints.
     */
    data: XOR<StudentPointUpdateManyMutationInput, StudentPointUncheckedUpdateManyInput>
    /**
     * Filter which StudentPoints to update
     */
    where?: StudentPointWhereInput
    /**
     * Limit how many StudentPoints to update.
     */
    limit?: number
  }

  /**
   * StudentPoint updateManyAndReturn
   */
  export type StudentPointUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * The data used to update StudentPoints.
     */
    data: XOR<StudentPointUpdateManyMutationInput, StudentPointUncheckedUpdateManyInput>
    /**
     * Filter which StudentPoints to update
     */
    where?: StudentPointWhereInput
    /**
     * Limit how many StudentPoints to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentPoint upsert
   */
  export type StudentPointUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentPoint to update in case it exists.
     */
    where: StudentPointWhereUniqueInput
    /**
     * In case the StudentPoint found by the `where` argument doesn't exist, create a new StudentPoint with this data.
     */
    create: XOR<StudentPointCreateInput, StudentPointUncheckedCreateInput>
    /**
     * In case the StudentPoint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentPointUpdateInput, StudentPointUncheckedUpdateInput>
  }

  /**
   * StudentPoint delete
   */
  export type StudentPointDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
    /**
     * Filter which StudentPoint to delete.
     */
    where: StudentPointWhereUniqueInput
  }

  /**
   * StudentPoint deleteMany
   */
  export type StudentPointDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentPoints to delete
     */
    where?: StudentPointWhereInput
    /**
     * Limit how many StudentPoints to delete.
     */
    limit?: number
  }

  /**
   * StudentPoint.class
   */
  export type StudentPoint$classArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * StudentPoint without action
   */
  export type StudentPointDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPoint
     */
    select?: StudentPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentPoint
     */
    omit?: StudentPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPointInclude<ExtArgs> | null
  }


  /**
   * Model Achievement
   */

  export type AggregateAchievement = {
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  export type AchievementAvgAggregateOutputType = {
    id: number | null
    pointsReward: number | null
    requirementValue: number | null
    requirementPeriod: number | null
  }

  export type AchievementSumAggregateOutputType = {
    id: number | null
    pointsReward: number | null
    requirementValue: number | null
    requirementPeriod: number | null
  }

  export type AchievementMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    category: string | null
    icon: string | null
    pointsReward: number | null
    requirementType: string | null
    requirementValue: number | null
    requirementPeriod: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type AchievementMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    category: string | null
    icon: string | null
    pointsReward: number | null
    requirementType: string | null
    requirementValue: number | null
    requirementPeriod: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type AchievementCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    icon: number
    pointsReward: number
    requirementType: number
    requirementValue: number
    requirementPeriod: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type AchievementAvgAggregateInputType = {
    id?: true
    pointsReward?: true
    requirementValue?: true
    requirementPeriod?: true
  }

  export type AchievementSumAggregateInputType = {
    id?: true
    pointsReward?: true
    requirementValue?: true
    requirementPeriod?: true
  }

  export type AchievementMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    icon?: true
    pointsReward?: true
    requirementType?: true
    requirementValue?: true
    requirementPeriod?: true
    isActive?: true
    createdAt?: true
  }

  export type AchievementMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    icon?: true
    pointsReward?: true
    requirementType?: true
    requirementValue?: true
    requirementPeriod?: true
    isActive?: true
    createdAt?: true
  }

  export type AchievementCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    icon?: true
    pointsReward?: true
    requirementType?: true
    requirementValue?: true
    requirementPeriod?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type AchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievement to aggregate.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achievements
    **/
    _count?: true | AchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AchievementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AchievementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievementMaxAggregateInputType
  }

  export type GetAchievementAggregateType<T extends AchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievement[P]>
      : GetScalarType<T[P], AggregateAchievement[P]>
  }




  export type AchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithAggregationInput | AchievementOrderByWithAggregationInput[]
    by: AchievementScalarFieldEnum[] | AchievementScalarFieldEnum
    having?: AchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievementCountAggregateInputType | true
    _avg?: AchievementAvgAggregateInputType
    _sum?: AchievementSumAggregateInputType
    _min?: AchievementMinAggregateInputType
    _max?: AchievementMaxAggregateInputType
  }

  export type AchievementGroupByOutputType = {
    id: number
    name: string
    description: string | null
    category: string
    icon: string | null
    pointsReward: number
    requirementType: string | null
    requirementValue: number | null
    requirementPeriod: number | null
    isActive: boolean
    createdAt: Date
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  type GetAchievementGroupByPayload<T extends AchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievementGroupByOutputType[P]>
            : GetScalarType<T[P], AchievementGroupByOutputType[P]>
        }
      >
    >


  export type AchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    icon?: boolean
    pointsReward?: boolean
    requirementType?: boolean
    requirementValue?: boolean
    requirementPeriod?: boolean
    isActive?: boolean
    createdAt?: boolean
    studentAchievements?: boolean | Achievement$studentAchievementsArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    icon?: boolean
    pointsReward?: boolean
    requirementType?: boolean
    requirementValue?: boolean
    requirementPeriod?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    icon?: boolean
    pointsReward?: boolean
    requirementType?: boolean
    requirementValue?: boolean
    requirementPeriod?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    icon?: boolean
    pointsReward?: boolean
    requirementType?: boolean
    requirementValue?: boolean
    requirementPeriod?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type AchievementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "category" | "icon" | "pointsReward" | "requirementType" | "requirementValue" | "requirementPeriod" | "isActive" | "createdAt", ExtArgs["result"]["achievement"]>
  export type AchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentAchievements?: boolean | Achievement$studentAchievementsArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AchievementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Achievement"
    objects: {
      studentAchievements: Prisma.$StudentAchievementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      category: string
      icon: string | null
      pointsReward: number
      requirementType: string | null
      requirementValue: number | null
      requirementPeriod: number | null
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["achievement"]>
    composites: {}
  }

  type AchievementGetPayload<S extends boolean | null | undefined | AchievementDefaultArgs> = $Result.GetResult<Prisma.$AchievementPayload, S>

  type AchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AchievementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AchievementCountAggregateInputType | true
    }

  export interface AchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Achievement'], meta: { name: 'Achievement' } }
    /**
     * Find zero or one Achievement that matches the filter.
     * @param {AchievementFindUniqueArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AchievementFindUniqueArgs>(args: SelectSubset<T, AchievementFindUniqueArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Achievement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AchievementFindUniqueOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, AchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Achievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AchievementFindFirstArgs>(args?: SelectSubset<T, AchievementFindFirstArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Achievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, AchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Achievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achievements
     * const achievements = await prisma.achievement.findMany()
     * 
     * // Get first 10 Achievements
     * const achievements = await prisma.achievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const achievementWithIdOnly = await prisma.achievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AchievementFindManyArgs>(args?: SelectSubset<T, AchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Achievement.
     * @param {AchievementCreateArgs} args - Arguments to create a Achievement.
     * @example
     * // Create one Achievement
     * const Achievement = await prisma.achievement.create({
     *   data: {
     *     // ... data to create a Achievement
     *   }
     * })
     * 
     */
    create<T extends AchievementCreateArgs>(args: SelectSubset<T, AchievementCreateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Achievements.
     * @param {AchievementCreateManyArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AchievementCreateManyArgs>(args?: SelectSubset<T, AchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Achievements and returns the data saved in the database.
     * @param {AchievementCreateManyAndReturnArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Achievements and only return the `id`
     * const achievementWithIdOnly = await prisma.achievement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, AchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Achievement.
     * @param {AchievementDeleteArgs} args - Arguments to delete one Achievement.
     * @example
     * // Delete one Achievement
     * const Achievement = await prisma.achievement.delete({
     *   where: {
     *     // ... filter to delete one Achievement
     *   }
     * })
     * 
     */
    delete<T extends AchievementDeleteArgs>(args: SelectSubset<T, AchievementDeleteArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Achievement.
     * @param {AchievementUpdateArgs} args - Arguments to update one Achievement.
     * @example
     * // Update one Achievement
     * const achievement = await prisma.achievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AchievementUpdateArgs>(args: SelectSubset<T, AchievementUpdateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Achievements.
     * @param {AchievementDeleteManyArgs} args - Arguments to filter Achievements to delete.
     * @example
     * // Delete a few Achievements
     * const { count } = await prisma.achievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AchievementDeleteManyArgs>(args?: SelectSubset<T, AchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AchievementUpdateManyArgs>(args: SelectSubset<T, AchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements and returns the data updated in the database.
     * @param {AchievementUpdateManyAndReturnArgs} args - Arguments to update many Achievements.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Achievements and only return the `id`
     * const achievementWithIdOnly = await prisma.achievement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AchievementUpdateManyAndReturnArgs>(args: SelectSubset<T, AchievementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Achievement.
     * @param {AchievementUpsertArgs} args - Arguments to update or create a Achievement.
     * @example
     * // Update or create a Achievement
     * const achievement = await prisma.achievement.upsert({
     *   create: {
     *     // ... data to create a Achievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achievement we want to update
     *   }
     * })
     */
    upsert<T extends AchievementUpsertArgs>(args: SelectSubset<T, AchievementUpsertArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementCountArgs} args - Arguments to filter Achievements to count.
     * @example
     * // Count the number of Achievements
     * const count = await prisma.achievement.count({
     *   where: {
     *     // ... the filter for the Achievements we want to count
     *   }
     * })
    **/
    count<T extends AchievementCountArgs>(
      args?: Subset<T, AchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievementAggregateArgs>(args: Subset<T, AchievementAggregateArgs>): Prisma.PrismaPromise<GetAchievementAggregateType<T>>

    /**
     * Group by Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievementGroupByArgs['orderBy'] }
        : { orderBy?: AchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Achievement model
   */
  readonly fields: AchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Achievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    studentAchievements<T extends Achievement$studentAchievementsArgs<ExtArgs> = {}>(args?: Subset<T, Achievement$studentAchievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Achievement model
   */
  interface AchievementFieldRefs {
    readonly id: FieldRef<"Achievement", 'Int'>
    readonly name: FieldRef<"Achievement", 'String'>
    readonly description: FieldRef<"Achievement", 'String'>
    readonly category: FieldRef<"Achievement", 'String'>
    readonly icon: FieldRef<"Achievement", 'String'>
    readonly pointsReward: FieldRef<"Achievement", 'Int'>
    readonly requirementType: FieldRef<"Achievement", 'String'>
    readonly requirementValue: FieldRef<"Achievement", 'Int'>
    readonly requirementPeriod: FieldRef<"Achievement", 'Int'>
    readonly isActive: FieldRef<"Achievement", 'Boolean'>
    readonly createdAt: FieldRef<"Achievement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Achievement findUnique
   */
  export type AchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findUniqueOrThrow
   */
  export type AchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findFirst
   */
  export type AchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findFirstOrThrow
   */
  export type AchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findMany
   */
  export type AchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievements to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement create
   */
  export type AchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a Achievement.
     */
    data: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
  }

  /**
   * Achievement createMany
   */
  export type AchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement createManyAndReturn
   */
  export type AchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement update
   */
  export type AchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a Achievement.
     */
    data: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
    /**
     * Choose, which Achievement to update.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement updateMany
   */
  export type AchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to update.
     */
    limit?: number
  }

  /**
   * Achievement updateManyAndReturn
   */
  export type AchievementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to update.
     */
    limit?: number
  }

  /**
   * Achievement upsert
   */
  export type AchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the Achievement to update in case it exists.
     */
    where: AchievementWhereUniqueInput
    /**
     * In case the Achievement found by the `where` argument doesn't exist, create a new Achievement with this data.
     */
    create: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
    /**
     * In case the Achievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
  }

  /**
   * Achievement delete
   */
  export type AchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter which Achievement to delete.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement deleteMany
   */
  export type AchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievements to delete
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to delete.
     */
    limit?: number
  }

  /**
   * Achievement.studentAchievements
   */
  export type Achievement$studentAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
    where?: StudentAchievementWhereInput
    orderBy?: StudentAchievementOrderByWithRelationInput | StudentAchievementOrderByWithRelationInput[]
    cursor?: StudentAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentAchievementScalarFieldEnum | StudentAchievementScalarFieldEnum[]
  }

  /**
   * Achievement without action
   */
  export type AchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
  }


  /**
   * Model StudentAchievement
   */

  export type AggregateStudentAchievement = {
    _count: StudentAchievementCountAggregateOutputType | null
    _avg: StudentAchievementAvgAggregateOutputType | null
    _sum: StudentAchievementSumAggregateOutputType | null
    _min: StudentAchievementMinAggregateOutputType | null
    _max: StudentAchievementMaxAggregateOutputType | null
  }

  export type StudentAchievementAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    achievementId: number | null
    progress: number | null
  }

  export type StudentAchievementSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    achievementId: number | null
    progress: number | null
  }

  export type StudentAchievementMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    achievementId: number | null
    progress: number | null
    isEarned: boolean | null
    earnedAt: Date | null
    createdAt: Date | null
  }

  export type StudentAchievementMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    achievementId: number | null
    progress: number | null
    isEarned: boolean | null
    earnedAt: Date | null
    createdAt: Date | null
  }

  export type StudentAchievementCountAggregateOutputType = {
    id: number
    studentId: number
    achievementId: number
    progress: number
    isEarned: number
    earnedAt: number
    createdAt: number
    _all: number
  }


  export type StudentAchievementAvgAggregateInputType = {
    id?: true
    studentId?: true
    achievementId?: true
    progress?: true
  }

  export type StudentAchievementSumAggregateInputType = {
    id?: true
    studentId?: true
    achievementId?: true
    progress?: true
  }

  export type StudentAchievementMinAggregateInputType = {
    id?: true
    studentId?: true
    achievementId?: true
    progress?: true
    isEarned?: true
    earnedAt?: true
    createdAt?: true
  }

  export type StudentAchievementMaxAggregateInputType = {
    id?: true
    studentId?: true
    achievementId?: true
    progress?: true
    isEarned?: true
    earnedAt?: true
    createdAt?: true
  }

  export type StudentAchievementCountAggregateInputType = {
    id?: true
    studentId?: true
    achievementId?: true
    progress?: true
    isEarned?: true
    earnedAt?: true
    createdAt?: true
    _all?: true
  }

  export type StudentAchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentAchievement to aggregate.
     */
    where?: StudentAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAchievements to fetch.
     */
    orderBy?: StudentAchievementOrderByWithRelationInput | StudentAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentAchievements
    **/
    _count?: true | StudentAchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAchievementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentAchievementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentAchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentAchievementMaxAggregateInputType
  }

  export type GetStudentAchievementAggregateType<T extends StudentAchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentAchievement[P]>
      : GetScalarType<T[P], AggregateStudentAchievement[P]>
  }




  export type StudentAchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAchievementWhereInput
    orderBy?: StudentAchievementOrderByWithAggregationInput | StudentAchievementOrderByWithAggregationInput[]
    by: StudentAchievementScalarFieldEnum[] | StudentAchievementScalarFieldEnum
    having?: StudentAchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentAchievementCountAggregateInputType | true
    _avg?: StudentAchievementAvgAggregateInputType
    _sum?: StudentAchievementSumAggregateInputType
    _min?: StudentAchievementMinAggregateInputType
    _max?: StudentAchievementMaxAggregateInputType
  }

  export type StudentAchievementGroupByOutputType = {
    id: number
    studentId: number
    achievementId: number
    progress: number
    isEarned: boolean
    earnedAt: Date | null
    createdAt: Date
    _count: StudentAchievementCountAggregateOutputType | null
    _avg: StudentAchievementAvgAggregateOutputType | null
    _sum: StudentAchievementSumAggregateOutputType | null
    _min: StudentAchievementMinAggregateOutputType | null
    _max: StudentAchievementMaxAggregateOutputType | null
  }

  type GetStudentAchievementGroupByPayload<T extends StudentAchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentAchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentAchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentAchievementGroupByOutputType[P]>
            : GetScalarType<T[P], StudentAchievementGroupByOutputType[P]>
        }
      >
    >


  export type StudentAchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    achievementId?: boolean
    progress?: boolean
    isEarned?: boolean
    earnedAt?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentAchievement"]>

  export type StudentAchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    achievementId?: boolean
    progress?: boolean
    isEarned?: boolean
    earnedAt?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentAchievement"]>

  export type StudentAchievementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    achievementId?: boolean
    progress?: boolean
    isEarned?: boolean
    earnedAt?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentAchievement"]>

  export type StudentAchievementSelectScalar = {
    id?: boolean
    studentId?: boolean
    achievementId?: boolean
    progress?: boolean
    isEarned?: boolean
    earnedAt?: boolean
    createdAt?: boolean
  }

  export type StudentAchievementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "achievementId" | "progress" | "isEarned" | "earnedAt" | "createdAt", ExtArgs["result"]["studentAchievement"]>
  export type StudentAchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }
  export type StudentAchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }
  export type StudentAchievementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }

  export type $StudentAchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentAchievement"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      achievement: Prisma.$AchievementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      achievementId: number
      progress: number
      isEarned: boolean
      earnedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["studentAchievement"]>
    composites: {}
  }

  type StudentAchievementGetPayload<S extends boolean | null | undefined | StudentAchievementDefaultArgs> = $Result.GetResult<Prisma.$StudentAchievementPayload, S>

  type StudentAchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentAchievementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentAchievementCountAggregateInputType | true
    }

  export interface StudentAchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentAchievement'], meta: { name: 'StudentAchievement' } }
    /**
     * Find zero or one StudentAchievement that matches the filter.
     * @param {StudentAchievementFindUniqueArgs} args - Arguments to find a StudentAchievement
     * @example
     * // Get one StudentAchievement
     * const studentAchievement = await prisma.studentAchievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentAchievementFindUniqueArgs>(args: SelectSubset<T, StudentAchievementFindUniqueArgs<ExtArgs>>): Prisma__StudentAchievementClient<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentAchievement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentAchievementFindUniqueOrThrowArgs} args - Arguments to find a StudentAchievement
     * @example
     * // Get one StudentAchievement
     * const studentAchievement = await prisma.studentAchievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentAchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentAchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentAchievementClient<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentAchievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAchievementFindFirstArgs} args - Arguments to find a StudentAchievement
     * @example
     * // Get one StudentAchievement
     * const studentAchievement = await prisma.studentAchievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentAchievementFindFirstArgs>(args?: SelectSubset<T, StudentAchievementFindFirstArgs<ExtArgs>>): Prisma__StudentAchievementClient<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentAchievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAchievementFindFirstOrThrowArgs} args - Arguments to find a StudentAchievement
     * @example
     * // Get one StudentAchievement
     * const studentAchievement = await prisma.studentAchievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentAchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentAchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentAchievementClient<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentAchievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentAchievements
     * const studentAchievements = await prisma.studentAchievement.findMany()
     * 
     * // Get first 10 StudentAchievements
     * const studentAchievements = await prisma.studentAchievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentAchievementWithIdOnly = await prisma.studentAchievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentAchievementFindManyArgs>(args?: SelectSubset<T, StudentAchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentAchievement.
     * @param {StudentAchievementCreateArgs} args - Arguments to create a StudentAchievement.
     * @example
     * // Create one StudentAchievement
     * const StudentAchievement = await prisma.studentAchievement.create({
     *   data: {
     *     // ... data to create a StudentAchievement
     *   }
     * })
     * 
     */
    create<T extends StudentAchievementCreateArgs>(args: SelectSubset<T, StudentAchievementCreateArgs<ExtArgs>>): Prisma__StudentAchievementClient<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentAchievements.
     * @param {StudentAchievementCreateManyArgs} args - Arguments to create many StudentAchievements.
     * @example
     * // Create many StudentAchievements
     * const studentAchievement = await prisma.studentAchievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentAchievementCreateManyArgs>(args?: SelectSubset<T, StudentAchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentAchievements and returns the data saved in the database.
     * @param {StudentAchievementCreateManyAndReturnArgs} args - Arguments to create many StudentAchievements.
     * @example
     * // Create many StudentAchievements
     * const studentAchievement = await prisma.studentAchievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentAchievements and only return the `id`
     * const studentAchievementWithIdOnly = await prisma.studentAchievement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentAchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentAchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentAchievement.
     * @param {StudentAchievementDeleteArgs} args - Arguments to delete one StudentAchievement.
     * @example
     * // Delete one StudentAchievement
     * const StudentAchievement = await prisma.studentAchievement.delete({
     *   where: {
     *     // ... filter to delete one StudentAchievement
     *   }
     * })
     * 
     */
    delete<T extends StudentAchievementDeleteArgs>(args: SelectSubset<T, StudentAchievementDeleteArgs<ExtArgs>>): Prisma__StudentAchievementClient<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentAchievement.
     * @param {StudentAchievementUpdateArgs} args - Arguments to update one StudentAchievement.
     * @example
     * // Update one StudentAchievement
     * const studentAchievement = await prisma.studentAchievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentAchievementUpdateArgs>(args: SelectSubset<T, StudentAchievementUpdateArgs<ExtArgs>>): Prisma__StudentAchievementClient<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentAchievements.
     * @param {StudentAchievementDeleteManyArgs} args - Arguments to filter StudentAchievements to delete.
     * @example
     * // Delete a few StudentAchievements
     * const { count } = await prisma.studentAchievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentAchievementDeleteManyArgs>(args?: SelectSubset<T, StudentAchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentAchievements
     * const studentAchievement = await prisma.studentAchievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentAchievementUpdateManyArgs>(args: SelectSubset<T, StudentAchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentAchievements and returns the data updated in the database.
     * @param {StudentAchievementUpdateManyAndReturnArgs} args - Arguments to update many StudentAchievements.
     * @example
     * // Update many StudentAchievements
     * const studentAchievement = await prisma.studentAchievement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentAchievements and only return the `id`
     * const studentAchievementWithIdOnly = await prisma.studentAchievement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentAchievementUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentAchievementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentAchievement.
     * @param {StudentAchievementUpsertArgs} args - Arguments to update or create a StudentAchievement.
     * @example
     * // Update or create a StudentAchievement
     * const studentAchievement = await prisma.studentAchievement.upsert({
     *   create: {
     *     // ... data to create a StudentAchievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentAchievement we want to update
     *   }
     * })
     */
    upsert<T extends StudentAchievementUpsertArgs>(args: SelectSubset<T, StudentAchievementUpsertArgs<ExtArgs>>): Prisma__StudentAchievementClient<$Result.GetResult<Prisma.$StudentAchievementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAchievementCountArgs} args - Arguments to filter StudentAchievements to count.
     * @example
     * // Count the number of StudentAchievements
     * const count = await prisma.studentAchievement.count({
     *   where: {
     *     // ... the filter for the StudentAchievements we want to count
     *   }
     * })
    **/
    count<T extends StudentAchievementCountArgs>(
      args?: Subset<T, StudentAchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentAchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAchievementAggregateArgs>(args: Subset<T, StudentAchievementAggregateArgs>): Prisma.PrismaPromise<GetStudentAchievementAggregateType<T>>

    /**
     * Group by StudentAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentAchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentAchievementGroupByArgs['orderBy'] }
        : { orderBy?: StudentAchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentAchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentAchievement model
   */
  readonly fields: StudentAchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentAchievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentAchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    achievement<T extends AchievementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AchievementDefaultArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentAchievement model
   */
  interface StudentAchievementFieldRefs {
    readonly id: FieldRef<"StudentAchievement", 'Int'>
    readonly studentId: FieldRef<"StudentAchievement", 'Int'>
    readonly achievementId: FieldRef<"StudentAchievement", 'Int'>
    readonly progress: FieldRef<"StudentAchievement", 'Int'>
    readonly isEarned: FieldRef<"StudentAchievement", 'Boolean'>
    readonly earnedAt: FieldRef<"StudentAchievement", 'DateTime'>
    readonly createdAt: FieldRef<"StudentAchievement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudentAchievement findUnique
   */
  export type StudentAchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
    /**
     * Filter, which StudentAchievement to fetch.
     */
    where: StudentAchievementWhereUniqueInput
  }

  /**
   * StudentAchievement findUniqueOrThrow
   */
  export type StudentAchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
    /**
     * Filter, which StudentAchievement to fetch.
     */
    where: StudentAchievementWhereUniqueInput
  }

  /**
   * StudentAchievement findFirst
   */
  export type StudentAchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
    /**
     * Filter, which StudentAchievement to fetch.
     */
    where?: StudentAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAchievements to fetch.
     */
    orderBy?: StudentAchievementOrderByWithRelationInput | StudentAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentAchievements.
     */
    cursor?: StudentAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentAchievements.
     */
    distinct?: StudentAchievementScalarFieldEnum | StudentAchievementScalarFieldEnum[]
  }

  /**
   * StudentAchievement findFirstOrThrow
   */
  export type StudentAchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
    /**
     * Filter, which StudentAchievement to fetch.
     */
    where?: StudentAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAchievements to fetch.
     */
    orderBy?: StudentAchievementOrderByWithRelationInput | StudentAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentAchievements.
     */
    cursor?: StudentAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentAchievements.
     */
    distinct?: StudentAchievementScalarFieldEnum | StudentAchievementScalarFieldEnum[]
  }

  /**
   * StudentAchievement findMany
   */
  export type StudentAchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
    /**
     * Filter, which StudentAchievements to fetch.
     */
    where?: StudentAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAchievements to fetch.
     */
    orderBy?: StudentAchievementOrderByWithRelationInput | StudentAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentAchievements.
     */
    cursor?: StudentAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAchievements.
     */
    skip?: number
    distinct?: StudentAchievementScalarFieldEnum | StudentAchievementScalarFieldEnum[]
  }

  /**
   * StudentAchievement create
   */
  export type StudentAchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentAchievement.
     */
    data: XOR<StudentAchievementCreateInput, StudentAchievementUncheckedCreateInput>
  }

  /**
   * StudentAchievement createMany
   */
  export type StudentAchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentAchievements.
     */
    data: StudentAchievementCreateManyInput | StudentAchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentAchievement createManyAndReturn
   */
  export type StudentAchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * The data used to create many StudentAchievements.
     */
    data: StudentAchievementCreateManyInput | StudentAchievementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentAchievement update
   */
  export type StudentAchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentAchievement.
     */
    data: XOR<StudentAchievementUpdateInput, StudentAchievementUncheckedUpdateInput>
    /**
     * Choose, which StudentAchievement to update.
     */
    where: StudentAchievementWhereUniqueInput
  }

  /**
   * StudentAchievement updateMany
   */
  export type StudentAchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentAchievements.
     */
    data: XOR<StudentAchievementUpdateManyMutationInput, StudentAchievementUncheckedUpdateManyInput>
    /**
     * Filter which StudentAchievements to update
     */
    where?: StudentAchievementWhereInput
    /**
     * Limit how many StudentAchievements to update.
     */
    limit?: number
  }

  /**
   * StudentAchievement updateManyAndReturn
   */
  export type StudentAchievementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * The data used to update StudentAchievements.
     */
    data: XOR<StudentAchievementUpdateManyMutationInput, StudentAchievementUncheckedUpdateManyInput>
    /**
     * Filter which StudentAchievements to update
     */
    where?: StudentAchievementWhereInput
    /**
     * Limit how many StudentAchievements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentAchievement upsert
   */
  export type StudentAchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentAchievement to update in case it exists.
     */
    where: StudentAchievementWhereUniqueInput
    /**
     * In case the StudentAchievement found by the `where` argument doesn't exist, create a new StudentAchievement with this data.
     */
    create: XOR<StudentAchievementCreateInput, StudentAchievementUncheckedCreateInput>
    /**
     * In case the StudentAchievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentAchievementUpdateInput, StudentAchievementUncheckedUpdateInput>
  }

  /**
   * StudentAchievement delete
   */
  export type StudentAchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
    /**
     * Filter which StudentAchievement to delete.
     */
    where: StudentAchievementWhereUniqueInput
  }

  /**
   * StudentAchievement deleteMany
   */
  export type StudentAchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentAchievements to delete
     */
    where?: StudentAchievementWhereInput
    /**
     * Limit how many StudentAchievements to delete.
     */
    limit?: number
  }

  /**
   * StudentAchievement without action
   */
  export type StudentAchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAchievement
     */
    select?: StudentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAchievement
     */
    omit?: StudentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAchievementInclude<ExtArgs> | null
  }


  /**
   * Model StudentStreak
   */

  export type AggregateStudentStreak = {
    _count: StudentStreakCountAggregateOutputType | null
    _avg: StudentStreakAvgAggregateOutputType | null
    _sum: StudentStreakSumAggregateOutputType | null
    _min: StudentStreakMinAggregateOutputType | null
    _max: StudentStreakMaxAggregateOutputType | null
  }

  export type StudentStreakAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    currentStreak: number | null
    longestStreak: number | null
  }

  export type StudentStreakSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    currentStreak: number | null
    longestStreak: number | null
  }

  export type StudentStreakMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    currentStreak: number | null
    longestStreak: number | null
    lastAttendanceDate: Date | null
    streakStartDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentStreakMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    currentStreak: number | null
    longestStreak: number | null
    lastAttendanceDate: Date | null
    streakStartDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentStreakCountAggregateOutputType = {
    id: number
    studentId: number
    classId: number
    currentStreak: number
    longestStreak: number
    lastAttendanceDate: number
    streakStartDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StudentStreakAvgAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    currentStreak?: true
    longestStreak?: true
  }

  export type StudentStreakSumAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    currentStreak?: true
    longestStreak?: true
  }

  export type StudentStreakMinAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    currentStreak?: true
    longestStreak?: true
    lastAttendanceDate?: true
    streakStartDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentStreakMaxAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    currentStreak?: true
    longestStreak?: true
    lastAttendanceDate?: true
    streakStartDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentStreakCountAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    currentStreak?: true
    longestStreak?: true
    lastAttendanceDate?: true
    streakStartDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StudentStreakAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentStreak to aggregate.
     */
    where?: StudentStreakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentStreaks to fetch.
     */
    orderBy?: StudentStreakOrderByWithRelationInput | StudentStreakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentStreakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentStreaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentStreaks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentStreaks
    **/
    _count?: true | StudentStreakCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentStreakAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentStreakSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentStreakMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentStreakMaxAggregateInputType
  }

  export type GetStudentStreakAggregateType<T extends StudentStreakAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentStreak]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentStreak[P]>
      : GetScalarType<T[P], AggregateStudentStreak[P]>
  }




  export type StudentStreakGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentStreakWhereInput
    orderBy?: StudentStreakOrderByWithAggregationInput | StudentStreakOrderByWithAggregationInput[]
    by: StudentStreakScalarFieldEnum[] | StudentStreakScalarFieldEnum
    having?: StudentStreakScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentStreakCountAggregateInputType | true
    _avg?: StudentStreakAvgAggregateInputType
    _sum?: StudentStreakSumAggregateInputType
    _min?: StudentStreakMinAggregateInputType
    _max?: StudentStreakMaxAggregateInputType
  }

  export type StudentStreakGroupByOutputType = {
    id: number
    studentId: number
    classId: number
    currentStreak: number
    longestStreak: number
    lastAttendanceDate: Date | null
    streakStartDate: Date | null
    createdAt: Date
    updatedAt: Date
    _count: StudentStreakCountAggregateOutputType | null
    _avg: StudentStreakAvgAggregateOutputType | null
    _sum: StudentStreakSumAggregateOutputType | null
    _min: StudentStreakMinAggregateOutputType | null
    _max: StudentStreakMaxAggregateOutputType | null
  }

  type GetStudentStreakGroupByPayload<T extends StudentStreakGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentStreakGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentStreakGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentStreakGroupByOutputType[P]>
            : GetScalarType<T[P], StudentStreakGroupByOutputType[P]>
        }
      >
    >


  export type StudentStreakSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    currentStreak?: boolean
    longestStreak?: boolean
    lastAttendanceDate?: boolean
    streakStartDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentStreak"]>

  export type StudentStreakSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    currentStreak?: boolean
    longestStreak?: boolean
    lastAttendanceDate?: boolean
    streakStartDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentStreak"]>

  export type StudentStreakSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    currentStreak?: boolean
    longestStreak?: boolean
    lastAttendanceDate?: boolean
    streakStartDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentStreak"]>

  export type StudentStreakSelectScalar = {
    id?: boolean
    studentId?: boolean
    classId?: boolean
    currentStreak?: boolean
    longestStreak?: boolean
    lastAttendanceDate?: boolean
    streakStartDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StudentStreakOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "classId" | "currentStreak" | "longestStreak" | "lastAttendanceDate" | "streakStartDate" | "createdAt" | "updatedAt", ExtArgs["result"]["studentStreak"]>
  export type StudentStreakInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type StudentStreakIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type StudentStreakIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $StudentStreakPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentStreak"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      classId: number
      currentStreak: number
      longestStreak: number
      lastAttendanceDate: Date | null
      streakStartDate: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["studentStreak"]>
    composites: {}
  }

  type StudentStreakGetPayload<S extends boolean | null | undefined | StudentStreakDefaultArgs> = $Result.GetResult<Prisma.$StudentStreakPayload, S>

  type StudentStreakCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentStreakFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentStreakCountAggregateInputType | true
    }

  export interface StudentStreakDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentStreak'], meta: { name: 'StudentStreak' } }
    /**
     * Find zero or one StudentStreak that matches the filter.
     * @param {StudentStreakFindUniqueArgs} args - Arguments to find a StudentStreak
     * @example
     * // Get one StudentStreak
     * const studentStreak = await prisma.studentStreak.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentStreakFindUniqueArgs>(args: SelectSubset<T, StudentStreakFindUniqueArgs<ExtArgs>>): Prisma__StudentStreakClient<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentStreak that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentStreakFindUniqueOrThrowArgs} args - Arguments to find a StudentStreak
     * @example
     * // Get one StudentStreak
     * const studentStreak = await prisma.studentStreak.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentStreakFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentStreakFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentStreakClient<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentStreak that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentStreakFindFirstArgs} args - Arguments to find a StudentStreak
     * @example
     * // Get one StudentStreak
     * const studentStreak = await prisma.studentStreak.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentStreakFindFirstArgs>(args?: SelectSubset<T, StudentStreakFindFirstArgs<ExtArgs>>): Prisma__StudentStreakClient<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentStreak that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentStreakFindFirstOrThrowArgs} args - Arguments to find a StudentStreak
     * @example
     * // Get one StudentStreak
     * const studentStreak = await prisma.studentStreak.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentStreakFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentStreakFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentStreakClient<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentStreaks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentStreakFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentStreaks
     * const studentStreaks = await prisma.studentStreak.findMany()
     * 
     * // Get first 10 StudentStreaks
     * const studentStreaks = await prisma.studentStreak.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentStreakWithIdOnly = await prisma.studentStreak.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentStreakFindManyArgs>(args?: SelectSubset<T, StudentStreakFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentStreak.
     * @param {StudentStreakCreateArgs} args - Arguments to create a StudentStreak.
     * @example
     * // Create one StudentStreak
     * const StudentStreak = await prisma.studentStreak.create({
     *   data: {
     *     // ... data to create a StudentStreak
     *   }
     * })
     * 
     */
    create<T extends StudentStreakCreateArgs>(args: SelectSubset<T, StudentStreakCreateArgs<ExtArgs>>): Prisma__StudentStreakClient<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentStreaks.
     * @param {StudentStreakCreateManyArgs} args - Arguments to create many StudentStreaks.
     * @example
     * // Create many StudentStreaks
     * const studentStreak = await prisma.studentStreak.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentStreakCreateManyArgs>(args?: SelectSubset<T, StudentStreakCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentStreaks and returns the data saved in the database.
     * @param {StudentStreakCreateManyAndReturnArgs} args - Arguments to create many StudentStreaks.
     * @example
     * // Create many StudentStreaks
     * const studentStreak = await prisma.studentStreak.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentStreaks and only return the `id`
     * const studentStreakWithIdOnly = await prisma.studentStreak.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentStreakCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentStreakCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentStreak.
     * @param {StudentStreakDeleteArgs} args - Arguments to delete one StudentStreak.
     * @example
     * // Delete one StudentStreak
     * const StudentStreak = await prisma.studentStreak.delete({
     *   where: {
     *     // ... filter to delete one StudentStreak
     *   }
     * })
     * 
     */
    delete<T extends StudentStreakDeleteArgs>(args: SelectSubset<T, StudentStreakDeleteArgs<ExtArgs>>): Prisma__StudentStreakClient<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentStreak.
     * @param {StudentStreakUpdateArgs} args - Arguments to update one StudentStreak.
     * @example
     * // Update one StudentStreak
     * const studentStreak = await prisma.studentStreak.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentStreakUpdateArgs>(args: SelectSubset<T, StudentStreakUpdateArgs<ExtArgs>>): Prisma__StudentStreakClient<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentStreaks.
     * @param {StudentStreakDeleteManyArgs} args - Arguments to filter StudentStreaks to delete.
     * @example
     * // Delete a few StudentStreaks
     * const { count } = await prisma.studentStreak.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentStreakDeleteManyArgs>(args?: SelectSubset<T, StudentStreakDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentStreaks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentStreakUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentStreaks
     * const studentStreak = await prisma.studentStreak.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentStreakUpdateManyArgs>(args: SelectSubset<T, StudentStreakUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentStreaks and returns the data updated in the database.
     * @param {StudentStreakUpdateManyAndReturnArgs} args - Arguments to update many StudentStreaks.
     * @example
     * // Update many StudentStreaks
     * const studentStreak = await prisma.studentStreak.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentStreaks and only return the `id`
     * const studentStreakWithIdOnly = await prisma.studentStreak.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentStreakUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentStreakUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentStreak.
     * @param {StudentStreakUpsertArgs} args - Arguments to update or create a StudentStreak.
     * @example
     * // Update or create a StudentStreak
     * const studentStreak = await prisma.studentStreak.upsert({
     *   create: {
     *     // ... data to create a StudentStreak
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentStreak we want to update
     *   }
     * })
     */
    upsert<T extends StudentStreakUpsertArgs>(args: SelectSubset<T, StudentStreakUpsertArgs<ExtArgs>>): Prisma__StudentStreakClient<$Result.GetResult<Prisma.$StudentStreakPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentStreaks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentStreakCountArgs} args - Arguments to filter StudentStreaks to count.
     * @example
     * // Count the number of StudentStreaks
     * const count = await prisma.studentStreak.count({
     *   where: {
     *     // ... the filter for the StudentStreaks we want to count
     *   }
     * })
    **/
    count<T extends StudentStreakCountArgs>(
      args?: Subset<T, StudentStreakCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentStreakCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentStreak.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentStreakAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentStreakAggregateArgs>(args: Subset<T, StudentStreakAggregateArgs>): Prisma.PrismaPromise<GetStudentStreakAggregateType<T>>

    /**
     * Group by StudentStreak.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentStreakGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentStreakGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentStreakGroupByArgs['orderBy'] }
        : { orderBy?: StudentStreakGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentStreakGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentStreakGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentStreak model
   */
  readonly fields: StudentStreakFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentStreak.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentStreakClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentStreak model
   */
  interface StudentStreakFieldRefs {
    readonly id: FieldRef<"StudentStreak", 'Int'>
    readonly studentId: FieldRef<"StudentStreak", 'Int'>
    readonly classId: FieldRef<"StudentStreak", 'Int'>
    readonly currentStreak: FieldRef<"StudentStreak", 'Int'>
    readonly longestStreak: FieldRef<"StudentStreak", 'Int'>
    readonly lastAttendanceDate: FieldRef<"StudentStreak", 'DateTime'>
    readonly streakStartDate: FieldRef<"StudentStreak", 'DateTime'>
    readonly createdAt: FieldRef<"StudentStreak", 'DateTime'>
    readonly updatedAt: FieldRef<"StudentStreak", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudentStreak findUnique
   */
  export type StudentStreakFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
    /**
     * Filter, which StudentStreak to fetch.
     */
    where: StudentStreakWhereUniqueInput
  }

  /**
   * StudentStreak findUniqueOrThrow
   */
  export type StudentStreakFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
    /**
     * Filter, which StudentStreak to fetch.
     */
    where: StudentStreakWhereUniqueInput
  }

  /**
   * StudentStreak findFirst
   */
  export type StudentStreakFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
    /**
     * Filter, which StudentStreak to fetch.
     */
    where?: StudentStreakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentStreaks to fetch.
     */
    orderBy?: StudentStreakOrderByWithRelationInput | StudentStreakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentStreaks.
     */
    cursor?: StudentStreakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentStreaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentStreaks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentStreaks.
     */
    distinct?: StudentStreakScalarFieldEnum | StudentStreakScalarFieldEnum[]
  }

  /**
   * StudentStreak findFirstOrThrow
   */
  export type StudentStreakFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
    /**
     * Filter, which StudentStreak to fetch.
     */
    where?: StudentStreakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentStreaks to fetch.
     */
    orderBy?: StudentStreakOrderByWithRelationInput | StudentStreakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentStreaks.
     */
    cursor?: StudentStreakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentStreaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentStreaks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentStreaks.
     */
    distinct?: StudentStreakScalarFieldEnum | StudentStreakScalarFieldEnum[]
  }

  /**
   * StudentStreak findMany
   */
  export type StudentStreakFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
    /**
     * Filter, which StudentStreaks to fetch.
     */
    where?: StudentStreakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentStreaks to fetch.
     */
    orderBy?: StudentStreakOrderByWithRelationInput | StudentStreakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentStreaks.
     */
    cursor?: StudentStreakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentStreaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentStreaks.
     */
    skip?: number
    distinct?: StudentStreakScalarFieldEnum | StudentStreakScalarFieldEnum[]
  }

  /**
   * StudentStreak create
   */
  export type StudentStreakCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentStreak.
     */
    data: XOR<StudentStreakCreateInput, StudentStreakUncheckedCreateInput>
  }

  /**
   * StudentStreak createMany
   */
  export type StudentStreakCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentStreaks.
     */
    data: StudentStreakCreateManyInput | StudentStreakCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentStreak createManyAndReturn
   */
  export type StudentStreakCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * The data used to create many StudentStreaks.
     */
    data: StudentStreakCreateManyInput | StudentStreakCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentStreak update
   */
  export type StudentStreakUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentStreak.
     */
    data: XOR<StudentStreakUpdateInput, StudentStreakUncheckedUpdateInput>
    /**
     * Choose, which StudentStreak to update.
     */
    where: StudentStreakWhereUniqueInput
  }

  /**
   * StudentStreak updateMany
   */
  export type StudentStreakUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentStreaks.
     */
    data: XOR<StudentStreakUpdateManyMutationInput, StudentStreakUncheckedUpdateManyInput>
    /**
     * Filter which StudentStreaks to update
     */
    where?: StudentStreakWhereInput
    /**
     * Limit how many StudentStreaks to update.
     */
    limit?: number
  }

  /**
   * StudentStreak updateManyAndReturn
   */
  export type StudentStreakUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * The data used to update StudentStreaks.
     */
    data: XOR<StudentStreakUpdateManyMutationInput, StudentStreakUncheckedUpdateManyInput>
    /**
     * Filter which StudentStreaks to update
     */
    where?: StudentStreakWhereInput
    /**
     * Limit how many StudentStreaks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentStreak upsert
   */
  export type StudentStreakUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentStreak to update in case it exists.
     */
    where: StudentStreakWhereUniqueInput
    /**
     * In case the StudentStreak found by the `where` argument doesn't exist, create a new StudentStreak with this data.
     */
    create: XOR<StudentStreakCreateInput, StudentStreakUncheckedCreateInput>
    /**
     * In case the StudentStreak was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentStreakUpdateInput, StudentStreakUncheckedUpdateInput>
  }

  /**
   * StudentStreak delete
   */
  export type StudentStreakDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
    /**
     * Filter which StudentStreak to delete.
     */
    where: StudentStreakWhereUniqueInput
  }

  /**
   * StudentStreak deleteMany
   */
  export type StudentStreakDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentStreaks to delete
     */
    where?: StudentStreakWhereInput
    /**
     * Limit how many StudentStreaks to delete.
     */
    limit?: number
  }

  /**
   * StudentStreak without action
   */
  export type StudentStreakDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentStreak
     */
    select?: StudentStreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentStreak
     */
    omit?: StudentStreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentStreakInclude<ExtArgs> | null
  }


  /**
   * Model LeaderboardRanking
   */

  export type AggregateLeaderboardRanking = {
    _count: LeaderboardRankingCountAggregateOutputType | null
    _avg: LeaderboardRankingAvgAggregateOutputType | null
    _sum: LeaderboardRankingSumAggregateOutputType | null
    _min: LeaderboardRankingMinAggregateOutputType | null
    _max: LeaderboardRankingMaxAggregateOutputType | null
  }

  export type LeaderboardRankingAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    departmentId: number | null
    rankPosition: number | null
    totalPoints: number | null
    attendanceRate: Decimal | null
    streakDays: number | null
    achievementsCount: number | null
  }

  export type LeaderboardRankingSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    departmentId: number | null
    rankPosition: number | null
    totalPoints: number | null
    attendanceRate: Decimal | null
    streakDays: number | null
    achievementsCount: number | null
  }

  export type LeaderboardRankingMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    departmentId: number | null
    period: string | null
    scope: string | null
    rankPosition: number | null
    totalPoints: number | null
    attendanceRate: Decimal | null
    streakDays: number | null
    achievementsCount: number | null
    periodStart: Date | null
    periodEnd: Date | null
    createdAt: Date | null
  }

  export type LeaderboardRankingMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    classId: number | null
    departmentId: number | null
    period: string | null
    scope: string | null
    rankPosition: number | null
    totalPoints: number | null
    attendanceRate: Decimal | null
    streakDays: number | null
    achievementsCount: number | null
    periodStart: Date | null
    periodEnd: Date | null
    createdAt: Date | null
  }

  export type LeaderboardRankingCountAggregateOutputType = {
    id: number
    studentId: number
    classId: number
    departmentId: number
    period: number
    scope: number
    rankPosition: number
    totalPoints: number
    attendanceRate: number
    streakDays: number
    achievementsCount: number
    periodStart: number
    periodEnd: number
    createdAt: number
    _all: number
  }


  export type LeaderboardRankingAvgAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    departmentId?: true
    rankPosition?: true
    totalPoints?: true
    attendanceRate?: true
    streakDays?: true
    achievementsCount?: true
  }

  export type LeaderboardRankingSumAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    departmentId?: true
    rankPosition?: true
    totalPoints?: true
    attendanceRate?: true
    streakDays?: true
    achievementsCount?: true
  }

  export type LeaderboardRankingMinAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    departmentId?: true
    period?: true
    scope?: true
    rankPosition?: true
    totalPoints?: true
    attendanceRate?: true
    streakDays?: true
    achievementsCount?: true
    periodStart?: true
    periodEnd?: true
    createdAt?: true
  }

  export type LeaderboardRankingMaxAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    departmentId?: true
    period?: true
    scope?: true
    rankPosition?: true
    totalPoints?: true
    attendanceRate?: true
    streakDays?: true
    achievementsCount?: true
    periodStart?: true
    periodEnd?: true
    createdAt?: true
  }

  export type LeaderboardRankingCountAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    departmentId?: true
    period?: true
    scope?: true
    rankPosition?: true
    totalPoints?: true
    attendanceRate?: true
    streakDays?: true
    achievementsCount?: true
    periodStart?: true
    periodEnd?: true
    createdAt?: true
    _all?: true
  }

  export type LeaderboardRankingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaderboardRanking to aggregate.
     */
    where?: LeaderboardRankingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaderboardRankings to fetch.
     */
    orderBy?: LeaderboardRankingOrderByWithRelationInput | LeaderboardRankingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaderboardRankingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaderboardRankings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaderboardRankings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeaderboardRankings
    **/
    _count?: true | LeaderboardRankingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaderboardRankingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaderboardRankingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaderboardRankingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaderboardRankingMaxAggregateInputType
  }

  export type GetLeaderboardRankingAggregateType<T extends LeaderboardRankingAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaderboardRanking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaderboardRanking[P]>
      : GetScalarType<T[P], AggregateLeaderboardRanking[P]>
  }




  export type LeaderboardRankingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaderboardRankingWhereInput
    orderBy?: LeaderboardRankingOrderByWithAggregationInput | LeaderboardRankingOrderByWithAggregationInput[]
    by: LeaderboardRankingScalarFieldEnum[] | LeaderboardRankingScalarFieldEnum
    having?: LeaderboardRankingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaderboardRankingCountAggregateInputType | true
    _avg?: LeaderboardRankingAvgAggregateInputType
    _sum?: LeaderboardRankingSumAggregateInputType
    _min?: LeaderboardRankingMinAggregateInputType
    _max?: LeaderboardRankingMaxAggregateInputType
  }

  export type LeaderboardRankingGroupByOutputType = {
    id: number
    studentId: number
    classId: number | null
    departmentId: number | null
    period: string
    scope: string
    rankPosition: number
    totalPoints: number
    attendanceRate: Decimal | null
    streakDays: number
    achievementsCount: number
    periodStart: Date
    periodEnd: Date
    createdAt: Date
    _count: LeaderboardRankingCountAggregateOutputType | null
    _avg: LeaderboardRankingAvgAggregateOutputType | null
    _sum: LeaderboardRankingSumAggregateOutputType | null
    _min: LeaderboardRankingMinAggregateOutputType | null
    _max: LeaderboardRankingMaxAggregateOutputType | null
  }

  type GetLeaderboardRankingGroupByPayload<T extends LeaderboardRankingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaderboardRankingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaderboardRankingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaderboardRankingGroupByOutputType[P]>
            : GetScalarType<T[P], LeaderboardRankingGroupByOutputType[P]>
        }
      >
    >


  export type LeaderboardRankingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    departmentId?: boolean
    period?: boolean
    scope?: boolean
    rankPosition?: boolean
    totalPoints?: boolean
    attendanceRate?: boolean
    streakDays?: boolean
    achievementsCount?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | LeaderboardRanking$classArgs<ExtArgs>
    department?: boolean | LeaderboardRanking$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["leaderboardRanking"]>

  export type LeaderboardRankingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    departmentId?: boolean
    period?: boolean
    scope?: boolean
    rankPosition?: boolean
    totalPoints?: boolean
    attendanceRate?: boolean
    streakDays?: boolean
    achievementsCount?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | LeaderboardRanking$classArgs<ExtArgs>
    department?: boolean | LeaderboardRanking$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["leaderboardRanking"]>

  export type LeaderboardRankingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    departmentId?: boolean
    period?: boolean
    scope?: boolean
    rankPosition?: boolean
    totalPoints?: boolean
    attendanceRate?: boolean
    streakDays?: boolean
    achievementsCount?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | LeaderboardRanking$classArgs<ExtArgs>
    department?: boolean | LeaderboardRanking$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["leaderboardRanking"]>

  export type LeaderboardRankingSelectScalar = {
    id?: boolean
    studentId?: boolean
    classId?: boolean
    departmentId?: boolean
    period?: boolean
    scope?: boolean
    rankPosition?: boolean
    totalPoints?: boolean
    attendanceRate?: boolean
    streakDays?: boolean
    achievementsCount?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    createdAt?: boolean
  }

  export type LeaderboardRankingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "classId" | "departmentId" | "period" | "scope" | "rankPosition" | "totalPoints" | "attendanceRate" | "streakDays" | "achievementsCount" | "periodStart" | "periodEnd" | "createdAt", ExtArgs["result"]["leaderboardRanking"]>
  export type LeaderboardRankingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | LeaderboardRanking$classArgs<ExtArgs>
    department?: boolean | LeaderboardRanking$departmentArgs<ExtArgs>
  }
  export type LeaderboardRankingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | LeaderboardRanking$classArgs<ExtArgs>
    department?: boolean | LeaderboardRanking$departmentArgs<ExtArgs>
  }
  export type LeaderboardRankingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    class?: boolean | LeaderboardRanking$classArgs<ExtArgs>
    department?: boolean | LeaderboardRanking$departmentArgs<ExtArgs>
  }

  export type $LeaderboardRankingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeaderboardRanking"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      classId: number | null
      departmentId: number | null
      period: string
      scope: string
      rankPosition: number
      totalPoints: number
      attendanceRate: Prisma.Decimal | null
      streakDays: number
      achievementsCount: number
      periodStart: Date
      periodEnd: Date
      createdAt: Date
    }, ExtArgs["result"]["leaderboardRanking"]>
    composites: {}
  }

  type LeaderboardRankingGetPayload<S extends boolean | null | undefined | LeaderboardRankingDefaultArgs> = $Result.GetResult<Prisma.$LeaderboardRankingPayload, S>

  type LeaderboardRankingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeaderboardRankingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeaderboardRankingCountAggregateInputType | true
    }

  export interface LeaderboardRankingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaderboardRanking'], meta: { name: 'LeaderboardRanking' } }
    /**
     * Find zero or one LeaderboardRanking that matches the filter.
     * @param {LeaderboardRankingFindUniqueArgs} args - Arguments to find a LeaderboardRanking
     * @example
     * // Get one LeaderboardRanking
     * const leaderboardRanking = await prisma.leaderboardRanking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaderboardRankingFindUniqueArgs>(args: SelectSubset<T, LeaderboardRankingFindUniqueArgs<ExtArgs>>): Prisma__LeaderboardRankingClient<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeaderboardRanking that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeaderboardRankingFindUniqueOrThrowArgs} args - Arguments to find a LeaderboardRanking
     * @example
     * // Get one LeaderboardRanking
     * const leaderboardRanking = await prisma.leaderboardRanking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaderboardRankingFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaderboardRankingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaderboardRankingClient<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaderboardRanking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaderboardRankingFindFirstArgs} args - Arguments to find a LeaderboardRanking
     * @example
     * // Get one LeaderboardRanking
     * const leaderboardRanking = await prisma.leaderboardRanking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaderboardRankingFindFirstArgs>(args?: SelectSubset<T, LeaderboardRankingFindFirstArgs<ExtArgs>>): Prisma__LeaderboardRankingClient<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaderboardRanking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaderboardRankingFindFirstOrThrowArgs} args - Arguments to find a LeaderboardRanking
     * @example
     * // Get one LeaderboardRanking
     * const leaderboardRanking = await prisma.leaderboardRanking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaderboardRankingFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaderboardRankingFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaderboardRankingClient<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeaderboardRankings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaderboardRankingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaderboardRankings
     * const leaderboardRankings = await prisma.leaderboardRanking.findMany()
     * 
     * // Get first 10 LeaderboardRankings
     * const leaderboardRankings = await prisma.leaderboardRanking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaderboardRankingWithIdOnly = await prisma.leaderboardRanking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaderboardRankingFindManyArgs>(args?: SelectSubset<T, LeaderboardRankingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeaderboardRanking.
     * @param {LeaderboardRankingCreateArgs} args - Arguments to create a LeaderboardRanking.
     * @example
     * // Create one LeaderboardRanking
     * const LeaderboardRanking = await prisma.leaderboardRanking.create({
     *   data: {
     *     // ... data to create a LeaderboardRanking
     *   }
     * })
     * 
     */
    create<T extends LeaderboardRankingCreateArgs>(args: SelectSubset<T, LeaderboardRankingCreateArgs<ExtArgs>>): Prisma__LeaderboardRankingClient<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeaderboardRankings.
     * @param {LeaderboardRankingCreateManyArgs} args - Arguments to create many LeaderboardRankings.
     * @example
     * // Create many LeaderboardRankings
     * const leaderboardRanking = await prisma.leaderboardRanking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaderboardRankingCreateManyArgs>(args?: SelectSubset<T, LeaderboardRankingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeaderboardRankings and returns the data saved in the database.
     * @param {LeaderboardRankingCreateManyAndReturnArgs} args - Arguments to create many LeaderboardRankings.
     * @example
     * // Create many LeaderboardRankings
     * const leaderboardRanking = await prisma.leaderboardRanking.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeaderboardRankings and only return the `id`
     * const leaderboardRankingWithIdOnly = await prisma.leaderboardRanking.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaderboardRankingCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaderboardRankingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeaderboardRanking.
     * @param {LeaderboardRankingDeleteArgs} args - Arguments to delete one LeaderboardRanking.
     * @example
     * // Delete one LeaderboardRanking
     * const LeaderboardRanking = await prisma.leaderboardRanking.delete({
     *   where: {
     *     // ... filter to delete one LeaderboardRanking
     *   }
     * })
     * 
     */
    delete<T extends LeaderboardRankingDeleteArgs>(args: SelectSubset<T, LeaderboardRankingDeleteArgs<ExtArgs>>): Prisma__LeaderboardRankingClient<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeaderboardRanking.
     * @param {LeaderboardRankingUpdateArgs} args - Arguments to update one LeaderboardRanking.
     * @example
     * // Update one LeaderboardRanking
     * const leaderboardRanking = await prisma.leaderboardRanking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaderboardRankingUpdateArgs>(args: SelectSubset<T, LeaderboardRankingUpdateArgs<ExtArgs>>): Prisma__LeaderboardRankingClient<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeaderboardRankings.
     * @param {LeaderboardRankingDeleteManyArgs} args - Arguments to filter LeaderboardRankings to delete.
     * @example
     * // Delete a few LeaderboardRankings
     * const { count } = await prisma.leaderboardRanking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaderboardRankingDeleteManyArgs>(args?: SelectSubset<T, LeaderboardRankingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaderboardRankings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaderboardRankingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaderboardRankings
     * const leaderboardRanking = await prisma.leaderboardRanking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaderboardRankingUpdateManyArgs>(args: SelectSubset<T, LeaderboardRankingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaderboardRankings and returns the data updated in the database.
     * @param {LeaderboardRankingUpdateManyAndReturnArgs} args - Arguments to update many LeaderboardRankings.
     * @example
     * // Update many LeaderboardRankings
     * const leaderboardRanking = await prisma.leaderboardRanking.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeaderboardRankings and only return the `id`
     * const leaderboardRankingWithIdOnly = await prisma.leaderboardRanking.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeaderboardRankingUpdateManyAndReturnArgs>(args: SelectSubset<T, LeaderboardRankingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeaderboardRanking.
     * @param {LeaderboardRankingUpsertArgs} args - Arguments to update or create a LeaderboardRanking.
     * @example
     * // Update or create a LeaderboardRanking
     * const leaderboardRanking = await prisma.leaderboardRanking.upsert({
     *   create: {
     *     // ... data to create a LeaderboardRanking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaderboardRanking we want to update
     *   }
     * })
     */
    upsert<T extends LeaderboardRankingUpsertArgs>(args: SelectSubset<T, LeaderboardRankingUpsertArgs<ExtArgs>>): Prisma__LeaderboardRankingClient<$Result.GetResult<Prisma.$LeaderboardRankingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeaderboardRankings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaderboardRankingCountArgs} args - Arguments to filter LeaderboardRankings to count.
     * @example
     * // Count the number of LeaderboardRankings
     * const count = await prisma.leaderboardRanking.count({
     *   where: {
     *     // ... the filter for the LeaderboardRankings we want to count
     *   }
     * })
    **/
    count<T extends LeaderboardRankingCountArgs>(
      args?: Subset<T, LeaderboardRankingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaderboardRankingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaderboardRanking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaderboardRankingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaderboardRankingAggregateArgs>(args: Subset<T, LeaderboardRankingAggregateArgs>): Prisma.PrismaPromise<GetLeaderboardRankingAggregateType<T>>

    /**
     * Group by LeaderboardRanking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaderboardRankingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaderboardRankingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaderboardRankingGroupByArgs['orderBy'] }
        : { orderBy?: LeaderboardRankingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaderboardRankingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaderboardRankingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeaderboardRanking model
   */
  readonly fields: LeaderboardRankingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeaderboardRanking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaderboardRankingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends LeaderboardRanking$classArgs<ExtArgs> = {}>(args?: Subset<T, LeaderboardRanking$classArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    department<T extends LeaderboardRanking$departmentArgs<ExtArgs> = {}>(args?: Subset<T, LeaderboardRanking$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeaderboardRanking model
   */
  interface LeaderboardRankingFieldRefs {
    readonly id: FieldRef<"LeaderboardRanking", 'Int'>
    readonly studentId: FieldRef<"LeaderboardRanking", 'Int'>
    readonly classId: FieldRef<"LeaderboardRanking", 'Int'>
    readonly departmentId: FieldRef<"LeaderboardRanking", 'Int'>
    readonly period: FieldRef<"LeaderboardRanking", 'String'>
    readonly scope: FieldRef<"LeaderboardRanking", 'String'>
    readonly rankPosition: FieldRef<"LeaderboardRanking", 'Int'>
    readonly totalPoints: FieldRef<"LeaderboardRanking", 'Int'>
    readonly attendanceRate: FieldRef<"LeaderboardRanking", 'Decimal'>
    readonly streakDays: FieldRef<"LeaderboardRanking", 'Int'>
    readonly achievementsCount: FieldRef<"LeaderboardRanking", 'Int'>
    readonly periodStart: FieldRef<"LeaderboardRanking", 'DateTime'>
    readonly periodEnd: FieldRef<"LeaderboardRanking", 'DateTime'>
    readonly createdAt: FieldRef<"LeaderboardRanking", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeaderboardRanking findUnique
   */
  export type LeaderboardRankingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    /**
     * Filter, which LeaderboardRanking to fetch.
     */
    where: LeaderboardRankingWhereUniqueInput
  }

  /**
   * LeaderboardRanking findUniqueOrThrow
   */
  export type LeaderboardRankingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    /**
     * Filter, which LeaderboardRanking to fetch.
     */
    where: LeaderboardRankingWhereUniqueInput
  }

  /**
   * LeaderboardRanking findFirst
   */
  export type LeaderboardRankingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    /**
     * Filter, which LeaderboardRanking to fetch.
     */
    where?: LeaderboardRankingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaderboardRankings to fetch.
     */
    orderBy?: LeaderboardRankingOrderByWithRelationInput | LeaderboardRankingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaderboardRankings.
     */
    cursor?: LeaderboardRankingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaderboardRankings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaderboardRankings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaderboardRankings.
     */
    distinct?: LeaderboardRankingScalarFieldEnum | LeaderboardRankingScalarFieldEnum[]
  }

  /**
   * LeaderboardRanking findFirstOrThrow
   */
  export type LeaderboardRankingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    /**
     * Filter, which LeaderboardRanking to fetch.
     */
    where?: LeaderboardRankingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaderboardRankings to fetch.
     */
    orderBy?: LeaderboardRankingOrderByWithRelationInput | LeaderboardRankingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaderboardRankings.
     */
    cursor?: LeaderboardRankingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaderboardRankings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaderboardRankings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaderboardRankings.
     */
    distinct?: LeaderboardRankingScalarFieldEnum | LeaderboardRankingScalarFieldEnum[]
  }

  /**
   * LeaderboardRanking findMany
   */
  export type LeaderboardRankingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    /**
     * Filter, which LeaderboardRankings to fetch.
     */
    where?: LeaderboardRankingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaderboardRankings to fetch.
     */
    orderBy?: LeaderboardRankingOrderByWithRelationInput | LeaderboardRankingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeaderboardRankings.
     */
    cursor?: LeaderboardRankingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaderboardRankings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaderboardRankings.
     */
    skip?: number
    distinct?: LeaderboardRankingScalarFieldEnum | LeaderboardRankingScalarFieldEnum[]
  }

  /**
   * LeaderboardRanking create
   */
  export type LeaderboardRankingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    /**
     * The data needed to create a LeaderboardRanking.
     */
    data: XOR<LeaderboardRankingCreateInput, LeaderboardRankingUncheckedCreateInput>
  }

  /**
   * LeaderboardRanking createMany
   */
  export type LeaderboardRankingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeaderboardRankings.
     */
    data: LeaderboardRankingCreateManyInput | LeaderboardRankingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeaderboardRanking createManyAndReturn
   */
  export type LeaderboardRankingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * The data used to create many LeaderboardRankings.
     */
    data: LeaderboardRankingCreateManyInput | LeaderboardRankingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaderboardRanking update
   */
  export type LeaderboardRankingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    /**
     * The data needed to update a LeaderboardRanking.
     */
    data: XOR<LeaderboardRankingUpdateInput, LeaderboardRankingUncheckedUpdateInput>
    /**
     * Choose, which LeaderboardRanking to update.
     */
    where: LeaderboardRankingWhereUniqueInput
  }

  /**
   * LeaderboardRanking updateMany
   */
  export type LeaderboardRankingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeaderboardRankings.
     */
    data: XOR<LeaderboardRankingUpdateManyMutationInput, LeaderboardRankingUncheckedUpdateManyInput>
    /**
     * Filter which LeaderboardRankings to update
     */
    where?: LeaderboardRankingWhereInput
    /**
     * Limit how many LeaderboardRankings to update.
     */
    limit?: number
  }

  /**
   * LeaderboardRanking updateManyAndReturn
   */
  export type LeaderboardRankingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * The data used to update LeaderboardRankings.
     */
    data: XOR<LeaderboardRankingUpdateManyMutationInput, LeaderboardRankingUncheckedUpdateManyInput>
    /**
     * Filter which LeaderboardRankings to update
     */
    where?: LeaderboardRankingWhereInput
    /**
     * Limit how many LeaderboardRankings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaderboardRanking upsert
   */
  export type LeaderboardRankingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    /**
     * The filter to search for the LeaderboardRanking to update in case it exists.
     */
    where: LeaderboardRankingWhereUniqueInput
    /**
     * In case the LeaderboardRanking found by the `where` argument doesn't exist, create a new LeaderboardRanking with this data.
     */
    create: XOR<LeaderboardRankingCreateInput, LeaderboardRankingUncheckedCreateInput>
    /**
     * In case the LeaderboardRanking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaderboardRankingUpdateInput, LeaderboardRankingUncheckedUpdateInput>
  }

  /**
   * LeaderboardRanking delete
   */
  export type LeaderboardRankingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
    /**
     * Filter which LeaderboardRanking to delete.
     */
    where: LeaderboardRankingWhereUniqueInput
  }

  /**
   * LeaderboardRanking deleteMany
   */
  export type LeaderboardRankingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaderboardRankings to delete
     */
    where?: LeaderboardRankingWhereInput
    /**
     * Limit how many LeaderboardRankings to delete.
     */
    limit?: number
  }

  /**
   * LeaderboardRanking.class
   */
  export type LeaderboardRanking$classArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * LeaderboardRanking.department
   */
  export type LeaderboardRanking$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * LeaderboardRanking without action
   */
  export type LeaderboardRankingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaderboardRanking
     */
    select?: LeaderboardRankingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaderboardRanking
     */
    omit?: LeaderboardRankingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaderboardRankingInclude<ExtArgs> | null
  }


  /**
   * Model GeofenceSettings
   */

  export type AggregateGeofenceSettings = {
    _count: GeofenceSettingsCountAggregateOutputType | null
    _avg: GeofenceSettingsAvgAggregateOutputType | null
    _sum: GeofenceSettingsSumAggregateOutputType | null
    _min: GeofenceSettingsMinAggregateOutputType | null
    _max: GeofenceSettingsMaxAggregateOutputType | null
  }

  export type GeofenceSettingsAvgAggregateOutputType = {
    id: number | null
    defaultRadius: number | null
    accuracyThreshold: number | null
  }

  export type GeofenceSettingsSumAggregateOutputType = {
    id: number | null
    defaultRadius: number | null
    accuracyThreshold: number | null
  }

  export type GeofenceSettingsMinAggregateOutputType = {
    id: number | null
    defaultRadius: number | null
    enabled: boolean | null
    allowOverride: boolean | null
    accuracyThreshold: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GeofenceSettingsMaxAggregateOutputType = {
    id: number | null
    defaultRadius: number | null
    enabled: boolean | null
    allowOverride: boolean | null
    accuracyThreshold: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GeofenceSettingsCountAggregateOutputType = {
    id: number
    defaultRadius: number
    enabled: number
    allowOverride: number
    accuracyThreshold: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GeofenceSettingsAvgAggregateInputType = {
    id?: true
    defaultRadius?: true
    accuracyThreshold?: true
  }

  export type GeofenceSettingsSumAggregateInputType = {
    id?: true
    defaultRadius?: true
    accuracyThreshold?: true
  }

  export type GeofenceSettingsMinAggregateInputType = {
    id?: true
    defaultRadius?: true
    enabled?: true
    allowOverride?: true
    accuracyThreshold?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GeofenceSettingsMaxAggregateInputType = {
    id?: true
    defaultRadius?: true
    enabled?: true
    allowOverride?: true
    accuracyThreshold?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GeofenceSettingsCountAggregateInputType = {
    id?: true
    defaultRadius?: true
    enabled?: true
    allowOverride?: true
    accuracyThreshold?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GeofenceSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeofenceSettings to aggregate.
     */
    where?: GeofenceSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeofenceSettings to fetch.
     */
    orderBy?: GeofenceSettingsOrderByWithRelationInput | GeofenceSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeofenceSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeofenceSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeofenceSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeofenceSettings
    **/
    _count?: true | GeofenceSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GeofenceSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GeofenceSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeofenceSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeofenceSettingsMaxAggregateInputType
  }

  export type GetGeofenceSettingsAggregateType<T extends GeofenceSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateGeofenceSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeofenceSettings[P]>
      : GetScalarType<T[P], AggregateGeofenceSettings[P]>
  }




  export type GeofenceSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeofenceSettingsWhereInput
    orderBy?: GeofenceSettingsOrderByWithAggregationInput | GeofenceSettingsOrderByWithAggregationInput[]
    by: GeofenceSettingsScalarFieldEnum[] | GeofenceSettingsScalarFieldEnum
    having?: GeofenceSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeofenceSettingsCountAggregateInputType | true
    _avg?: GeofenceSettingsAvgAggregateInputType
    _sum?: GeofenceSettingsSumAggregateInputType
    _min?: GeofenceSettingsMinAggregateInputType
    _max?: GeofenceSettingsMaxAggregateInputType
  }

  export type GeofenceSettingsGroupByOutputType = {
    id: number
    defaultRadius: number
    enabled: boolean
    allowOverride: boolean
    accuracyThreshold: number
    createdAt: Date
    updatedAt: Date
    _count: GeofenceSettingsCountAggregateOutputType | null
    _avg: GeofenceSettingsAvgAggregateOutputType | null
    _sum: GeofenceSettingsSumAggregateOutputType | null
    _min: GeofenceSettingsMinAggregateOutputType | null
    _max: GeofenceSettingsMaxAggregateOutputType | null
  }

  type GetGeofenceSettingsGroupByPayload<T extends GeofenceSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeofenceSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeofenceSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeofenceSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], GeofenceSettingsGroupByOutputType[P]>
        }
      >
    >


  export type GeofenceSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    defaultRadius?: boolean
    enabled?: boolean
    allowOverride?: boolean
    accuracyThreshold?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["geofenceSettings"]>

  export type GeofenceSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    defaultRadius?: boolean
    enabled?: boolean
    allowOverride?: boolean
    accuracyThreshold?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["geofenceSettings"]>

  export type GeofenceSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    defaultRadius?: boolean
    enabled?: boolean
    allowOverride?: boolean
    accuracyThreshold?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["geofenceSettings"]>

  export type GeofenceSettingsSelectScalar = {
    id?: boolean
    defaultRadius?: boolean
    enabled?: boolean
    allowOverride?: boolean
    accuracyThreshold?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GeofenceSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "defaultRadius" | "enabled" | "allowOverride" | "accuracyThreshold" | "createdAt" | "updatedAt", ExtArgs["result"]["geofenceSettings"]>

  export type $GeofenceSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeofenceSettings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      defaultRadius: number
      enabled: boolean
      allowOverride: boolean
      accuracyThreshold: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["geofenceSettings"]>
    composites: {}
  }

  type GeofenceSettingsGetPayload<S extends boolean | null | undefined | GeofenceSettingsDefaultArgs> = $Result.GetResult<Prisma.$GeofenceSettingsPayload, S>

  type GeofenceSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GeofenceSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GeofenceSettingsCountAggregateInputType | true
    }

  export interface GeofenceSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeofenceSettings'], meta: { name: 'GeofenceSettings' } }
    /**
     * Find zero or one GeofenceSettings that matches the filter.
     * @param {GeofenceSettingsFindUniqueArgs} args - Arguments to find a GeofenceSettings
     * @example
     * // Get one GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeofenceSettingsFindUniqueArgs>(args: SelectSubset<T, GeofenceSettingsFindUniqueArgs<ExtArgs>>): Prisma__GeofenceSettingsClient<$Result.GetResult<Prisma.$GeofenceSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GeofenceSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GeofenceSettingsFindUniqueOrThrowArgs} args - Arguments to find a GeofenceSettings
     * @example
     * // Get one GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeofenceSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, GeofenceSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeofenceSettingsClient<$Result.GetResult<Prisma.$GeofenceSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeofenceSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeofenceSettingsFindFirstArgs} args - Arguments to find a GeofenceSettings
     * @example
     * // Get one GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeofenceSettingsFindFirstArgs>(args?: SelectSubset<T, GeofenceSettingsFindFirstArgs<ExtArgs>>): Prisma__GeofenceSettingsClient<$Result.GetResult<Prisma.$GeofenceSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeofenceSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeofenceSettingsFindFirstOrThrowArgs} args - Arguments to find a GeofenceSettings
     * @example
     * // Get one GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeofenceSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, GeofenceSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeofenceSettingsClient<$Result.GetResult<Prisma.$GeofenceSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GeofenceSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeofenceSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.findMany()
     * 
     * // Get first 10 GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const geofenceSettingsWithIdOnly = await prisma.geofenceSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeofenceSettingsFindManyArgs>(args?: SelectSubset<T, GeofenceSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeofenceSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GeofenceSettings.
     * @param {GeofenceSettingsCreateArgs} args - Arguments to create a GeofenceSettings.
     * @example
     * // Create one GeofenceSettings
     * const GeofenceSettings = await prisma.geofenceSettings.create({
     *   data: {
     *     // ... data to create a GeofenceSettings
     *   }
     * })
     * 
     */
    create<T extends GeofenceSettingsCreateArgs>(args: SelectSubset<T, GeofenceSettingsCreateArgs<ExtArgs>>): Prisma__GeofenceSettingsClient<$Result.GetResult<Prisma.$GeofenceSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GeofenceSettings.
     * @param {GeofenceSettingsCreateManyArgs} args - Arguments to create many GeofenceSettings.
     * @example
     * // Create many GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeofenceSettingsCreateManyArgs>(args?: SelectSubset<T, GeofenceSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GeofenceSettings and returns the data saved in the database.
     * @param {GeofenceSettingsCreateManyAndReturnArgs} args - Arguments to create many GeofenceSettings.
     * @example
     * // Create many GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GeofenceSettings and only return the `id`
     * const geofenceSettingsWithIdOnly = await prisma.geofenceSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GeofenceSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, GeofenceSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeofenceSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GeofenceSettings.
     * @param {GeofenceSettingsDeleteArgs} args - Arguments to delete one GeofenceSettings.
     * @example
     * // Delete one GeofenceSettings
     * const GeofenceSettings = await prisma.geofenceSettings.delete({
     *   where: {
     *     // ... filter to delete one GeofenceSettings
     *   }
     * })
     * 
     */
    delete<T extends GeofenceSettingsDeleteArgs>(args: SelectSubset<T, GeofenceSettingsDeleteArgs<ExtArgs>>): Prisma__GeofenceSettingsClient<$Result.GetResult<Prisma.$GeofenceSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GeofenceSettings.
     * @param {GeofenceSettingsUpdateArgs} args - Arguments to update one GeofenceSettings.
     * @example
     * // Update one GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeofenceSettingsUpdateArgs>(args: SelectSubset<T, GeofenceSettingsUpdateArgs<ExtArgs>>): Prisma__GeofenceSettingsClient<$Result.GetResult<Prisma.$GeofenceSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GeofenceSettings.
     * @param {GeofenceSettingsDeleteManyArgs} args - Arguments to filter GeofenceSettings to delete.
     * @example
     * // Delete a few GeofenceSettings
     * const { count } = await prisma.geofenceSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeofenceSettingsDeleteManyArgs>(args?: SelectSubset<T, GeofenceSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeofenceSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeofenceSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeofenceSettingsUpdateManyArgs>(args: SelectSubset<T, GeofenceSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeofenceSettings and returns the data updated in the database.
     * @param {GeofenceSettingsUpdateManyAndReturnArgs} args - Arguments to update many GeofenceSettings.
     * @example
     * // Update many GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GeofenceSettings and only return the `id`
     * const geofenceSettingsWithIdOnly = await prisma.geofenceSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GeofenceSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, GeofenceSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeofenceSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GeofenceSettings.
     * @param {GeofenceSettingsUpsertArgs} args - Arguments to update or create a GeofenceSettings.
     * @example
     * // Update or create a GeofenceSettings
     * const geofenceSettings = await prisma.geofenceSettings.upsert({
     *   create: {
     *     // ... data to create a GeofenceSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeofenceSettings we want to update
     *   }
     * })
     */
    upsert<T extends GeofenceSettingsUpsertArgs>(args: SelectSubset<T, GeofenceSettingsUpsertArgs<ExtArgs>>): Prisma__GeofenceSettingsClient<$Result.GetResult<Prisma.$GeofenceSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GeofenceSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeofenceSettingsCountArgs} args - Arguments to filter GeofenceSettings to count.
     * @example
     * // Count the number of GeofenceSettings
     * const count = await prisma.geofenceSettings.count({
     *   where: {
     *     // ... the filter for the GeofenceSettings we want to count
     *   }
     * })
    **/
    count<T extends GeofenceSettingsCountArgs>(
      args?: Subset<T, GeofenceSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeofenceSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeofenceSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeofenceSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeofenceSettingsAggregateArgs>(args: Subset<T, GeofenceSettingsAggregateArgs>): Prisma.PrismaPromise<GetGeofenceSettingsAggregateType<T>>

    /**
     * Group by GeofenceSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeofenceSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeofenceSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeofenceSettingsGroupByArgs['orderBy'] }
        : { orderBy?: GeofenceSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeofenceSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeofenceSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeofenceSettings model
   */
  readonly fields: GeofenceSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeofenceSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeofenceSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GeofenceSettings model
   */
  interface GeofenceSettingsFieldRefs {
    readonly id: FieldRef<"GeofenceSettings", 'Int'>
    readonly defaultRadius: FieldRef<"GeofenceSettings", 'Int'>
    readonly enabled: FieldRef<"GeofenceSettings", 'Boolean'>
    readonly allowOverride: FieldRef<"GeofenceSettings", 'Boolean'>
    readonly accuracyThreshold: FieldRef<"GeofenceSettings", 'Float'>
    readonly createdAt: FieldRef<"GeofenceSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"GeofenceSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GeofenceSettings findUnique
   */
  export type GeofenceSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
    /**
     * Filter, which GeofenceSettings to fetch.
     */
    where: GeofenceSettingsWhereUniqueInput
  }

  /**
   * GeofenceSettings findUniqueOrThrow
   */
  export type GeofenceSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
    /**
     * Filter, which GeofenceSettings to fetch.
     */
    where: GeofenceSettingsWhereUniqueInput
  }

  /**
   * GeofenceSettings findFirst
   */
  export type GeofenceSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
    /**
     * Filter, which GeofenceSettings to fetch.
     */
    where?: GeofenceSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeofenceSettings to fetch.
     */
    orderBy?: GeofenceSettingsOrderByWithRelationInput | GeofenceSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeofenceSettings.
     */
    cursor?: GeofenceSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeofenceSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeofenceSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeofenceSettings.
     */
    distinct?: GeofenceSettingsScalarFieldEnum | GeofenceSettingsScalarFieldEnum[]
  }

  /**
   * GeofenceSettings findFirstOrThrow
   */
  export type GeofenceSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
    /**
     * Filter, which GeofenceSettings to fetch.
     */
    where?: GeofenceSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeofenceSettings to fetch.
     */
    orderBy?: GeofenceSettingsOrderByWithRelationInput | GeofenceSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeofenceSettings.
     */
    cursor?: GeofenceSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeofenceSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeofenceSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeofenceSettings.
     */
    distinct?: GeofenceSettingsScalarFieldEnum | GeofenceSettingsScalarFieldEnum[]
  }

  /**
   * GeofenceSettings findMany
   */
  export type GeofenceSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
    /**
     * Filter, which GeofenceSettings to fetch.
     */
    where?: GeofenceSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeofenceSettings to fetch.
     */
    orderBy?: GeofenceSettingsOrderByWithRelationInput | GeofenceSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeofenceSettings.
     */
    cursor?: GeofenceSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeofenceSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeofenceSettings.
     */
    skip?: number
    distinct?: GeofenceSettingsScalarFieldEnum | GeofenceSettingsScalarFieldEnum[]
  }

  /**
   * GeofenceSettings create
   */
  export type GeofenceSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
    /**
     * The data needed to create a GeofenceSettings.
     */
    data: XOR<GeofenceSettingsCreateInput, GeofenceSettingsUncheckedCreateInput>
  }

  /**
   * GeofenceSettings createMany
   */
  export type GeofenceSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeofenceSettings.
     */
    data: GeofenceSettingsCreateManyInput | GeofenceSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeofenceSettings createManyAndReturn
   */
  export type GeofenceSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many GeofenceSettings.
     */
    data: GeofenceSettingsCreateManyInput | GeofenceSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeofenceSettings update
   */
  export type GeofenceSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
    /**
     * The data needed to update a GeofenceSettings.
     */
    data: XOR<GeofenceSettingsUpdateInput, GeofenceSettingsUncheckedUpdateInput>
    /**
     * Choose, which GeofenceSettings to update.
     */
    where: GeofenceSettingsWhereUniqueInput
  }

  /**
   * GeofenceSettings updateMany
   */
  export type GeofenceSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeofenceSettings.
     */
    data: XOR<GeofenceSettingsUpdateManyMutationInput, GeofenceSettingsUncheckedUpdateManyInput>
    /**
     * Filter which GeofenceSettings to update
     */
    where?: GeofenceSettingsWhereInput
    /**
     * Limit how many GeofenceSettings to update.
     */
    limit?: number
  }

  /**
   * GeofenceSettings updateManyAndReturn
   */
  export type GeofenceSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
    /**
     * The data used to update GeofenceSettings.
     */
    data: XOR<GeofenceSettingsUpdateManyMutationInput, GeofenceSettingsUncheckedUpdateManyInput>
    /**
     * Filter which GeofenceSettings to update
     */
    where?: GeofenceSettingsWhereInput
    /**
     * Limit how many GeofenceSettings to update.
     */
    limit?: number
  }

  /**
   * GeofenceSettings upsert
   */
  export type GeofenceSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
    /**
     * The filter to search for the GeofenceSettings to update in case it exists.
     */
    where: GeofenceSettingsWhereUniqueInput
    /**
     * In case the GeofenceSettings found by the `where` argument doesn't exist, create a new GeofenceSettings with this data.
     */
    create: XOR<GeofenceSettingsCreateInput, GeofenceSettingsUncheckedCreateInput>
    /**
     * In case the GeofenceSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeofenceSettingsUpdateInput, GeofenceSettingsUncheckedUpdateInput>
  }

  /**
   * GeofenceSettings delete
   */
  export type GeofenceSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
    /**
     * Filter which GeofenceSettings to delete.
     */
    where: GeofenceSettingsWhereUniqueInput
  }

  /**
   * GeofenceSettings deleteMany
   */
  export type GeofenceSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeofenceSettings to delete
     */
    where?: GeofenceSettingsWhereInput
    /**
     * Limit how many GeofenceSettings to delete.
     */
    limit?: number
  }

  /**
   * GeofenceSettings without action
   */
  export type GeofenceSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeofenceSettings
     */
    select?: GeofenceSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeofenceSettings
     */
    omit?: GeofenceSettingsOmit<ExtArgs> | null
  }


  /**
   * Model ClassLocation
   */

  export type AggregateClassLocation = {
    _count: ClassLocationCountAggregateOutputType | null
    _avg: ClassLocationAvgAggregateOutputType | null
    _sum: ClassLocationSumAggregateOutputType | null
    _min: ClassLocationMinAggregateOutputType | null
    _max: ClassLocationMaxAggregateOutputType | null
  }

  export type ClassLocationAvgAggregateOutputType = {
    id: number | null
    classId: number | null
    latitude: number | null
    longitude: number | null
    radius: number | null
  }

  export type ClassLocationSumAggregateOutputType = {
    id: number | null
    classId: number | null
    latitude: number | null
    longitude: number | null
    radius: number | null
  }

  export type ClassLocationMinAggregateOutputType = {
    id: number | null
    classId: number | null
    name: string | null
    latitude: number | null
    longitude: number | null
    radius: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassLocationMaxAggregateOutputType = {
    id: number | null
    classId: number | null
    name: string | null
    latitude: number | null
    longitude: number | null
    radius: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassLocationCountAggregateOutputType = {
    id: number
    classId: number
    name: number
    latitude: number
    longitude: number
    radius: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClassLocationAvgAggregateInputType = {
    id?: true
    classId?: true
    latitude?: true
    longitude?: true
    radius?: true
  }

  export type ClassLocationSumAggregateInputType = {
    id?: true
    classId?: true
    latitude?: true
    longitude?: true
    radius?: true
  }

  export type ClassLocationMinAggregateInputType = {
    id?: true
    classId?: true
    name?: true
    latitude?: true
    longitude?: true
    radius?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassLocationMaxAggregateInputType = {
    id?: true
    classId?: true
    name?: true
    latitude?: true
    longitude?: true
    radius?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassLocationCountAggregateInputType = {
    id?: true
    classId?: true
    name?: true
    latitude?: true
    longitude?: true
    radius?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClassLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassLocation to aggregate.
     */
    where?: ClassLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassLocations to fetch.
     */
    orderBy?: ClassLocationOrderByWithRelationInput | ClassLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClassLocations
    **/
    _count?: true | ClassLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassLocationMaxAggregateInputType
  }

  export type GetClassLocationAggregateType<T extends ClassLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateClassLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassLocation[P]>
      : GetScalarType<T[P], AggregateClassLocation[P]>
  }




  export type ClassLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassLocationWhereInput
    orderBy?: ClassLocationOrderByWithAggregationInput | ClassLocationOrderByWithAggregationInput[]
    by: ClassLocationScalarFieldEnum[] | ClassLocationScalarFieldEnum
    having?: ClassLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassLocationCountAggregateInputType | true
    _avg?: ClassLocationAvgAggregateInputType
    _sum?: ClassLocationSumAggregateInputType
    _min?: ClassLocationMinAggregateInputType
    _max?: ClassLocationMaxAggregateInputType
  }

  export type ClassLocationGroupByOutputType = {
    id: number
    classId: number
    name: string
    latitude: number
    longitude: number
    radius: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ClassLocationCountAggregateOutputType | null
    _avg: ClassLocationAvgAggregateOutputType | null
    _sum: ClassLocationSumAggregateOutputType | null
    _min: ClassLocationMinAggregateOutputType | null
    _max: ClassLocationMaxAggregateOutputType | null
  }

  type GetClassLocationGroupByPayload<T extends ClassLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassLocationGroupByOutputType[P]>
            : GetScalarType<T[P], ClassLocationGroupByOutputType[P]>
        }
      >
    >


  export type ClassLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    name?: boolean
    latitude?: boolean
    longitude?: boolean
    radius?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classLocation"]>

  export type ClassLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    name?: boolean
    latitude?: boolean
    longitude?: boolean
    radius?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classLocation"]>

  export type ClassLocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    name?: boolean
    latitude?: boolean
    longitude?: boolean
    radius?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classLocation"]>

  export type ClassLocationSelectScalar = {
    id?: boolean
    classId?: boolean
    name?: boolean
    latitude?: boolean
    longitude?: boolean
    radius?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClassLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "classId" | "name" | "latitude" | "longitude" | "radius" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["classLocation"]>
  export type ClassLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type ClassLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type ClassLocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $ClassLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClassLocation"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      classId: number
      name: string
      latitude: number
      longitude: number
      radius: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["classLocation"]>
    composites: {}
  }

  type ClassLocationGetPayload<S extends boolean | null | undefined | ClassLocationDefaultArgs> = $Result.GetResult<Prisma.$ClassLocationPayload, S>

  type ClassLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassLocationCountAggregateInputType | true
    }

  export interface ClassLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClassLocation'], meta: { name: 'ClassLocation' } }
    /**
     * Find zero or one ClassLocation that matches the filter.
     * @param {ClassLocationFindUniqueArgs} args - Arguments to find a ClassLocation
     * @example
     * // Get one ClassLocation
     * const classLocation = await prisma.classLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassLocationFindUniqueArgs>(args: SelectSubset<T, ClassLocationFindUniqueArgs<ExtArgs>>): Prisma__ClassLocationClient<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClassLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassLocationFindUniqueOrThrowArgs} args - Arguments to find a ClassLocation
     * @example
     * // Get one ClassLocation
     * const classLocation = await prisma.classLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassLocationClient<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLocationFindFirstArgs} args - Arguments to find a ClassLocation
     * @example
     * // Get one ClassLocation
     * const classLocation = await prisma.classLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassLocationFindFirstArgs>(args?: SelectSubset<T, ClassLocationFindFirstArgs<ExtArgs>>): Prisma__ClassLocationClient<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLocationFindFirstOrThrowArgs} args - Arguments to find a ClassLocation
     * @example
     * // Get one ClassLocation
     * const classLocation = await prisma.classLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassLocationClient<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClassLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClassLocations
     * const classLocations = await prisma.classLocation.findMany()
     * 
     * // Get first 10 ClassLocations
     * const classLocations = await prisma.classLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classLocationWithIdOnly = await prisma.classLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassLocationFindManyArgs>(args?: SelectSubset<T, ClassLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClassLocation.
     * @param {ClassLocationCreateArgs} args - Arguments to create a ClassLocation.
     * @example
     * // Create one ClassLocation
     * const ClassLocation = await prisma.classLocation.create({
     *   data: {
     *     // ... data to create a ClassLocation
     *   }
     * })
     * 
     */
    create<T extends ClassLocationCreateArgs>(args: SelectSubset<T, ClassLocationCreateArgs<ExtArgs>>): Prisma__ClassLocationClient<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClassLocations.
     * @param {ClassLocationCreateManyArgs} args - Arguments to create many ClassLocations.
     * @example
     * // Create many ClassLocations
     * const classLocation = await prisma.classLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassLocationCreateManyArgs>(args?: SelectSubset<T, ClassLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClassLocations and returns the data saved in the database.
     * @param {ClassLocationCreateManyAndReturnArgs} args - Arguments to create many ClassLocations.
     * @example
     * // Create many ClassLocations
     * const classLocation = await prisma.classLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClassLocations and only return the `id`
     * const classLocationWithIdOnly = await prisma.classLocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClassLocation.
     * @param {ClassLocationDeleteArgs} args - Arguments to delete one ClassLocation.
     * @example
     * // Delete one ClassLocation
     * const ClassLocation = await prisma.classLocation.delete({
     *   where: {
     *     // ... filter to delete one ClassLocation
     *   }
     * })
     * 
     */
    delete<T extends ClassLocationDeleteArgs>(args: SelectSubset<T, ClassLocationDeleteArgs<ExtArgs>>): Prisma__ClassLocationClient<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClassLocation.
     * @param {ClassLocationUpdateArgs} args - Arguments to update one ClassLocation.
     * @example
     * // Update one ClassLocation
     * const classLocation = await prisma.classLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassLocationUpdateArgs>(args: SelectSubset<T, ClassLocationUpdateArgs<ExtArgs>>): Prisma__ClassLocationClient<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClassLocations.
     * @param {ClassLocationDeleteManyArgs} args - Arguments to filter ClassLocations to delete.
     * @example
     * // Delete a few ClassLocations
     * const { count } = await prisma.classLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassLocationDeleteManyArgs>(args?: SelectSubset<T, ClassLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClassLocations
     * const classLocation = await prisma.classLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassLocationUpdateManyArgs>(args: SelectSubset<T, ClassLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassLocations and returns the data updated in the database.
     * @param {ClassLocationUpdateManyAndReturnArgs} args - Arguments to update many ClassLocations.
     * @example
     * // Update many ClassLocations
     * const classLocation = await prisma.classLocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClassLocations and only return the `id`
     * const classLocationWithIdOnly = await prisma.classLocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassLocationUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClassLocation.
     * @param {ClassLocationUpsertArgs} args - Arguments to update or create a ClassLocation.
     * @example
     * // Update or create a ClassLocation
     * const classLocation = await prisma.classLocation.upsert({
     *   create: {
     *     // ... data to create a ClassLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClassLocation we want to update
     *   }
     * })
     */
    upsert<T extends ClassLocationUpsertArgs>(args: SelectSubset<T, ClassLocationUpsertArgs<ExtArgs>>): Prisma__ClassLocationClient<$Result.GetResult<Prisma.$ClassLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClassLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLocationCountArgs} args - Arguments to filter ClassLocations to count.
     * @example
     * // Count the number of ClassLocations
     * const count = await prisma.classLocation.count({
     *   where: {
     *     // ... the filter for the ClassLocations we want to count
     *   }
     * })
    **/
    count<T extends ClassLocationCountArgs>(
      args?: Subset<T, ClassLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClassLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassLocationAggregateArgs>(args: Subset<T, ClassLocationAggregateArgs>): Prisma.PrismaPromise<GetClassLocationAggregateType<T>>

    /**
     * Group by ClassLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassLocationGroupByArgs['orderBy'] }
        : { orderBy?: ClassLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClassLocation model
   */
  readonly fields: ClassLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClassLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClassLocation model
   */
  interface ClassLocationFieldRefs {
    readonly id: FieldRef<"ClassLocation", 'Int'>
    readonly classId: FieldRef<"ClassLocation", 'Int'>
    readonly name: FieldRef<"ClassLocation", 'String'>
    readonly latitude: FieldRef<"ClassLocation", 'Float'>
    readonly longitude: FieldRef<"ClassLocation", 'Float'>
    readonly radius: FieldRef<"ClassLocation", 'Int'>
    readonly isActive: FieldRef<"ClassLocation", 'Boolean'>
    readonly createdAt: FieldRef<"ClassLocation", 'DateTime'>
    readonly updatedAt: FieldRef<"ClassLocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClassLocation findUnique
   */
  export type ClassLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationInclude<ExtArgs> | null
    /**
     * Filter, which ClassLocation to fetch.
     */
    where: ClassLocationWhereUniqueInput
  }

  /**
   * ClassLocation findUniqueOrThrow
   */
  export type ClassLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationInclude<ExtArgs> | null
    /**
     * Filter, which ClassLocation to fetch.
     */
    where: ClassLocationWhereUniqueInput
  }

  /**
   * ClassLocation findFirst
   */
  export type ClassLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationInclude<ExtArgs> | null
    /**
     * Filter, which ClassLocation to fetch.
     */
    where?: ClassLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassLocations to fetch.
     */
    orderBy?: ClassLocationOrderByWithRelationInput | ClassLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassLocations.
     */
    cursor?: ClassLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassLocations.
     */
    distinct?: ClassLocationScalarFieldEnum | ClassLocationScalarFieldEnum[]
  }

  /**
   * ClassLocation findFirstOrThrow
   */
  export type ClassLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationInclude<ExtArgs> | null
    /**
     * Filter, which ClassLocation to fetch.
     */
    where?: ClassLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassLocations to fetch.
     */
    orderBy?: ClassLocationOrderByWithRelationInput | ClassLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassLocations.
     */
    cursor?: ClassLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassLocations.
     */
    distinct?: ClassLocationScalarFieldEnum | ClassLocationScalarFieldEnum[]
  }

  /**
   * ClassLocation findMany
   */
  export type ClassLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationInclude<ExtArgs> | null
    /**
     * Filter, which ClassLocations to fetch.
     */
    where?: ClassLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassLocations to fetch.
     */
    orderBy?: ClassLocationOrderByWithRelationInput | ClassLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClassLocations.
     */
    cursor?: ClassLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassLocations.
     */
    skip?: number
    distinct?: ClassLocationScalarFieldEnum | ClassLocationScalarFieldEnum[]
  }

  /**
   * ClassLocation create
   */
  export type ClassLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a ClassLocation.
     */
    data: XOR<ClassLocationCreateInput, ClassLocationUncheckedCreateInput>
  }

  /**
   * ClassLocation createMany
   */
  export type ClassLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClassLocations.
     */
    data: ClassLocationCreateManyInput | ClassLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClassLocation createManyAndReturn
   */
  export type ClassLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * The data used to create many ClassLocations.
     */
    data: ClassLocationCreateManyInput | ClassLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassLocation update
   */
  export type ClassLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a ClassLocation.
     */
    data: XOR<ClassLocationUpdateInput, ClassLocationUncheckedUpdateInput>
    /**
     * Choose, which ClassLocation to update.
     */
    where: ClassLocationWhereUniqueInput
  }

  /**
   * ClassLocation updateMany
   */
  export type ClassLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClassLocations.
     */
    data: XOR<ClassLocationUpdateManyMutationInput, ClassLocationUncheckedUpdateManyInput>
    /**
     * Filter which ClassLocations to update
     */
    where?: ClassLocationWhereInput
    /**
     * Limit how many ClassLocations to update.
     */
    limit?: number
  }

  /**
   * ClassLocation updateManyAndReturn
   */
  export type ClassLocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * The data used to update ClassLocations.
     */
    data: XOR<ClassLocationUpdateManyMutationInput, ClassLocationUncheckedUpdateManyInput>
    /**
     * Filter which ClassLocations to update
     */
    where?: ClassLocationWhereInput
    /**
     * Limit how many ClassLocations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassLocation upsert
   */
  export type ClassLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the ClassLocation to update in case it exists.
     */
    where: ClassLocationWhereUniqueInput
    /**
     * In case the ClassLocation found by the `where` argument doesn't exist, create a new ClassLocation with this data.
     */
    create: XOR<ClassLocationCreateInput, ClassLocationUncheckedCreateInput>
    /**
     * In case the ClassLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassLocationUpdateInput, ClassLocationUncheckedUpdateInput>
  }

  /**
   * ClassLocation delete
   */
  export type ClassLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationInclude<ExtArgs> | null
    /**
     * Filter which ClassLocation to delete.
     */
    where: ClassLocationWhereUniqueInput
  }

  /**
   * ClassLocation deleteMany
   */
  export type ClassLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassLocations to delete
     */
    where?: ClassLocationWhereInput
    /**
     * Limit how many ClassLocations to delete.
     */
    limit?: number
  }

  /**
   * ClassLocation without action
   */
  export type ClassLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLocation
     */
    select?: ClassLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLocation
     */
    omit?: ClassLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLocationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    status: 'status',
    phone: 'phone',
    avatarUrl: 'avatarUrl',
    lastSeen: 'lastSeen',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    adminLevel: 'adminLevel',
    permissions: 'permissions',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const StaffScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    employeeId: 'employeeId',
    department: 'department',
    position: 'position',
    joinDate: 'joinDate',
    salary: 'salary',
    officeLocation: 'officeLocation',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    studentId: 'studentId',
    class: 'class',
    section: 'section',
    year: 'year',
    enrollmentDate: 'enrollmentDate',
    gpa: 'gpa',
    parentEmail: 'parentEmail',
    parentPhone: 'parentPhone',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    subject: 'subject',
    description: 'description',
    facultyId: 'facultyId',
    room: 'room',
    capacity: 'capacity',
    schedule: 'schedule',
    department: 'department',
    semester: 'semester',
    academicYear: 'academicYear',
    credits: 'credits',
    classType: 'classType',
    latitude: 'latitude',
    longitude: 'longitude',
    geofenceRadius: 'geofenceRadius',
    geofenceEnabled: 'geofenceEnabled',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const ClassEnrollmentScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    classId: 'classId',
    enrollmentDate: 'enrollmentDate',
    status: 'status',
    grade: 'grade',
    createdAt: 'createdAt'
  };

  export type ClassEnrollmentScalarFieldEnum = (typeof ClassEnrollmentScalarFieldEnum)[keyof typeof ClassEnrollmentScalarFieldEnum]


  export const AttendanceRecordScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    classId: 'classId',
    sessionDate: 'sessionDate',
    sessionTime: 'sessionTime',
    status: 'status',
    checkInTime: 'checkInTime',
    method: 'method',
    qrSessionId: 'qrSessionId',
    scanTimestamp: 'scanTimestamp',
    isJustified: 'isJustified',
    justificationId: 'justificationId',
    studentLatitude: 'studentLatitude',
    studentLongitude: 'studentLongitude',
    distanceFromClass: 'distanceFromClass',
    locationVerified: 'locationVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    recordedBy: 'recordedBy'
  };

  export type AttendanceRecordScalarFieldEnum = (typeof AttendanceRecordScalarFieldEnum)[keyof typeof AttendanceRecordScalarFieldEnum]


  export const AttendanceSessionScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    classId: 'classId',
    createdBy: 'createdBy',
    sessionDate: 'sessionDate',
    sessionTime: 'sessionTime',
    sessionType: 'sessionType',
    location: 'location',
    plannedTopic: 'plannedTopic',
    targetLearning: 'targetLearning',
    targetLevel: 'targetLevel',
    planningStatus: 'planningStatus',
    notes: 'notes',
    latitude: 'latitude',
    longitude: 'longitude',
    geofenceRadius: 'geofenceRadius',
    expiresAt: 'expiresAt',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AttendanceSessionScalarFieldEnum = (typeof AttendanceSessionScalarFieldEnum)[keyof typeof AttendanceSessionScalarFieldEnum]


  export const QRSessionScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    attendanceSessionId: 'attendanceSessionId',
    qrData: 'qrData',
    scanCount: 'scanCount',
    maxScans: 'maxScans',
    expiresAt: 'expiresAt',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type QRSessionScalarFieldEnum = (typeof QRSessionScalarFieldEnum)[keyof typeof QRSessionScalarFieldEnum]


  export const AbsenceJustificationScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    classId: 'classId',
    attendanceRecordId: 'attendanceRecordId',
    absenceDate: 'absenceDate',
    reason: 'reason',
    description: 'description',
    documents: 'documents',
    status: 'status',
    submittedAt: 'submittedAt',
    reviewedAt: 'reviewedAt',
    reviewedBy: 'reviewedBy',
    reviewNote: 'reviewNote',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AbsenceJustificationScalarFieldEnum = (typeof AbsenceJustificationScalarFieldEnum)[keyof typeof AbsenceJustificationScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    headId: 'headId',
    type: 'type',
    status: 'status',
    programsCount: 'programsCount',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    read: 'read',
    priority: 'priority',
    data: 'data',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const StudentRiskTrackingScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    riskLevel: 'riskLevel',
    attendanceRate: 'attendanceRate',
    consecutiveAbsences: 'consecutiveAbsences',
    totalAbsences: 'totalAbsences',
    lastAttendanceDate: 'lastAttendanceDate',
    parentEmail: 'parentEmail',
    parentPhone: 'parentPhone',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StudentRiskTrackingScalarFieldEnum = (typeof StudentRiskTrackingScalarFieldEnum)[keyof typeof StudentRiskTrackingScalarFieldEnum]


  export const StudentAlertScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    alertType: 'alertType',
    message: 'message',
    recipient: 'recipient',
    status: 'status',
    sentBy: 'sentBy',
    sentAt: 'sentAt',
    createdAt: 'createdAt'
  };

  export type StudentAlertScalarFieldEnum = (typeof StudentAlertScalarFieldEnum)[keyof typeof StudentAlertScalarFieldEnum]


  export const StudentPointScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    classId: 'classId',
    points: 'points',
    pointType: 'pointType',
    description: 'description',
    referenceId: 'referenceId',
    awardedBy: 'awardedBy',
    createdAt: 'createdAt'
  };

  export type StudentPointScalarFieldEnum = (typeof StudentPointScalarFieldEnum)[keyof typeof StudentPointScalarFieldEnum]


  export const AchievementScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    icon: 'icon',
    pointsReward: 'pointsReward',
    requirementType: 'requirementType',
    requirementValue: 'requirementValue',
    requirementPeriod: 'requirementPeriod',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type AchievementScalarFieldEnum = (typeof AchievementScalarFieldEnum)[keyof typeof AchievementScalarFieldEnum]


  export const StudentAchievementScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    achievementId: 'achievementId',
    progress: 'progress',
    isEarned: 'isEarned',
    earnedAt: 'earnedAt',
    createdAt: 'createdAt'
  };

  export type StudentAchievementScalarFieldEnum = (typeof StudentAchievementScalarFieldEnum)[keyof typeof StudentAchievementScalarFieldEnum]


  export const StudentStreakScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    classId: 'classId',
    currentStreak: 'currentStreak',
    longestStreak: 'longestStreak',
    lastAttendanceDate: 'lastAttendanceDate',
    streakStartDate: 'streakStartDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StudentStreakScalarFieldEnum = (typeof StudentStreakScalarFieldEnum)[keyof typeof StudentStreakScalarFieldEnum]


  export const LeaderboardRankingScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    classId: 'classId',
    departmentId: 'departmentId',
    period: 'period',
    scope: 'scope',
    rankPosition: 'rankPosition',
    totalPoints: 'totalPoints',
    attendanceRate: 'attendanceRate',
    streakDays: 'streakDays',
    achievementsCount: 'achievementsCount',
    periodStart: 'periodStart',
    periodEnd: 'periodEnd',
    createdAt: 'createdAt'
  };

  export type LeaderboardRankingScalarFieldEnum = (typeof LeaderboardRankingScalarFieldEnum)[keyof typeof LeaderboardRankingScalarFieldEnum]


  export const GeofenceSettingsScalarFieldEnum: {
    id: 'id',
    defaultRadius: 'defaultRadius',
    enabled: 'enabled',
    allowOverride: 'allowOverride',
    accuracyThreshold: 'accuracyThreshold',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GeofenceSettingsScalarFieldEnum = (typeof GeofenceSettingsScalarFieldEnum)[keyof typeof GeofenceSettingsScalarFieldEnum]


  export const ClassLocationScalarFieldEnum: {
    id: 'id',
    classId: 'classId',
    name: 'name',
    latitude: 'latitude',
    longitude: 'longitude',
    radius: 'radius',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClassLocationScalarFieldEnum = (typeof ClassLocationScalarFieldEnum)[keyof typeof ClassLocationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AttendanceStatus'
   */
  export type EnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus'>
    


  /**
   * Reference to a field of type 'AttendanceStatus[]'
   */
  export type ListEnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus[]'>
    


  /**
   * Reference to a field of type 'AttendanceMethod'
   */
  export type EnumAttendanceMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceMethod'>
    


  /**
   * Reference to a field of type 'AttendanceMethod[]'
   */
  export type ListEnumAttendanceMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceMethod[]'>
    


  /**
   * Reference to a field of type 'SessionType'
   */
  export type EnumSessionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionType'>
    


  /**
   * Reference to a field of type 'SessionType[]'
   */
  export type ListEnumSessionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionType[]'>
    


  /**
   * Reference to a field of type 'PlanningStatus'
   */
  export type EnumPlanningStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanningStatus'>
    


  /**
   * Reference to a field of type 'PlanningStatus[]'
   */
  export type ListEnumPlanningStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanningStatus[]'>
    


  /**
   * Reference to a field of type 'JustificationReason'
   */
  export type EnumJustificationReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JustificationReason'>
    


  /**
   * Reference to a field of type 'JustificationReason[]'
   */
  export type ListEnumJustificationReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JustificationReason[]'>
    


  /**
   * Reference to a field of type 'JustificationStatus'
   */
  export type EnumJustificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JustificationStatus'>
    


  /**
   * Reference to a field of type 'JustificationStatus[]'
   */
  export type ListEnumJustificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JustificationStatus[]'>
    


  /**
   * Reference to a field of type 'DepartmentType'
   */
  export type EnumDepartmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DepartmentType'>
    


  /**
   * Reference to a field of type 'DepartmentType[]'
   */
  export type ListEnumDepartmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DepartmentType[]'>
    


  /**
   * Reference to a field of type 'DepartmentStatus'
   */
  export type EnumDepartmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DepartmentStatus'>
    


  /**
   * Reference to a field of type 'DepartmentStatus[]'
   */
  export type ListEnumDepartmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DepartmentStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'NotificationPriority'
   */
  export type EnumNotificationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationPriority'>
    


  /**
   * Reference to a field of type 'NotificationPriority[]'
   */
  export type ListEnumNotificationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationPriority[]'>
    


  /**
   * Reference to a field of type 'RiskLevel'
   */
  export type EnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel'>
    


  /**
   * Reference to a field of type 'RiskLevel[]'
   */
  export type ListEnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel[]'>
    


  /**
   * Reference to a field of type 'AlertType'
   */
  export type EnumAlertTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertType'>
    


  /**
   * Reference to a field of type 'AlertType[]'
   */
  export type ListEnumAlertTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertType[]'>
    


  /**
   * Reference to a field of type 'AlertStatus'
   */
  export type EnumAlertStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertStatus'>
    


  /**
   * Reference to a field of type 'AlertStatus[]'
   */
  export type ListEnumAlertStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    phone?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    lastSeen?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
    staff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    student?: XOR<StudentNullableScalarRelationFilter, StudentWhereInput> | null
    notifications?: NotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    status?: SortOrder
    phone?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    lastSeen?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    admin?: AdminOrderByWithRelationInput
    staff?: StaffOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    phone?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    lastSeen?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
    staff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    student?: XOR<StudentNullableScalarRelationFilter, StudentWhereInput> | null
    notifications?: NotificationListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    status?: SortOrder
    phone?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    lastSeen?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastSeen?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    userId?: IntFilter<"Admin"> | number
    adminLevel?: StringFilter<"Admin"> | string
    permissions?: JsonNullableFilter<"Admin">
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    adminLevel?: SortOrder
    permissions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    adminLevel?: StringFilter<"Admin"> | string
    permissions?: JsonNullableFilter<"Admin">
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    adminLevel?: SortOrder
    permissions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    userId?: IntWithAggregatesFilter<"Admin"> | number
    adminLevel?: StringWithAggregatesFilter<"Admin"> | string
    permissions?: JsonNullableWithAggregatesFilter<"Admin">
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
  }

  export type StaffWhereInput = {
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    id?: IntFilter<"Staff"> | number
    userId?: IntFilter<"Staff"> | number
    employeeId?: StringFilter<"Staff"> | string
    department?: StringNullableFilter<"Staff"> | string | null
    position?: StringNullableFilter<"Staff"> | string | null
    joinDate?: DateTimeNullableFilter<"Staff"> | Date | string | null
    salary?: DecimalNullableFilter<"Staff"> | Decimal | DecimalJsLike | number | string | null
    officeLocation?: StringNullableFilter<"Staff"> | string | null
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    classes?: ClassListRelationFilter
    attendanceSessions?: AttendanceSessionListRelationFilter
    attendanceRecords?: AttendanceRecordListRelationFilter
    absenceJustifications?: AbsenceJustificationListRelationFilter
    departments?: DepartmentListRelationFilter
    studentAlerts?: StudentAlertListRelationFilter
  }

  export type StaffOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    joinDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    officeLocation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    classes?: ClassOrderByRelationAggregateInput
    attendanceSessions?: AttendanceSessionOrderByRelationAggregateInput
    attendanceRecords?: AttendanceRecordOrderByRelationAggregateInput
    absenceJustifications?: AbsenceJustificationOrderByRelationAggregateInput
    departments?: DepartmentOrderByRelationAggregateInput
    studentAlerts?: StudentAlertOrderByRelationAggregateInput
  }

  export type StaffWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    employeeId?: string
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    department?: StringNullableFilter<"Staff"> | string | null
    position?: StringNullableFilter<"Staff"> | string | null
    joinDate?: DateTimeNullableFilter<"Staff"> | Date | string | null
    salary?: DecimalNullableFilter<"Staff"> | Decimal | DecimalJsLike | number | string | null
    officeLocation?: StringNullableFilter<"Staff"> | string | null
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    classes?: ClassListRelationFilter
    attendanceSessions?: AttendanceSessionListRelationFilter
    attendanceRecords?: AttendanceRecordListRelationFilter
    absenceJustifications?: AbsenceJustificationListRelationFilter
    departments?: DepartmentListRelationFilter
    studentAlerts?: StudentAlertListRelationFilter
  }, "id" | "userId" | "employeeId">

  export type StaffOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    joinDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    officeLocation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StaffCountOrderByAggregateInput
    _avg?: StaffAvgOrderByAggregateInput
    _max?: StaffMaxOrderByAggregateInput
    _min?: StaffMinOrderByAggregateInput
    _sum?: StaffSumOrderByAggregateInput
  }

  export type StaffScalarWhereWithAggregatesInput = {
    AND?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    OR?: StaffScalarWhereWithAggregatesInput[]
    NOT?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Staff"> | number
    userId?: IntWithAggregatesFilter<"Staff"> | number
    employeeId?: StringWithAggregatesFilter<"Staff"> | string
    department?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    position?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    joinDate?: DateTimeNullableWithAggregatesFilter<"Staff"> | Date | string | null
    salary?: DecimalNullableWithAggregatesFilter<"Staff"> | Decimal | DecimalJsLike | number | string | null
    officeLocation?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: IntFilter<"Student"> | number
    userId?: IntFilter<"Student"> | number
    studentId?: StringFilter<"Student"> | string
    class?: StringNullableFilter<"Student"> | string | null
    section?: StringNullableFilter<"Student"> | string | null
    year?: StringNullableFilter<"Student"> | string | null
    enrollmentDate?: DateTimeNullableFilter<"Student"> | Date | string | null
    gpa?: DecimalNullableFilter<"Student"> | Decimal | DecimalJsLike | number | string | null
    parentEmail?: StringNullableFilter<"Student"> | string | null
    parentPhone?: StringNullableFilter<"Student"> | string | null
    address?: StringNullableFilter<"Student"> | string | null
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    classEnrollments?: ClassEnrollmentListRelationFilter
    attendanceRecords?: AttendanceRecordListRelationFilter
    absenceJustifications?: AbsenceJustificationListRelationFilter
    studentRiskTracking?: StudentRiskTrackingListRelationFilter
    studentAlerts?: StudentAlertListRelationFilter
    studentPoints?: StudentPointListRelationFilter
    studentAchievements?: StudentAchievementListRelationFilter
    studentStreaks?: StudentStreakListRelationFilter
    leaderboardRankings?: LeaderboardRankingListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    studentId?: SortOrder
    class?: SortOrderInput | SortOrder
    section?: SortOrderInput | SortOrder
    year?: SortOrderInput | SortOrder
    enrollmentDate?: SortOrderInput | SortOrder
    gpa?: SortOrderInput | SortOrder
    parentEmail?: SortOrderInput | SortOrder
    parentPhone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    classEnrollments?: ClassEnrollmentOrderByRelationAggregateInput
    attendanceRecords?: AttendanceRecordOrderByRelationAggregateInput
    absenceJustifications?: AbsenceJustificationOrderByRelationAggregateInput
    studentRiskTracking?: StudentRiskTrackingOrderByRelationAggregateInput
    studentAlerts?: StudentAlertOrderByRelationAggregateInput
    studentPoints?: StudentPointOrderByRelationAggregateInput
    studentAchievements?: StudentAchievementOrderByRelationAggregateInput
    studentStreaks?: StudentStreakOrderByRelationAggregateInput
    leaderboardRankings?: LeaderboardRankingOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    studentId?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    class?: StringNullableFilter<"Student"> | string | null
    section?: StringNullableFilter<"Student"> | string | null
    year?: StringNullableFilter<"Student"> | string | null
    enrollmentDate?: DateTimeNullableFilter<"Student"> | Date | string | null
    gpa?: DecimalNullableFilter<"Student"> | Decimal | DecimalJsLike | number | string | null
    parentEmail?: StringNullableFilter<"Student"> | string | null
    parentPhone?: StringNullableFilter<"Student"> | string | null
    address?: StringNullableFilter<"Student"> | string | null
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    classEnrollments?: ClassEnrollmentListRelationFilter
    attendanceRecords?: AttendanceRecordListRelationFilter
    absenceJustifications?: AbsenceJustificationListRelationFilter
    studentRiskTracking?: StudentRiskTrackingListRelationFilter
    studentAlerts?: StudentAlertListRelationFilter
    studentPoints?: StudentPointListRelationFilter
    studentAchievements?: StudentAchievementListRelationFilter
    studentStreaks?: StudentStreakListRelationFilter
    leaderboardRankings?: LeaderboardRankingListRelationFilter
  }, "id" | "userId" | "studentId">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    studentId?: SortOrder
    class?: SortOrderInput | SortOrder
    section?: SortOrderInput | SortOrder
    year?: SortOrderInput | SortOrder
    enrollmentDate?: SortOrderInput | SortOrder
    gpa?: SortOrderInput | SortOrder
    parentEmail?: SortOrderInput | SortOrder
    parentPhone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Student"> | number
    userId?: IntWithAggregatesFilter<"Student"> | number
    studentId?: StringWithAggregatesFilter<"Student"> | string
    class?: StringNullableWithAggregatesFilter<"Student"> | string | null
    section?: StringNullableWithAggregatesFilter<"Student"> | string | null
    year?: StringNullableWithAggregatesFilter<"Student"> | string | null
    enrollmentDate?: DateTimeNullableWithAggregatesFilter<"Student"> | Date | string | null
    gpa?: DecimalNullableWithAggregatesFilter<"Student"> | Decimal | DecimalJsLike | number | string | null
    parentEmail?: StringNullableWithAggregatesFilter<"Student"> | string | null
    parentPhone?: StringNullableWithAggregatesFilter<"Student"> | string | null
    address?: StringNullableWithAggregatesFilter<"Student"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: IntFilter<"Class"> | number
    name?: StringFilter<"Class"> | string
    code?: StringFilter<"Class"> | string
    subject?: StringFilter<"Class"> | string
    description?: StringNullableFilter<"Class"> | string | null
    facultyId?: IntNullableFilter<"Class"> | number | null
    room?: StringNullableFilter<"Class"> | string | null
    capacity?: IntNullableFilter<"Class"> | number | null
    schedule?: StringNullableFilter<"Class"> | string | null
    department?: StringNullableFilter<"Class"> | string | null
    semester?: StringNullableFilter<"Class"> | string | null
    academicYear?: StringNullableFilter<"Class"> | string | null
    credits?: IntNullableFilter<"Class"> | number | null
    classType?: StringNullableFilter<"Class"> | string | null
    latitude?: FloatNullableFilter<"Class"> | number | null
    longitude?: FloatNullableFilter<"Class"> | number | null
    geofenceRadius?: IntNullableFilter<"Class"> | number | null
    geofenceEnabled?: BoolNullableFilter<"Class"> | boolean | null
    status?: StringNullableFilter<"Class"> | string | null
    createdAt?: DateTimeFilter<"Class"> | Date | string
    updatedAt?: DateTimeFilter<"Class"> | Date | string
    faculty?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    classEnrollments?: ClassEnrollmentListRelationFilter
    attendanceRecords?: AttendanceRecordListRelationFilter
    attendanceSessions?: AttendanceSessionListRelationFilter
    absenceJustifications?: AbsenceJustificationListRelationFilter
    studentPoints?: StudentPointListRelationFilter
    studentStreaks?: StudentStreakListRelationFilter
    leaderboardRankings?: LeaderboardRankingListRelationFilter
    classLocations?: ClassLocationListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    subject?: SortOrder
    description?: SortOrderInput | SortOrder
    facultyId?: SortOrderInput | SortOrder
    room?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    schedule?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    semester?: SortOrderInput | SortOrder
    academicYear?: SortOrderInput | SortOrder
    credits?: SortOrderInput | SortOrder
    classType?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    geofenceRadius?: SortOrderInput | SortOrder
    geofenceEnabled?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    faculty?: StaffOrderByWithRelationInput
    classEnrollments?: ClassEnrollmentOrderByRelationAggregateInput
    attendanceRecords?: AttendanceRecordOrderByRelationAggregateInput
    attendanceSessions?: AttendanceSessionOrderByRelationAggregateInput
    absenceJustifications?: AbsenceJustificationOrderByRelationAggregateInput
    studentPoints?: StudentPointOrderByRelationAggregateInput
    studentStreaks?: StudentStreakOrderByRelationAggregateInput
    leaderboardRankings?: LeaderboardRankingOrderByRelationAggregateInput
    classLocations?: ClassLocationOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    name?: StringFilter<"Class"> | string
    subject?: StringFilter<"Class"> | string
    description?: StringNullableFilter<"Class"> | string | null
    facultyId?: IntNullableFilter<"Class"> | number | null
    room?: StringNullableFilter<"Class"> | string | null
    capacity?: IntNullableFilter<"Class"> | number | null
    schedule?: StringNullableFilter<"Class"> | string | null
    department?: StringNullableFilter<"Class"> | string | null
    semester?: StringNullableFilter<"Class"> | string | null
    academicYear?: StringNullableFilter<"Class"> | string | null
    credits?: IntNullableFilter<"Class"> | number | null
    classType?: StringNullableFilter<"Class"> | string | null
    latitude?: FloatNullableFilter<"Class"> | number | null
    longitude?: FloatNullableFilter<"Class"> | number | null
    geofenceRadius?: IntNullableFilter<"Class"> | number | null
    geofenceEnabled?: BoolNullableFilter<"Class"> | boolean | null
    status?: StringNullableFilter<"Class"> | string | null
    createdAt?: DateTimeFilter<"Class"> | Date | string
    updatedAt?: DateTimeFilter<"Class"> | Date | string
    faculty?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    classEnrollments?: ClassEnrollmentListRelationFilter
    attendanceRecords?: AttendanceRecordListRelationFilter
    attendanceSessions?: AttendanceSessionListRelationFilter
    absenceJustifications?: AbsenceJustificationListRelationFilter
    studentPoints?: StudentPointListRelationFilter
    studentStreaks?: StudentStreakListRelationFilter
    leaderboardRankings?: LeaderboardRankingListRelationFilter
    classLocations?: ClassLocationListRelationFilter
  }, "id" | "code">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    subject?: SortOrder
    description?: SortOrderInput | SortOrder
    facultyId?: SortOrderInput | SortOrder
    room?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    schedule?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    semester?: SortOrderInput | SortOrder
    academicYear?: SortOrderInput | SortOrder
    credits?: SortOrderInput | SortOrder
    classType?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    geofenceRadius?: SortOrderInput | SortOrder
    geofenceEnabled?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Class"> | number
    name?: StringWithAggregatesFilter<"Class"> | string
    code?: StringWithAggregatesFilter<"Class"> | string
    subject?: StringWithAggregatesFilter<"Class"> | string
    description?: StringNullableWithAggregatesFilter<"Class"> | string | null
    facultyId?: IntNullableWithAggregatesFilter<"Class"> | number | null
    room?: StringNullableWithAggregatesFilter<"Class"> | string | null
    capacity?: IntNullableWithAggregatesFilter<"Class"> | number | null
    schedule?: StringNullableWithAggregatesFilter<"Class"> | string | null
    department?: StringNullableWithAggregatesFilter<"Class"> | string | null
    semester?: StringNullableWithAggregatesFilter<"Class"> | string | null
    academicYear?: StringNullableWithAggregatesFilter<"Class"> | string | null
    credits?: IntNullableWithAggregatesFilter<"Class"> | number | null
    classType?: StringNullableWithAggregatesFilter<"Class"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"Class"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"Class"> | number | null
    geofenceRadius?: IntNullableWithAggregatesFilter<"Class"> | number | null
    geofenceEnabled?: BoolNullableWithAggregatesFilter<"Class"> | boolean | null
    status?: StringNullableWithAggregatesFilter<"Class"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Class"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Class"> | Date | string
  }

  export type ClassEnrollmentWhereInput = {
    AND?: ClassEnrollmentWhereInput | ClassEnrollmentWhereInput[]
    OR?: ClassEnrollmentWhereInput[]
    NOT?: ClassEnrollmentWhereInput | ClassEnrollmentWhereInput[]
    id?: IntFilter<"ClassEnrollment"> | number
    studentId?: IntFilter<"ClassEnrollment"> | number
    classId?: IntFilter<"ClassEnrollment"> | number
    enrollmentDate?: DateTimeFilter<"ClassEnrollment"> | Date | string
    status?: StringNullableFilter<"ClassEnrollment"> | string | null
    grade?: StringNullableFilter<"ClassEnrollment"> | string | null
    createdAt?: DateTimeFilter<"ClassEnrollment"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
  }

  export type ClassEnrollmentOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
  }

  export type ClassEnrollmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId_classId?: ClassEnrollmentStudentIdClassIdCompoundUniqueInput
    AND?: ClassEnrollmentWhereInput | ClassEnrollmentWhereInput[]
    OR?: ClassEnrollmentWhereInput[]
    NOT?: ClassEnrollmentWhereInput | ClassEnrollmentWhereInput[]
    studentId?: IntFilter<"ClassEnrollment"> | number
    classId?: IntFilter<"ClassEnrollment"> | number
    enrollmentDate?: DateTimeFilter<"ClassEnrollment"> | Date | string
    status?: StringNullableFilter<"ClassEnrollment"> | string | null
    grade?: StringNullableFilter<"ClassEnrollment"> | string | null
    createdAt?: DateTimeFilter<"ClassEnrollment"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
  }, "id" | "studentId_classId">

  export type ClassEnrollmentOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ClassEnrollmentCountOrderByAggregateInput
    _avg?: ClassEnrollmentAvgOrderByAggregateInput
    _max?: ClassEnrollmentMaxOrderByAggregateInput
    _min?: ClassEnrollmentMinOrderByAggregateInput
    _sum?: ClassEnrollmentSumOrderByAggregateInput
  }

  export type ClassEnrollmentScalarWhereWithAggregatesInput = {
    AND?: ClassEnrollmentScalarWhereWithAggregatesInput | ClassEnrollmentScalarWhereWithAggregatesInput[]
    OR?: ClassEnrollmentScalarWhereWithAggregatesInput[]
    NOT?: ClassEnrollmentScalarWhereWithAggregatesInput | ClassEnrollmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClassEnrollment"> | number
    studentId?: IntWithAggregatesFilter<"ClassEnrollment"> | number
    classId?: IntWithAggregatesFilter<"ClassEnrollment"> | number
    enrollmentDate?: DateTimeWithAggregatesFilter<"ClassEnrollment"> | Date | string
    status?: StringNullableWithAggregatesFilter<"ClassEnrollment"> | string | null
    grade?: StringNullableWithAggregatesFilter<"ClassEnrollment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ClassEnrollment"> | Date | string
  }

  export type AttendanceRecordWhereInput = {
    AND?: AttendanceRecordWhereInput | AttendanceRecordWhereInput[]
    OR?: AttendanceRecordWhereInput[]
    NOT?: AttendanceRecordWhereInput | AttendanceRecordWhereInput[]
    id?: IntFilter<"AttendanceRecord"> | number
    studentId?: IntFilter<"AttendanceRecord"> | number
    classId?: IntFilter<"AttendanceRecord"> | number
    sessionDate?: DateTimeFilter<"AttendanceRecord"> | Date | string
    sessionTime?: DateTimeNullableFilter<"AttendanceRecord"> | Date | string | null
    status?: EnumAttendanceStatusFilter<"AttendanceRecord"> | $Enums.AttendanceStatus
    checkInTime?: DateTimeNullableFilter<"AttendanceRecord"> | Date | string | null
    method?: EnumAttendanceMethodFilter<"AttendanceRecord"> | $Enums.AttendanceMethod
    qrSessionId?: StringNullableFilter<"AttendanceRecord"> | string | null
    scanTimestamp?: DateTimeNullableFilter<"AttendanceRecord"> | Date | string | null
    isJustified?: BoolFilter<"AttendanceRecord"> | boolean
    justificationId?: IntNullableFilter<"AttendanceRecord"> | number | null
    studentLatitude?: FloatNullableFilter<"AttendanceRecord"> | number | null
    studentLongitude?: FloatNullableFilter<"AttendanceRecord"> | number | null
    distanceFromClass?: FloatNullableFilter<"AttendanceRecord"> | number | null
    locationVerified?: BoolNullableFilter<"AttendanceRecord"> | boolean | null
    createdAt?: DateTimeFilter<"AttendanceRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceRecord"> | Date | string
    recordedBy?: IntNullableFilter<"AttendanceRecord"> | number | null
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    recordedByStaff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    absenceJustifications?: AbsenceJustificationListRelationFilter
  }

  export type AttendanceRecordOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    sessionDate?: SortOrder
    sessionTime?: SortOrderInput | SortOrder
    status?: SortOrder
    checkInTime?: SortOrderInput | SortOrder
    method?: SortOrder
    qrSessionId?: SortOrderInput | SortOrder
    scanTimestamp?: SortOrderInput | SortOrder
    isJustified?: SortOrder
    justificationId?: SortOrderInput | SortOrder
    studentLatitude?: SortOrderInput | SortOrder
    studentLongitude?: SortOrderInput | SortOrder
    distanceFromClass?: SortOrderInput | SortOrder
    locationVerified?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    recordedBy?: SortOrderInput | SortOrder
    student?: StudentOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
    recordedByStaff?: StaffOrderByWithRelationInput
    absenceJustifications?: AbsenceJustificationOrderByRelationAggregateInput
  }

  export type AttendanceRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId_classId_sessionDate?: AttendanceRecordStudentIdClassIdSessionDateCompoundUniqueInput
    AND?: AttendanceRecordWhereInput | AttendanceRecordWhereInput[]
    OR?: AttendanceRecordWhereInput[]
    NOT?: AttendanceRecordWhereInput | AttendanceRecordWhereInput[]
    studentId?: IntFilter<"AttendanceRecord"> | number
    classId?: IntFilter<"AttendanceRecord"> | number
    sessionDate?: DateTimeFilter<"AttendanceRecord"> | Date | string
    sessionTime?: DateTimeNullableFilter<"AttendanceRecord"> | Date | string | null
    status?: EnumAttendanceStatusFilter<"AttendanceRecord"> | $Enums.AttendanceStatus
    checkInTime?: DateTimeNullableFilter<"AttendanceRecord"> | Date | string | null
    method?: EnumAttendanceMethodFilter<"AttendanceRecord"> | $Enums.AttendanceMethod
    qrSessionId?: StringNullableFilter<"AttendanceRecord"> | string | null
    scanTimestamp?: DateTimeNullableFilter<"AttendanceRecord"> | Date | string | null
    isJustified?: BoolFilter<"AttendanceRecord"> | boolean
    justificationId?: IntNullableFilter<"AttendanceRecord"> | number | null
    studentLatitude?: FloatNullableFilter<"AttendanceRecord"> | number | null
    studentLongitude?: FloatNullableFilter<"AttendanceRecord"> | number | null
    distanceFromClass?: FloatNullableFilter<"AttendanceRecord"> | number | null
    locationVerified?: BoolNullableFilter<"AttendanceRecord"> | boolean | null
    createdAt?: DateTimeFilter<"AttendanceRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceRecord"> | Date | string
    recordedBy?: IntNullableFilter<"AttendanceRecord"> | number | null
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    recordedByStaff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    absenceJustifications?: AbsenceJustificationListRelationFilter
  }, "id" | "studentId_classId_sessionDate">

  export type AttendanceRecordOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    sessionDate?: SortOrder
    sessionTime?: SortOrderInput | SortOrder
    status?: SortOrder
    checkInTime?: SortOrderInput | SortOrder
    method?: SortOrder
    qrSessionId?: SortOrderInput | SortOrder
    scanTimestamp?: SortOrderInput | SortOrder
    isJustified?: SortOrder
    justificationId?: SortOrderInput | SortOrder
    studentLatitude?: SortOrderInput | SortOrder
    studentLongitude?: SortOrderInput | SortOrder
    distanceFromClass?: SortOrderInput | SortOrder
    locationVerified?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    recordedBy?: SortOrderInput | SortOrder
    _count?: AttendanceRecordCountOrderByAggregateInput
    _avg?: AttendanceRecordAvgOrderByAggregateInput
    _max?: AttendanceRecordMaxOrderByAggregateInput
    _min?: AttendanceRecordMinOrderByAggregateInput
    _sum?: AttendanceRecordSumOrderByAggregateInput
  }

  export type AttendanceRecordScalarWhereWithAggregatesInput = {
    AND?: AttendanceRecordScalarWhereWithAggregatesInput | AttendanceRecordScalarWhereWithAggregatesInput[]
    OR?: AttendanceRecordScalarWhereWithAggregatesInput[]
    NOT?: AttendanceRecordScalarWhereWithAggregatesInput | AttendanceRecordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AttendanceRecord"> | number
    studentId?: IntWithAggregatesFilter<"AttendanceRecord"> | number
    classId?: IntWithAggregatesFilter<"AttendanceRecord"> | number
    sessionDate?: DateTimeWithAggregatesFilter<"AttendanceRecord"> | Date | string
    sessionTime?: DateTimeNullableWithAggregatesFilter<"AttendanceRecord"> | Date | string | null
    status?: EnumAttendanceStatusWithAggregatesFilter<"AttendanceRecord"> | $Enums.AttendanceStatus
    checkInTime?: DateTimeNullableWithAggregatesFilter<"AttendanceRecord"> | Date | string | null
    method?: EnumAttendanceMethodWithAggregatesFilter<"AttendanceRecord"> | $Enums.AttendanceMethod
    qrSessionId?: StringNullableWithAggregatesFilter<"AttendanceRecord"> | string | null
    scanTimestamp?: DateTimeNullableWithAggregatesFilter<"AttendanceRecord"> | Date | string | null
    isJustified?: BoolWithAggregatesFilter<"AttendanceRecord"> | boolean
    justificationId?: IntNullableWithAggregatesFilter<"AttendanceRecord"> | number | null
    studentLatitude?: FloatNullableWithAggregatesFilter<"AttendanceRecord"> | number | null
    studentLongitude?: FloatNullableWithAggregatesFilter<"AttendanceRecord"> | number | null
    distanceFromClass?: FloatNullableWithAggregatesFilter<"AttendanceRecord"> | number | null
    locationVerified?: BoolNullableWithAggregatesFilter<"AttendanceRecord"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"AttendanceRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AttendanceRecord"> | Date | string
    recordedBy?: IntNullableWithAggregatesFilter<"AttendanceRecord"> | number | null
  }

  export type AttendanceSessionWhereInput = {
    AND?: AttendanceSessionWhereInput | AttendanceSessionWhereInput[]
    OR?: AttendanceSessionWhereInput[]
    NOT?: AttendanceSessionWhereInput | AttendanceSessionWhereInput[]
    id?: IntFilter<"AttendanceSession"> | number
    sessionId?: StringFilter<"AttendanceSession"> | string
    classId?: IntFilter<"AttendanceSession"> | number
    createdBy?: IntFilter<"AttendanceSession"> | number
    sessionDate?: DateTimeFilter<"AttendanceSession"> | Date | string
    sessionTime?: DateTimeFilter<"AttendanceSession"> | Date | string
    sessionType?: EnumSessionTypeFilter<"AttendanceSession"> | $Enums.SessionType
    location?: StringNullableFilter<"AttendanceSession"> | string | null
    plannedTopic?: StringNullableFilter<"AttendanceSession"> | string | null
    targetLearning?: StringNullableFilter<"AttendanceSession"> | string | null
    targetLevel?: StringNullableFilter<"AttendanceSession"> | string | null
    planningStatus?: EnumPlanningStatusFilter<"AttendanceSession"> | $Enums.PlanningStatus
    notes?: StringNullableFilter<"AttendanceSession"> | string | null
    latitude?: FloatNullableFilter<"AttendanceSession"> | number | null
    longitude?: FloatNullableFilter<"AttendanceSession"> | number | null
    geofenceRadius?: IntNullableFilter<"AttendanceSession"> | number | null
    expiresAt?: DateTimeFilter<"AttendanceSession"> | Date | string
    status?: StringNullableFilter<"AttendanceSession"> | string | null
    createdAt?: DateTimeFilter<"AttendanceSession"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceSession"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    creator?: XOR<StaffScalarRelationFilter, StaffWhereInput>
    qrSessions?: QRSessionListRelationFilter
  }

  export type AttendanceSessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    classId?: SortOrder
    createdBy?: SortOrder
    sessionDate?: SortOrder
    sessionTime?: SortOrder
    sessionType?: SortOrder
    location?: SortOrderInput | SortOrder
    plannedTopic?: SortOrderInput | SortOrder
    targetLearning?: SortOrderInput | SortOrder
    targetLevel?: SortOrderInput | SortOrder
    planningStatus?: SortOrder
    notes?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    geofenceRadius?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    class?: ClassOrderByWithRelationInput
    creator?: StaffOrderByWithRelationInput
    qrSessions?: QRSessionOrderByRelationAggregateInput
  }

  export type AttendanceSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sessionId?: string
    AND?: AttendanceSessionWhereInput | AttendanceSessionWhereInput[]
    OR?: AttendanceSessionWhereInput[]
    NOT?: AttendanceSessionWhereInput | AttendanceSessionWhereInput[]
    classId?: IntFilter<"AttendanceSession"> | number
    createdBy?: IntFilter<"AttendanceSession"> | number
    sessionDate?: DateTimeFilter<"AttendanceSession"> | Date | string
    sessionTime?: DateTimeFilter<"AttendanceSession"> | Date | string
    sessionType?: EnumSessionTypeFilter<"AttendanceSession"> | $Enums.SessionType
    location?: StringNullableFilter<"AttendanceSession"> | string | null
    plannedTopic?: StringNullableFilter<"AttendanceSession"> | string | null
    targetLearning?: StringNullableFilter<"AttendanceSession"> | string | null
    targetLevel?: StringNullableFilter<"AttendanceSession"> | string | null
    planningStatus?: EnumPlanningStatusFilter<"AttendanceSession"> | $Enums.PlanningStatus
    notes?: StringNullableFilter<"AttendanceSession"> | string | null
    latitude?: FloatNullableFilter<"AttendanceSession"> | number | null
    longitude?: FloatNullableFilter<"AttendanceSession"> | number | null
    geofenceRadius?: IntNullableFilter<"AttendanceSession"> | number | null
    expiresAt?: DateTimeFilter<"AttendanceSession"> | Date | string
    status?: StringNullableFilter<"AttendanceSession"> | string | null
    createdAt?: DateTimeFilter<"AttendanceSession"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceSession"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    creator?: XOR<StaffScalarRelationFilter, StaffWhereInput>
    qrSessions?: QRSessionListRelationFilter
  }, "id" | "sessionId">

  export type AttendanceSessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    classId?: SortOrder
    createdBy?: SortOrder
    sessionDate?: SortOrder
    sessionTime?: SortOrder
    sessionType?: SortOrder
    location?: SortOrderInput | SortOrder
    plannedTopic?: SortOrderInput | SortOrder
    targetLearning?: SortOrderInput | SortOrder
    targetLevel?: SortOrderInput | SortOrder
    planningStatus?: SortOrder
    notes?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    geofenceRadius?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AttendanceSessionCountOrderByAggregateInput
    _avg?: AttendanceSessionAvgOrderByAggregateInput
    _max?: AttendanceSessionMaxOrderByAggregateInput
    _min?: AttendanceSessionMinOrderByAggregateInput
    _sum?: AttendanceSessionSumOrderByAggregateInput
  }

  export type AttendanceSessionScalarWhereWithAggregatesInput = {
    AND?: AttendanceSessionScalarWhereWithAggregatesInput | AttendanceSessionScalarWhereWithAggregatesInput[]
    OR?: AttendanceSessionScalarWhereWithAggregatesInput[]
    NOT?: AttendanceSessionScalarWhereWithAggregatesInput | AttendanceSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AttendanceSession"> | number
    sessionId?: StringWithAggregatesFilter<"AttendanceSession"> | string
    classId?: IntWithAggregatesFilter<"AttendanceSession"> | number
    createdBy?: IntWithAggregatesFilter<"AttendanceSession"> | number
    sessionDate?: DateTimeWithAggregatesFilter<"AttendanceSession"> | Date | string
    sessionTime?: DateTimeWithAggregatesFilter<"AttendanceSession"> | Date | string
    sessionType?: EnumSessionTypeWithAggregatesFilter<"AttendanceSession"> | $Enums.SessionType
    location?: StringNullableWithAggregatesFilter<"AttendanceSession"> | string | null
    plannedTopic?: StringNullableWithAggregatesFilter<"AttendanceSession"> | string | null
    targetLearning?: StringNullableWithAggregatesFilter<"AttendanceSession"> | string | null
    targetLevel?: StringNullableWithAggregatesFilter<"AttendanceSession"> | string | null
    planningStatus?: EnumPlanningStatusWithAggregatesFilter<"AttendanceSession"> | $Enums.PlanningStatus
    notes?: StringNullableWithAggregatesFilter<"AttendanceSession"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"AttendanceSession"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"AttendanceSession"> | number | null
    geofenceRadius?: IntNullableWithAggregatesFilter<"AttendanceSession"> | number | null
    expiresAt?: DateTimeWithAggregatesFilter<"AttendanceSession"> | Date | string
    status?: StringNullableWithAggregatesFilter<"AttendanceSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AttendanceSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AttendanceSession"> | Date | string
  }

  export type QRSessionWhereInput = {
    AND?: QRSessionWhereInput | QRSessionWhereInput[]
    OR?: QRSessionWhereInput[]
    NOT?: QRSessionWhereInput | QRSessionWhereInput[]
    id?: IntFilter<"QRSession"> | number
    sessionId?: StringFilter<"QRSession"> | string
    attendanceSessionId?: IntFilter<"QRSession"> | number
    qrData?: StringFilter<"QRSession"> | string
    scanCount?: IntFilter<"QRSession"> | number
    maxScans?: IntNullableFilter<"QRSession"> | number | null
    expiresAt?: DateTimeFilter<"QRSession"> | Date | string
    status?: StringNullableFilter<"QRSession"> | string | null
    createdAt?: DateTimeFilter<"QRSession"> | Date | string
    attendanceSession?: XOR<AttendanceSessionScalarRelationFilter, AttendanceSessionWhereInput>
  }

  export type QRSessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    attendanceSessionId?: SortOrder
    qrData?: SortOrder
    scanCount?: SortOrder
    maxScans?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    attendanceSession?: AttendanceSessionOrderByWithRelationInput
  }

  export type QRSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sessionId?: string
    AND?: QRSessionWhereInput | QRSessionWhereInput[]
    OR?: QRSessionWhereInput[]
    NOT?: QRSessionWhereInput | QRSessionWhereInput[]
    attendanceSessionId?: IntFilter<"QRSession"> | number
    qrData?: StringFilter<"QRSession"> | string
    scanCount?: IntFilter<"QRSession"> | number
    maxScans?: IntNullableFilter<"QRSession"> | number | null
    expiresAt?: DateTimeFilter<"QRSession"> | Date | string
    status?: StringNullableFilter<"QRSession"> | string | null
    createdAt?: DateTimeFilter<"QRSession"> | Date | string
    attendanceSession?: XOR<AttendanceSessionScalarRelationFilter, AttendanceSessionWhereInput>
  }, "id" | "sessionId">

  export type QRSessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    attendanceSessionId?: SortOrder
    qrData?: SortOrder
    scanCount?: SortOrder
    maxScans?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: QRSessionCountOrderByAggregateInput
    _avg?: QRSessionAvgOrderByAggregateInput
    _max?: QRSessionMaxOrderByAggregateInput
    _min?: QRSessionMinOrderByAggregateInput
    _sum?: QRSessionSumOrderByAggregateInput
  }

  export type QRSessionScalarWhereWithAggregatesInput = {
    AND?: QRSessionScalarWhereWithAggregatesInput | QRSessionScalarWhereWithAggregatesInput[]
    OR?: QRSessionScalarWhereWithAggregatesInput[]
    NOT?: QRSessionScalarWhereWithAggregatesInput | QRSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QRSession"> | number
    sessionId?: StringWithAggregatesFilter<"QRSession"> | string
    attendanceSessionId?: IntWithAggregatesFilter<"QRSession"> | number
    qrData?: StringWithAggregatesFilter<"QRSession"> | string
    scanCount?: IntWithAggregatesFilter<"QRSession"> | number
    maxScans?: IntNullableWithAggregatesFilter<"QRSession"> | number | null
    expiresAt?: DateTimeWithAggregatesFilter<"QRSession"> | Date | string
    status?: StringNullableWithAggregatesFilter<"QRSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"QRSession"> | Date | string
  }

  export type AbsenceJustificationWhereInput = {
    AND?: AbsenceJustificationWhereInput | AbsenceJustificationWhereInput[]
    OR?: AbsenceJustificationWhereInput[]
    NOT?: AbsenceJustificationWhereInput | AbsenceJustificationWhereInput[]
    id?: IntFilter<"AbsenceJustification"> | number
    studentId?: IntFilter<"AbsenceJustification"> | number
    classId?: IntFilter<"AbsenceJustification"> | number
    attendanceRecordId?: IntNullableFilter<"AbsenceJustification"> | number | null
    absenceDate?: DateTimeFilter<"AbsenceJustification"> | Date | string
    reason?: EnumJustificationReasonFilter<"AbsenceJustification"> | $Enums.JustificationReason
    description?: StringNullableFilter<"AbsenceJustification"> | string | null
    documents?: JsonNullableFilter<"AbsenceJustification">
    status?: EnumJustificationStatusFilter<"AbsenceJustification"> | $Enums.JustificationStatus
    submittedAt?: DateTimeFilter<"AbsenceJustification"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"AbsenceJustification"> | Date | string | null
    reviewedBy?: IntNullableFilter<"AbsenceJustification"> | number | null
    reviewNote?: StringNullableFilter<"AbsenceJustification"> | string | null
    createdAt?: DateTimeFilter<"AbsenceJustification"> | Date | string
    updatedAt?: DateTimeFilter<"AbsenceJustification"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    attendanceRecord?: XOR<AttendanceRecordNullableScalarRelationFilter, AttendanceRecordWhereInput> | null
    reviewedByStaff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
  }

  export type AbsenceJustificationOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    attendanceRecordId?: SortOrderInput | SortOrder
    absenceDate?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    documents?: SortOrderInput | SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    reviewNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
    attendanceRecord?: AttendanceRecordOrderByWithRelationInput
    reviewedByStaff?: StaffOrderByWithRelationInput
  }

  export type AbsenceJustificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AbsenceJustificationWhereInput | AbsenceJustificationWhereInput[]
    OR?: AbsenceJustificationWhereInput[]
    NOT?: AbsenceJustificationWhereInput | AbsenceJustificationWhereInput[]
    studentId?: IntFilter<"AbsenceJustification"> | number
    classId?: IntFilter<"AbsenceJustification"> | number
    attendanceRecordId?: IntNullableFilter<"AbsenceJustification"> | number | null
    absenceDate?: DateTimeFilter<"AbsenceJustification"> | Date | string
    reason?: EnumJustificationReasonFilter<"AbsenceJustification"> | $Enums.JustificationReason
    description?: StringNullableFilter<"AbsenceJustification"> | string | null
    documents?: JsonNullableFilter<"AbsenceJustification">
    status?: EnumJustificationStatusFilter<"AbsenceJustification"> | $Enums.JustificationStatus
    submittedAt?: DateTimeFilter<"AbsenceJustification"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"AbsenceJustification"> | Date | string | null
    reviewedBy?: IntNullableFilter<"AbsenceJustification"> | number | null
    reviewNote?: StringNullableFilter<"AbsenceJustification"> | string | null
    createdAt?: DateTimeFilter<"AbsenceJustification"> | Date | string
    updatedAt?: DateTimeFilter<"AbsenceJustification"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    attendanceRecord?: XOR<AttendanceRecordNullableScalarRelationFilter, AttendanceRecordWhereInput> | null
    reviewedByStaff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
  }, "id">

  export type AbsenceJustificationOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    attendanceRecordId?: SortOrderInput | SortOrder
    absenceDate?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    documents?: SortOrderInput | SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    reviewNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AbsenceJustificationCountOrderByAggregateInput
    _avg?: AbsenceJustificationAvgOrderByAggregateInput
    _max?: AbsenceJustificationMaxOrderByAggregateInput
    _min?: AbsenceJustificationMinOrderByAggregateInput
    _sum?: AbsenceJustificationSumOrderByAggregateInput
  }

  export type AbsenceJustificationScalarWhereWithAggregatesInput = {
    AND?: AbsenceJustificationScalarWhereWithAggregatesInput | AbsenceJustificationScalarWhereWithAggregatesInput[]
    OR?: AbsenceJustificationScalarWhereWithAggregatesInput[]
    NOT?: AbsenceJustificationScalarWhereWithAggregatesInput | AbsenceJustificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AbsenceJustification"> | number
    studentId?: IntWithAggregatesFilter<"AbsenceJustification"> | number
    classId?: IntWithAggregatesFilter<"AbsenceJustification"> | number
    attendanceRecordId?: IntNullableWithAggregatesFilter<"AbsenceJustification"> | number | null
    absenceDate?: DateTimeWithAggregatesFilter<"AbsenceJustification"> | Date | string
    reason?: EnumJustificationReasonWithAggregatesFilter<"AbsenceJustification"> | $Enums.JustificationReason
    description?: StringNullableWithAggregatesFilter<"AbsenceJustification"> | string | null
    documents?: JsonNullableWithAggregatesFilter<"AbsenceJustification">
    status?: EnumJustificationStatusWithAggregatesFilter<"AbsenceJustification"> | $Enums.JustificationStatus
    submittedAt?: DateTimeWithAggregatesFilter<"AbsenceJustification"> | Date | string
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"AbsenceJustification"> | Date | string | null
    reviewedBy?: IntNullableWithAggregatesFilter<"AbsenceJustification"> | number | null
    reviewNote?: StringNullableWithAggregatesFilter<"AbsenceJustification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AbsenceJustification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AbsenceJustification"> | Date | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: IntFilter<"Department"> | number
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    headId?: IntNullableFilter<"Department"> | number | null
    type?: EnumDepartmentTypeFilter<"Department"> | $Enums.DepartmentType
    status?: EnumDepartmentStatusFilter<"Department"> | $Enums.DepartmentStatus
    programsCount?: IntFilter<"Department"> | number
    description?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    head?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    leaderboardRankings?: LeaderboardRankingListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    headId?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    programsCount?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    head?: StaffOrderByWithRelationInput
    leaderboardRankings?: LeaderboardRankingOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    headId?: IntNullableFilter<"Department"> | number | null
    type?: EnumDepartmentTypeFilter<"Department"> | $Enums.DepartmentType
    status?: EnumDepartmentStatusFilter<"Department"> | $Enums.DepartmentStatus
    programsCount?: IntFilter<"Department"> | number
    description?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    head?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    leaderboardRankings?: LeaderboardRankingListRelationFilter
  }, "id" | "code">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    headId?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    programsCount?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Department"> | number
    name?: StringWithAggregatesFilter<"Department"> | string
    code?: StringWithAggregatesFilter<"Department"> | string
    headId?: IntNullableWithAggregatesFilter<"Department"> | number | null
    type?: EnumDepartmentTypeWithAggregatesFilter<"Department"> | $Enums.DepartmentType
    status?: EnumDepartmentStatusWithAggregatesFilter<"Department"> | $Enums.DepartmentStatus
    programsCount?: IntWithAggregatesFilter<"Department"> | number
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    read?: BoolFilter<"Notification"> | boolean
    priority?: EnumNotificationPriorityFilter<"Notification"> | $Enums.NotificationPriority
    data?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    priority?: SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    read?: BoolFilter<"Notification"> | boolean
    priority?: EnumNotificationPriorityFilter<"Notification"> | $Enums.NotificationPriority
    data?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    priority?: SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    priority?: EnumNotificationPriorityWithAggregatesFilter<"Notification"> | $Enums.NotificationPriority
    data?: JsonNullableWithAggregatesFilter<"Notification">
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
  }

  export type StudentRiskTrackingWhereInput = {
    AND?: StudentRiskTrackingWhereInput | StudentRiskTrackingWhereInput[]
    OR?: StudentRiskTrackingWhereInput[]
    NOT?: StudentRiskTrackingWhereInput | StudentRiskTrackingWhereInput[]
    id?: IntFilter<"StudentRiskTracking"> | number
    studentId?: IntFilter<"StudentRiskTracking"> | number
    riskLevel?: EnumRiskLevelFilter<"StudentRiskTracking"> | $Enums.RiskLevel
    attendanceRate?: DecimalFilter<"StudentRiskTracking"> | Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: IntFilter<"StudentRiskTracking"> | number
    totalAbsences?: IntFilter<"StudentRiskTracking"> | number
    lastAttendanceDate?: DateTimeNullableFilter<"StudentRiskTracking"> | Date | string | null
    parentEmail?: StringNullableFilter<"StudentRiskTracking"> | string | null
    parentPhone?: StringNullableFilter<"StudentRiskTracking"> | string | null
    notes?: StringNullableFilter<"StudentRiskTracking"> | string | null
    createdAt?: DateTimeFilter<"StudentRiskTracking"> | Date | string
    updatedAt?: DateTimeFilter<"StudentRiskTracking"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type StudentRiskTrackingOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    riskLevel?: SortOrder
    attendanceRate?: SortOrder
    consecutiveAbsences?: SortOrder
    totalAbsences?: SortOrder
    lastAttendanceDate?: SortOrderInput | SortOrder
    parentEmail?: SortOrderInput | SortOrder
    parentPhone?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type StudentRiskTrackingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StudentRiskTrackingWhereInput | StudentRiskTrackingWhereInput[]
    OR?: StudentRiskTrackingWhereInput[]
    NOT?: StudentRiskTrackingWhereInput | StudentRiskTrackingWhereInput[]
    studentId?: IntFilter<"StudentRiskTracking"> | number
    riskLevel?: EnumRiskLevelFilter<"StudentRiskTracking"> | $Enums.RiskLevel
    attendanceRate?: DecimalFilter<"StudentRiskTracking"> | Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: IntFilter<"StudentRiskTracking"> | number
    totalAbsences?: IntFilter<"StudentRiskTracking"> | number
    lastAttendanceDate?: DateTimeNullableFilter<"StudentRiskTracking"> | Date | string | null
    parentEmail?: StringNullableFilter<"StudentRiskTracking"> | string | null
    parentPhone?: StringNullableFilter<"StudentRiskTracking"> | string | null
    notes?: StringNullableFilter<"StudentRiskTracking"> | string | null
    createdAt?: DateTimeFilter<"StudentRiskTracking"> | Date | string
    updatedAt?: DateTimeFilter<"StudentRiskTracking"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id">

  export type StudentRiskTrackingOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    riskLevel?: SortOrder
    attendanceRate?: SortOrder
    consecutiveAbsences?: SortOrder
    totalAbsences?: SortOrder
    lastAttendanceDate?: SortOrderInput | SortOrder
    parentEmail?: SortOrderInput | SortOrder
    parentPhone?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StudentRiskTrackingCountOrderByAggregateInput
    _avg?: StudentRiskTrackingAvgOrderByAggregateInput
    _max?: StudentRiskTrackingMaxOrderByAggregateInput
    _min?: StudentRiskTrackingMinOrderByAggregateInput
    _sum?: StudentRiskTrackingSumOrderByAggregateInput
  }

  export type StudentRiskTrackingScalarWhereWithAggregatesInput = {
    AND?: StudentRiskTrackingScalarWhereWithAggregatesInput | StudentRiskTrackingScalarWhereWithAggregatesInput[]
    OR?: StudentRiskTrackingScalarWhereWithAggregatesInput[]
    NOT?: StudentRiskTrackingScalarWhereWithAggregatesInput | StudentRiskTrackingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentRiskTracking"> | number
    studentId?: IntWithAggregatesFilter<"StudentRiskTracking"> | number
    riskLevel?: EnumRiskLevelWithAggregatesFilter<"StudentRiskTracking"> | $Enums.RiskLevel
    attendanceRate?: DecimalWithAggregatesFilter<"StudentRiskTracking"> | Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: IntWithAggregatesFilter<"StudentRiskTracking"> | number
    totalAbsences?: IntWithAggregatesFilter<"StudentRiskTracking"> | number
    lastAttendanceDate?: DateTimeNullableWithAggregatesFilter<"StudentRiskTracking"> | Date | string | null
    parentEmail?: StringNullableWithAggregatesFilter<"StudentRiskTracking"> | string | null
    parentPhone?: StringNullableWithAggregatesFilter<"StudentRiskTracking"> | string | null
    notes?: StringNullableWithAggregatesFilter<"StudentRiskTracking"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StudentRiskTracking"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StudentRiskTracking"> | Date | string
  }

  export type StudentAlertWhereInput = {
    AND?: StudentAlertWhereInput | StudentAlertWhereInput[]
    OR?: StudentAlertWhereInput[]
    NOT?: StudentAlertWhereInput | StudentAlertWhereInput[]
    id?: IntFilter<"StudentAlert"> | number
    studentId?: IntFilter<"StudentAlert"> | number
    alertType?: EnumAlertTypeFilter<"StudentAlert"> | $Enums.AlertType
    message?: StringFilter<"StudentAlert"> | string
    recipient?: StringNullableFilter<"StudentAlert"> | string | null
    status?: EnumAlertStatusFilter<"StudentAlert"> | $Enums.AlertStatus
    sentBy?: IntNullableFilter<"StudentAlert"> | number | null
    sentAt?: DateTimeNullableFilter<"StudentAlert"> | Date | string | null
    createdAt?: DateTimeFilter<"StudentAlert"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    sentByStaff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
  }

  export type StudentAlertOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    alertType?: SortOrder
    message?: SortOrder
    recipient?: SortOrderInput | SortOrder
    status?: SortOrder
    sentBy?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    sentByStaff?: StaffOrderByWithRelationInput
  }

  export type StudentAlertWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StudentAlertWhereInput | StudentAlertWhereInput[]
    OR?: StudentAlertWhereInput[]
    NOT?: StudentAlertWhereInput | StudentAlertWhereInput[]
    studentId?: IntFilter<"StudentAlert"> | number
    alertType?: EnumAlertTypeFilter<"StudentAlert"> | $Enums.AlertType
    message?: StringFilter<"StudentAlert"> | string
    recipient?: StringNullableFilter<"StudentAlert"> | string | null
    status?: EnumAlertStatusFilter<"StudentAlert"> | $Enums.AlertStatus
    sentBy?: IntNullableFilter<"StudentAlert"> | number | null
    sentAt?: DateTimeNullableFilter<"StudentAlert"> | Date | string | null
    createdAt?: DateTimeFilter<"StudentAlert"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    sentByStaff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
  }, "id">

  export type StudentAlertOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    alertType?: SortOrder
    message?: SortOrder
    recipient?: SortOrderInput | SortOrder
    status?: SortOrder
    sentBy?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StudentAlertCountOrderByAggregateInput
    _avg?: StudentAlertAvgOrderByAggregateInput
    _max?: StudentAlertMaxOrderByAggregateInput
    _min?: StudentAlertMinOrderByAggregateInput
    _sum?: StudentAlertSumOrderByAggregateInput
  }

  export type StudentAlertScalarWhereWithAggregatesInput = {
    AND?: StudentAlertScalarWhereWithAggregatesInput | StudentAlertScalarWhereWithAggregatesInput[]
    OR?: StudentAlertScalarWhereWithAggregatesInput[]
    NOT?: StudentAlertScalarWhereWithAggregatesInput | StudentAlertScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentAlert"> | number
    studentId?: IntWithAggregatesFilter<"StudentAlert"> | number
    alertType?: EnumAlertTypeWithAggregatesFilter<"StudentAlert"> | $Enums.AlertType
    message?: StringWithAggregatesFilter<"StudentAlert"> | string
    recipient?: StringNullableWithAggregatesFilter<"StudentAlert"> | string | null
    status?: EnumAlertStatusWithAggregatesFilter<"StudentAlert"> | $Enums.AlertStatus
    sentBy?: IntNullableWithAggregatesFilter<"StudentAlert"> | number | null
    sentAt?: DateTimeNullableWithAggregatesFilter<"StudentAlert"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StudentAlert"> | Date | string
  }

  export type StudentPointWhereInput = {
    AND?: StudentPointWhereInput | StudentPointWhereInput[]
    OR?: StudentPointWhereInput[]
    NOT?: StudentPointWhereInput | StudentPointWhereInput[]
    id?: IntFilter<"StudentPoint"> | number
    studentId?: IntFilter<"StudentPoint"> | number
    classId?: IntNullableFilter<"StudentPoint"> | number | null
    points?: IntFilter<"StudentPoint"> | number
    pointType?: StringFilter<"StudentPoint"> | string
    description?: StringNullableFilter<"StudentPoint"> | string | null
    referenceId?: IntNullableFilter<"StudentPoint"> | number | null
    awardedBy?: IntNullableFilter<"StudentPoint"> | number | null
    createdAt?: DateTimeFilter<"StudentPoint"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }

  export type StudentPointOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrderInput | SortOrder
    points?: SortOrder
    pointType?: SortOrder
    description?: SortOrderInput | SortOrder
    referenceId?: SortOrderInput | SortOrder
    awardedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
  }

  export type StudentPointWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StudentPointWhereInput | StudentPointWhereInput[]
    OR?: StudentPointWhereInput[]
    NOT?: StudentPointWhereInput | StudentPointWhereInput[]
    studentId?: IntFilter<"StudentPoint"> | number
    classId?: IntNullableFilter<"StudentPoint"> | number | null
    points?: IntFilter<"StudentPoint"> | number
    pointType?: StringFilter<"StudentPoint"> | string
    description?: StringNullableFilter<"StudentPoint"> | string | null
    referenceId?: IntNullableFilter<"StudentPoint"> | number | null
    awardedBy?: IntNullableFilter<"StudentPoint"> | number | null
    createdAt?: DateTimeFilter<"StudentPoint"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }, "id">

  export type StudentPointOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrderInput | SortOrder
    points?: SortOrder
    pointType?: SortOrder
    description?: SortOrderInput | SortOrder
    referenceId?: SortOrderInput | SortOrder
    awardedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StudentPointCountOrderByAggregateInput
    _avg?: StudentPointAvgOrderByAggregateInput
    _max?: StudentPointMaxOrderByAggregateInput
    _min?: StudentPointMinOrderByAggregateInput
    _sum?: StudentPointSumOrderByAggregateInput
  }

  export type StudentPointScalarWhereWithAggregatesInput = {
    AND?: StudentPointScalarWhereWithAggregatesInput | StudentPointScalarWhereWithAggregatesInput[]
    OR?: StudentPointScalarWhereWithAggregatesInput[]
    NOT?: StudentPointScalarWhereWithAggregatesInput | StudentPointScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentPoint"> | number
    studentId?: IntWithAggregatesFilter<"StudentPoint"> | number
    classId?: IntNullableWithAggregatesFilter<"StudentPoint"> | number | null
    points?: IntWithAggregatesFilter<"StudentPoint"> | number
    pointType?: StringWithAggregatesFilter<"StudentPoint"> | string
    description?: StringNullableWithAggregatesFilter<"StudentPoint"> | string | null
    referenceId?: IntNullableWithAggregatesFilter<"StudentPoint"> | number | null
    awardedBy?: IntNullableWithAggregatesFilter<"StudentPoint"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"StudentPoint"> | Date | string
  }

  export type AchievementWhereInput = {
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    id?: IntFilter<"Achievement"> | number
    name?: StringFilter<"Achievement"> | string
    description?: StringNullableFilter<"Achievement"> | string | null
    category?: StringFilter<"Achievement"> | string
    icon?: StringNullableFilter<"Achievement"> | string | null
    pointsReward?: IntFilter<"Achievement"> | number
    requirementType?: StringNullableFilter<"Achievement"> | string | null
    requirementValue?: IntNullableFilter<"Achievement"> | number | null
    requirementPeriod?: IntNullableFilter<"Achievement"> | number | null
    isActive?: BoolFilter<"Achievement"> | boolean
    createdAt?: DateTimeFilter<"Achievement"> | Date | string
    studentAchievements?: StudentAchievementListRelationFilter
  }

  export type AchievementOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    icon?: SortOrderInput | SortOrder
    pointsReward?: SortOrder
    requirementType?: SortOrderInput | SortOrder
    requirementValue?: SortOrderInput | SortOrder
    requirementPeriod?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    studentAchievements?: StudentAchievementOrderByRelationAggregateInput
  }

  export type AchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    name?: StringFilter<"Achievement"> | string
    description?: StringNullableFilter<"Achievement"> | string | null
    category?: StringFilter<"Achievement"> | string
    icon?: StringNullableFilter<"Achievement"> | string | null
    pointsReward?: IntFilter<"Achievement"> | number
    requirementType?: StringNullableFilter<"Achievement"> | string | null
    requirementValue?: IntNullableFilter<"Achievement"> | number | null
    requirementPeriod?: IntNullableFilter<"Achievement"> | number | null
    isActive?: BoolFilter<"Achievement"> | boolean
    createdAt?: DateTimeFilter<"Achievement"> | Date | string
    studentAchievements?: StudentAchievementListRelationFilter
  }, "id">

  export type AchievementOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    icon?: SortOrderInput | SortOrder
    pointsReward?: SortOrder
    requirementType?: SortOrderInput | SortOrder
    requirementValue?: SortOrderInput | SortOrder
    requirementPeriod?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: AchievementCountOrderByAggregateInput
    _avg?: AchievementAvgOrderByAggregateInput
    _max?: AchievementMaxOrderByAggregateInput
    _min?: AchievementMinOrderByAggregateInput
    _sum?: AchievementSumOrderByAggregateInput
  }

  export type AchievementScalarWhereWithAggregatesInput = {
    AND?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    OR?: AchievementScalarWhereWithAggregatesInput[]
    NOT?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Achievement"> | number
    name?: StringWithAggregatesFilter<"Achievement"> | string
    description?: StringNullableWithAggregatesFilter<"Achievement"> | string | null
    category?: StringWithAggregatesFilter<"Achievement"> | string
    icon?: StringNullableWithAggregatesFilter<"Achievement"> | string | null
    pointsReward?: IntWithAggregatesFilter<"Achievement"> | number
    requirementType?: StringNullableWithAggregatesFilter<"Achievement"> | string | null
    requirementValue?: IntNullableWithAggregatesFilter<"Achievement"> | number | null
    requirementPeriod?: IntNullableWithAggregatesFilter<"Achievement"> | number | null
    isActive?: BoolWithAggregatesFilter<"Achievement"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Achievement"> | Date | string
  }

  export type StudentAchievementWhereInput = {
    AND?: StudentAchievementWhereInput | StudentAchievementWhereInput[]
    OR?: StudentAchievementWhereInput[]
    NOT?: StudentAchievementWhereInput | StudentAchievementWhereInput[]
    id?: IntFilter<"StudentAchievement"> | number
    studentId?: IntFilter<"StudentAchievement"> | number
    achievementId?: IntFilter<"StudentAchievement"> | number
    progress?: IntFilter<"StudentAchievement"> | number
    isEarned?: BoolFilter<"StudentAchievement"> | boolean
    earnedAt?: DateTimeNullableFilter<"StudentAchievement"> | Date | string | null
    createdAt?: DateTimeFilter<"StudentAchievement"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    achievement?: XOR<AchievementScalarRelationFilter, AchievementWhereInput>
  }

  export type StudentAchievementOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    achievementId?: SortOrder
    progress?: SortOrder
    isEarned?: SortOrder
    earnedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    achievement?: AchievementOrderByWithRelationInput
  }

  export type StudentAchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId_achievementId?: StudentAchievementStudentIdAchievementIdCompoundUniqueInput
    AND?: StudentAchievementWhereInput | StudentAchievementWhereInput[]
    OR?: StudentAchievementWhereInput[]
    NOT?: StudentAchievementWhereInput | StudentAchievementWhereInput[]
    studentId?: IntFilter<"StudentAchievement"> | number
    achievementId?: IntFilter<"StudentAchievement"> | number
    progress?: IntFilter<"StudentAchievement"> | number
    isEarned?: BoolFilter<"StudentAchievement"> | boolean
    earnedAt?: DateTimeNullableFilter<"StudentAchievement"> | Date | string | null
    createdAt?: DateTimeFilter<"StudentAchievement"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    achievement?: XOR<AchievementScalarRelationFilter, AchievementWhereInput>
  }, "id" | "studentId_achievementId">

  export type StudentAchievementOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    achievementId?: SortOrder
    progress?: SortOrder
    isEarned?: SortOrder
    earnedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StudentAchievementCountOrderByAggregateInput
    _avg?: StudentAchievementAvgOrderByAggregateInput
    _max?: StudentAchievementMaxOrderByAggregateInput
    _min?: StudentAchievementMinOrderByAggregateInput
    _sum?: StudentAchievementSumOrderByAggregateInput
  }

  export type StudentAchievementScalarWhereWithAggregatesInput = {
    AND?: StudentAchievementScalarWhereWithAggregatesInput | StudentAchievementScalarWhereWithAggregatesInput[]
    OR?: StudentAchievementScalarWhereWithAggregatesInput[]
    NOT?: StudentAchievementScalarWhereWithAggregatesInput | StudentAchievementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentAchievement"> | number
    studentId?: IntWithAggregatesFilter<"StudentAchievement"> | number
    achievementId?: IntWithAggregatesFilter<"StudentAchievement"> | number
    progress?: IntWithAggregatesFilter<"StudentAchievement"> | number
    isEarned?: BoolWithAggregatesFilter<"StudentAchievement"> | boolean
    earnedAt?: DateTimeNullableWithAggregatesFilter<"StudentAchievement"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StudentAchievement"> | Date | string
  }

  export type StudentStreakWhereInput = {
    AND?: StudentStreakWhereInput | StudentStreakWhereInput[]
    OR?: StudentStreakWhereInput[]
    NOT?: StudentStreakWhereInput | StudentStreakWhereInput[]
    id?: IntFilter<"StudentStreak"> | number
    studentId?: IntFilter<"StudentStreak"> | number
    classId?: IntFilter<"StudentStreak"> | number
    currentStreak?: IntFilter<"StudentStreak"> | number
    longestStreak?: IntFilter<"StudentStreak"> | number
    lastAttendanceDate?: DateTimeNullableFilter<"StudentStreak"> | Date | string | null
    streakStartDate?: DateTimeNullableFilter<"StudentStreak"> | Date | string | null
    createdAt?: DateTimeFilter<"StudentStreak"> | Date | string
    updatedAt?: DateTimeFilter<"StudentStreak"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
  }

  export type StudentStreakOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    lastAttendanceDate?: SortOrderInput | SortOrder
    streakStartDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
  }

  export type StudentStreakWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId_classId?: StudentStreakStudentIdClassIdCompoundUniqueInput
    AND?: StudentStreakWhereInput | StudentStreakWhereInput[]
    OR?: StudentStreakWhereInput[]
    NOT?: StudentStreakWhereInput | StudentStreakWhereInput[]
    studentId?: IntFilter<"StudentStreak"> | number
    classId?: IntFilter<"StudentStreak"> | number
    currentStreak?: IntFilter<"StudentStreak"> | number
    longestStreak?: IntFilter<"StudentStreak"> | number
    lastAttendanceDate?: DateTimeNullableFilter<"StudentStreak"> | Date | string | null
    streakStartDate?: DateTimeNullableFilter<"StudentStreak"> | Date | string | null
    createdAt?: DateTimeFilter<"StudentStreak"> | Date | string
    updatedAt?: DateTimeFilter<"StudentStreak"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
  }, "id" | "studentId_classId">

  export type StudentStreakOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    lastAttendanceDate?: SortOrderInput | SortOrder
    streakStartDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StudentStreakCountOrderByAggregateInput
    _avg?: StudentStreakAvgOrderByAggregateInput
    _max?: StudentStreakMaxOrderByAggregateInput
    _min?: StudentStreakMinOrderByAggregateInput
    _sum?: StudentStreakSumOrderByAggregateInput
  }

  export type StudentStreakScalarWhereWithAggregatesInput = {
    AND?: StudentStreakScalarWhereWithAggregatesInput | StudentStreakScalarWhereWithAggregatesInput[]
    OR?: StudentStreakScalarWhereWithAggregatesInput[]
    NOT?: StudentStreakScalarWhereWithAggregatesInput | StudentStreakScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentStreak"> | number
    studentId?: IntWithAggregatesFilter<"StudentStreak"> | number
    classId?: IntWithAggregatesFilter<"StudentStreak"> | number
    currentStreak?: IntWithAggregatesFilter<"StudentStreak"> | number
    longestStreak?: IntWithAggregatesFilter<"StudentStreak"> | number
    lastAttendanceDate?: DateTimeNullableWithAggregatesFilter<"StudentStreak"> | Date | string | null
    streakStartDate?: DateTimeNullableWithAggregatesFilter<"StudentStreak"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StudentStreak"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StudentStreak"> | Date | string
  }

  export type LeaderboardRankingWhereInput = {
    AND?: LeaderboardRankingWhereInput | LeaderboardRankingWhereInput[]
    OR?: LeaderboardRankingWhereInput[]
    NOT?: LeaderboardRankingWhereInput | LeaderboardRankingWhereInput[]
    id?: IntFilter<"LeaderboardRanking"> | number
    studentId?: IntFilter<"LeaderboardRanking"> | number
    classId?: IntNullableFilter<"LeaderboardRanking"> | number | null
    departmentId?: IntNullableFilter<"LeaderboardRanking"> | number | null
    period?: StringFilter<"LeaderboardRanking"> | string
    scope?: StringFilter<"LeaderboardRanking"> | string
    rankPosition?: IntFilter<"LeaderboardRanking"> | number
    totalPoints?: IntFilter<"LeaderboardRanking"> | number
    attendanceRate?: DecimalNullableFilter<"LeaderboardRanking"> | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFilter<"LeaderboardRanking"> | number
    achievementsCount?: IntFilter<"LeaderboardRanking"> | number
    periodStart?: DateTimeFilter<"LeaderboardRanking"> | Date | string
    periodEnd?: DateTimeFilter<"LeaderboardRanking"> | Date | string
    createdAt?: DateTimeFilter<"LeaderboardRanking"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
  }

  export type LeaderboardRankingOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    period?: SortOrder
    scope?: SortOrder
    rankPosition?: SortOrder
    totalPoints?: SortOrder
    attendanceRate?: SortOrderInput | SortOrder
    streakDays?: SortOrder
    achievementsCount?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type LeaderboardRankingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId_period_scope_periodStart?: LeaderboardRankingStudentIdPeriodScopePeriodStartCompoundUniqueInput
    AND?: LeaderboardRankingWhereInput | LeaderboardRankingWhereInput[]
    OR?: LeaderboardRankingWhereInput[]
    NOT?: LeaderboardRankingWhereInput | LeaderboardRankingWhereInput[]
    studentId?: IntFilter<"LeaderboardRanking"> | number
    classId?: IntNullableFilter<"LeaderboardRanking"> | number | null
    departmentId?: IntNullableFilter<"LeaderboardRanking"> | number | null
    period?: StringFilter<"LeaderboardRanking"> | string
    scope?: StringFilter<"LeaderboardRanking"> | string
    rankPosition?: IntFilter<"LeaderboardRanking"> | number
    totalPoints?: IntFilter<"LeaderboardRanking"> | number
    attendanceRate?: DecimalNullableFilter<"LeaderboardRanking"> | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFilter<"LeaderboardRanking"> | number
    achievementsCount?: IntFilter<"LeaderboardRanking"> | number
    periodStart?: DateTimeFilter<"LeaderboardRanking"> | Date | string
    periodEnd?: DateTimeFilter<"LeaderboardRanking"> | Date | string
    createdAt?: DateTimeFilter<"LeaderboardRanking"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
  }, "id" | "studentId_period_scope_periodStart">

  export type LeaderboardRankingOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    period?: SortOrder
    scope?: SortOrder
    rankPosition?: SortOrder
    totalPoints?: SortOrder
    attendanceRate?: SortOrderInput | SortOrder
    streakDays?: SortOrder
    achievementsCount?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
    _count?: LeaderboardRankingCountOrderByAggregateInput
    _avg?: LeaderboardRankingAvgOrderByAggregateInput
    _max?: LeaderboardRankingMaxOrderByAggregateInput
    _min?: LeaderboardRankingMinOrderByAggregateInput
    _sum?: LeaderboardRankingSumOrderByAggregateInput
  }

  export type LeaderboardRankingScalarWhereWithAggregatesInput = {
    AND?: LeaderboardRankingScalarWhereWithAggregatesInput | LeaderboardRankingScalarWhereWithAggregatesInput[]
    OR?: LeaderboardRankingScalarWhereWithAggregatesInput[]
    NOT?: LeaderboardRankingScalarWhereWithAggregatesInput | LeaderboardRankingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LeaderboardRanking"> | number
    studentId?: IntWithAggregatesFilter<"LeaderboardRanking"> | number
    classId?: IntNullableWithAggregatesFilter<"LeaderboardRanking"> | number | null
    departmentId?: IntNullableWithAggregatesFilter<"LeaderboardRanking"> | number | null
    period?: StringWithAggregatesFilter<"LeaderboardRanking"> | string
    scope?: StringWithAggregatesFilter<"LeaderboardRanking"> | string
    rankPosition?: IntWithAggregatesFilter<"LeaderboardRanking"> | number
    totalPoints?: IntWithAggregatesFilter<"LeaderboardRanking"> | number
    attendanceRate?: DecimalNullableWithAggregatesFilter<"LeaderboardRanking"> | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntWithAggregatesFilter<"LeaderboardRanking"> | number
    achievementsCount?: IntWithAggregatesFilter<"LeaderboardRanking"> | number
    periodStart?: DateTimeWithAggregatesFilter<"LeaderboardRanking"> | Date | string
    periodEnd?: DateTimeWithAggregatesFilter<"LeaderboardRanking"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"LeaderboardRanking"> | Date | string
  }

  export type GeofenceSettingsWhereInput = {
    AND?: GeofenceSettingsWhereInput | GeofenceSettingsWhereInput[]
    OR?: GeofenceSettingsWhereInput[]
    NOT?: GeofenceSettingsWhereInput | GeofenceSettingsWhereInput[]
    id?: IntFilter<"GeofenceSettings"> | number
    defaultRadius?: IntFilter<"GeofenceSettings"> | number
    enabled?: BoolFilter<"GeofenceSettings"> | boolean
    allowOverride?: BoolFilter<"GeofenceSettings"> | boolean
    accuracyThreshold?: FloatFilter<"GeofenceSettings"> | number
    createdAt?: DateTimeFilter<"GeofenceSettings"> | Date | string
    updatedAt?: DateTimeFilter<"GeofenceSettings"> | Date | string
  }

  export type GeofenceSettingsOrderByWithRelationInput = {
    id?: SortOrder
    defaultRadius?: SortOrder
    enabled?: SortOrder
    allowOverride?: SortOrder
    accuracyThreshold?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeofenceSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GeofenceSettingsWhereInput | GeofenceSettingsWhereInput[]
    OR?: GeofenceSettingsWhereInput[]
    NOT?: GeofenceSettingsWhereInput | GeofenceSettingsWhereInput[]
    defaultRadius?: IntFilter<"GeofenceSettings"> | number
    enabled?: BoolFilter<"GeofenceSettings"> | boolean
    allowOverride?: BoolFilter<"GeofenceSettings"> | boolean
    accuracyThreshold?: FloatFilter<"GeofenceSettings"> | number
    createdAt?: DateTimeFilter<"GeofenceSettings"> | Date | string
    updatedAt?: DateTimeFilter<"GeofenceSettings"> | Date | string
  }, "id">

  export type GeofenceSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    defaultRadius?: SortOrder
    enabled?: SortOrder
    allowOverride?: SortOrder
    accuracyThreshold?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GeofenceSettingsCountOrderByAggregateInput
    _avg?: GeofenceSettingsAvgOrderByAggregateInput
    _max?: GeofenceSettingsMaxOrderByAggregateInput
    _min?: GeofenceSettingsMinOrderByAggregateInput
    _sum?: GeofenceSettingsSumOrderByAggregateInput
  }

  export type GeofenceSettingsScalarWhereWithAggregatesInput = {
    AND?: GeofenceSettingsScalarWhereWithAggregatesInput | GeofenceSettingsScalarWhereWithAggregatesInput[]
    OR?: GeofenceSettingsScalarWhereWithAggregatesInput[]
    NOT?: GeofenceSettingsScalarWhereWithAggregatesInput | GeofenceSettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GeofenceSettings"> | number
    defaultRadius?: IntWithAggregatesFilter<"GeofenceSettings"> | number
    enabled?: BoolWithAggregatesFilter<"GeofenceSettings"> | boolean
    allowOverride?: BoolWithAggregatesFilter<"GeofenceSettings"> | boolean
    accuracyThreshold?: FloatWithAggregatesFilter<"GeofenceSettings"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GeofenceSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GeofenceSettings"> | Date | string
  }

  export type ClassLocationWhereInput = {
    AND?: ClassLocationWhereInput | ClassLocationWhereInput[]
    OR?: ClassLocationWhereInput[]
    NOT?: ClassLocationWhereInput | ClassLocationWhereInput[]
    id?: IntFilter<"ClassLocation"> | number
    classId?: IntFilter<"ClassLocation"> | number
    name?: StringFilter<"ClassLocation"> | string
    latitude?: FloatFilter<"ClassLocation"> | number
    longitude?: FloatFilter<"ClassLocation"> | number
    radius?: IntFilter<"ClassLocation"> | number
    isActive?: BoolFilter<"ClassLocation"> | boolean
    createdAt?: DateTimeFilter<"ClassLocation"> | Date | string
    updatedAt?: DateTimeFilter<"ClassLocation"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
  }

  export type ClassLocationOrderByWithRelationInput = {
    id?: SortOrder
    classId?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    radius?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    class?: ClassOrderByWithRelationInput
  }

  export type ClassLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClassLocationWhereInput | ClassLocationWhereInput[]
    OR?: ClassLocationWhereInput[]
    NOT?: ClassLocationWhereInput | ClassLocationWhereInput[]
    classId?: IntFilter<"ClassLocation"> | number
    name?: StringFilter<"ClassLocation"> | string
    latitude?: FloatFilter<"ClassLocation"> | number
    longitude?: FloatFilter<"ClassLocation"> | number
    radius?: IntFilter<"ClassLocation"> | number
    isActive?: BoolFilter<"ClassLocation"> | boolean
    createdAt?: DateTimeFilter<"ClassLocation"> | Date | string
    updatedAt?: DateTimeFilter<"ClassLocation"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
  }, "id">

  export type ClassLocationOrderByWithAggregationInput = {
    id?: SortOrder
    classId?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    radius?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClassLocationCountOrderByAggregateInput
    _avg?: ClassLocationAvgOrderByAggregateInput
    _max?: ClassLocationMaxOrderByAggregateInput
    _min?: ClassLocationMinOrderByAggregateInput
    _sum?: ClassLocationSumOrderByAggregateInput
  }

  export type ClassLocationScalarWhereWithAggregatesInput = {
    AND?: ClassLocationScalarWhereWithAggregatesInput | ClassLocationScalarWhereWithAggregatesInput[]
    OR?: ClassLocationScalarWhereWithAggregatesInput[]
    NOT?: ClassLocationScalarWhereWithAggregatesInput | ClassLocationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClassLocation"> | number
    classId?: IntWithAggregatesFilter<"ClassLocation"> | number
    name?: StringWithAggregatesFilter<"ClassLocation"> | string
    latitude?: FloatWithAggregatesFilter<"ClassLocation"> | number
    longitude?: FloatWithAggregatesFilter<"ClassLocation"> | number
    radius?: IntWithAggregatesFilter<"ClassLocation"> | number
    isActive?: BoolWithAggregatesFilter<"ClassLocation"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ClassLocation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClassLocation"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    phone?: string | null
    avatarUrl?: string | null
    lastSeen?: Date | string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: AdminCreateNestedOneWithoutUserInput
    staff?: StaffCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    phone?: string | null
    avatarUrl?: string | null
    lastSeen?: Date | string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    staff?: StaffUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneWithoutUserNestedInput
    staff?: StaffUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    staff?: StaffUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    phone?: string | null
    avatarUrl?: string | null
    lastSeen?: Date | string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateInput = {
    adminLevel?: string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    userId: number
    adminLevel?: string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateInput = {
    adminLevel?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    adminLevel?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateManyInput = {
    id?: number
    userId: number
    adminLevel?: string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateManyMutationInput = {
    adminLevel?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    adminLevel?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffCreateInput = {
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    classes?: ClassCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffUncheckedCreateInput = {
    id?: number
    userId: number
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classes?: ClassUncheckedCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffUpdateInput = {
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    classes?: ClassUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutSentByStaffNestedInput
  }

  export type StaffUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: ClassUncheckedUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutSentByStaffNestedInput
  }

  export type StaffCreateManyInput = {
    id?: number
    userId: number
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffUpdateManyMutationInput = {
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateInput = {
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: number
    userId: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingUncheckedCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementUncheckedCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUncheckedUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUncheckedUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: number
    userId: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentUpdateManyMutationInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassCreateInput = {
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    faculty?: StaffCreateNestedOneWithoutClassesInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    facultyId?: number | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    faculty?: StaffUpdateOneWithoutClassesNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facultyId?: NullableIntFieldUpdateOperationsInput | number | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    facultyId?: number | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facultyId?: NullableIntFieldUpdateOperationsInput | number | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassEnrollmentCreateInput = {
    enrollmentDate?: Date | string
    status?: string | null
    grade?: string | null
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutClassEnrollmentsInput
    class: ClassCreateNestedOneWithoutClassEnrollmentsInput
  }

  export type ClassEnrollmentUncheckedCreateInput = {
    id?: number
    studentId: number
    classId: number
    enrollmentDate?: Date | string
    status?: string | null
    grade?: string | null
    createdAt?: Date | string
  }

  export type ClassEnrollmentUpdateInput = {
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutClassEnrollmentsNestedInput
    class?: ClassUpdateOneRequiredWithoutClassEnrollmentsNestedInput
  }

  export type ClassEnrollmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassEnrollmentCreateManyInput = {
    id?: number
    studentId: number
    classId: number
    enrollmentDate?: Date | string
    status?: string | null
    grade?: string | null
    createdAt?: Date | string
  }

  export type ClassEnrollmentUpdateManyMutationInput = {
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassEnrollmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordCreateInput = {
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAttendanceRecordsInput
    class: ClassCreateNestedOneWithoutAttendanceRecordsInput
    recordedByStaff?: StaffCreateNestedOneWithoutAttendanceRecordsInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutAttendanceRecordInput
  }

  export type AttendanceRecordUncheckedCreateInput = {
    id?: number
    studentId: number
    classId: number
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recordedBy?: number | null
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutAttendanceRecordInput
  }

  export type AttendanceRecordUpdateInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    class?: ClassUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    recordedByStaff?: StaffUpdateOneWithoutAttendanceRecordsNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutAttendanceRecordNestedInput
  }

  export type AttendanceRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: NullableIntFieldUpdateOperationsInput | number | null
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutAttendanceRecordNestedInput
  }

  export type AttendanceRecordCreateManyInput = {
    id?: number
    studentId: number
    classId: number
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recordedBy?: number | null
  }

  export type AttendanceRecordUpdateManyMutationInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendanceSessionCreateInput = {
    sessionId: string
    sessionDate: Date | string
    sessionTime: Date | string
    sessionType?: $Enums.SessionType
    location?: string | null
    plannedTopic?: string | null
    targetLearning?: string | null
    targetLevel?: string | null
    planningStatus?: $Enums.PlanningStatus
    notes?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutAttendanceSessionsInput
    creator: StaffCreateNestedOneWithoutAttendanceSessionsInput
    qrSessions?: QRSessionCreateNestedManyWithoutAttendanceSessionInput
  }

  export type AttendanceSessionUncheckedCreateInput = {
    id?: number
    sessionId: string
    classId: number
    createdBy: number
    sessionDate: Date | string
    sessionTime: Date | string
    sessionType?: $Enums.SessionType
    location?: string | null
    plannedTopic?: string | null
    targetLearning?: string | null
    targetLevel?: string | null
    planningStatus?: $Enums.PlanningStatus
    notes?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrSessions?: QRSessionUncheckedCreateNestedManyWithoutAttendanceSessionInput
  }

  export type AttendanceSessionUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutAttendanceSessionsNestedInput
    creator?: StaffUpdateOneRequiredWithoutAttendanceSessionsNestedInput
    qrSessions?: QRSessionUpdateManyWithoutAttendanceSessionNestedInput
  }

  export type AttendanceSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    createdBy?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrSessions?: QRSessionUncheckedUpdateManyWithoutAttendanceSessionNestedInput
  }

  export type AttendanceSessionCreateManyInput = {
    id?: number
    sessionId: string
    classId: number
    createdBy: number
    sessionDate: Date | string
    sessionTime: Date | string
    sessionType?: $Enums.SessionType
    location?: string | null
    plannedTopic?: string | null
    targetLearning?: string | null
    targetLevel?: string | null
    planningStatus?: $Enums.PlanningStatus
    notes?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceSessionUpdateManyMutationInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    createdBy?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QRSessionCreateInput = {
    sessionId: string
    qrData: string
    scanCount?: number
    maxScans?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    attendanceSession: AttendanceSessionCreateNestedOneWithoutQrSessionsInput
  }

  export type QRSessionUncheckedCreateInput = {
    id?: number
    sessionId: string
    attendanceSessionId: number
    qrData: string
    scanCount?: number
    maxScans?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
  }

  export type QRSessionUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    qrData?: StringFieldUpdateOperationsInput | string
    scanCount?: IntFieldUpdateOperationsInput | number
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceSession?: AttendanceSessionUpdateOneRequiredWithoutQrSessionsNestedInput
  }

  export type QRSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    attendanceSessionId?: IntFieldUpdateOperationsInput | number
    qrData?: StringFieldUpdateOperationsInput | string
    scanCount?: IntFieldUpdateOperationsInput | number
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QRSessionCreateManyInput = {
    id?: number
    sessionId: string
    attendanceSessionId: number
    qrData: string
    scanCount?: number
    maxScans?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
  }

  export type QRSessionUpdateManyMutationInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    qrData?: StringFieldUpdateOperationsInput | string
    scanCount?: IntFieldUpdateOperationsInput | number
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QRSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    attendanceSessionId?: IntFieldUpdateOperationsInput | number
    qrData?: StringFieldUpdateOperationsInput | string
    scanCount?: IntFieldUpdateOperationsInput | number
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceJustificationCreateInput = {
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAbsenceJustificationsInput
    class: ClassCreateNestedOneWithoutAbsenceJustificationsInput
    attendanceRecord?: AttendanceRecordCreateNestedOneWithoutAbsenceJustificationsInput
    reviewedByStaff?: StaffCreateNestedOneWithoutAbsenceJustificationsInput
  }

  export type AbsenceJustificationUncheckedCreateInput = {
    id?: number
    studentId: number
    classId: number
    attendanceRecordId?: number | null
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceJustificationUpdateInput = {
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAbsenceJustificationsNestedInput
    class?: ClassUpdateOneRequiredWithoutAbsenceJustificationsNestedInput
    attendanceRecord?: AttendanceRecordUpdateOneWithoutAbsenceJustificationsNestedInput
    reviewedByStaff?: StaffUpdateOneWithoutAbsenceJustificationsNestedInput
  }

  export type AbsenceJustificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    attendanceRecordId?: NullableIntFieldUpdateOperationsInput | number | null
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceJustificationCreateManyInput = {
    id?: number
    studentId: number
    classId: number
    attendanceRecordId?: number | null
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceJustificationUpdateManyMutationInput = {
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceJustificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    attendanceRecordId?: NullableIntFieldUpdateOperationsInput | number | null
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCreateInput = {
    name: string
    code: string
    type?: $Enums.DepartmentType
    status?: $Enums.DepartmentStatus
    programsCount?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    head?: StaffCreateNestedOneWithoutDepartmentsInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    headId?: number | null
    type?: $Enums.DepartmentType
    status?: $Enums.DepartmentStatus
    programsCount?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumDepartmentTypeFieldUpdateOperationsInput | $Enums.DepartmentType
    status?: EnumDepartmentStatusFieldUpdateOperationsInput | $Enums.DepartmentStatus
    programsCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    head?: StaffUpdateOneWithoutDepartmentsNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    headId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumDepartmentTypeFieldUpdateOperationsInput | $Enums.DepartmentType
    status?: EnumDepartmentStatusFieldUpdateOperationsInput | $Enums.DepartmentStatus
    programsCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: number
    name: string
    code: string
    headId?: number | null
    type?: $Enums.DepartmentType
    status?: $Enums.DepartmentStatus
    programsCount?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumDepartmentTypeFieldUpdateOperationsInput | $Enums.DepartmentType
    status?: EnumDepartmentStatusFieldUpdateOperationsInput | $Enums.DepartmentStatus
    programsCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    headId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumDepartmentTypeFieldUpdateOperationsInput | $Enums.DepartmentType
    status?: EnumDepartmentStatusFieldUpdateOperationsInput | $Enums.DepartmentStatus
    programsCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    type: $Enums.NotificationType
    title: string
    message: string
    read?: boolean
    priority?: $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    type: $Enums.NotificationType
    title: string
    message: string
    read?: boolean
    priority?: $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type NotificationUpdateInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    type: $Enums.NotificationType
    title: string
    message: string
    read?: boolean
    priority?: $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type NotificationUpdateManyMutationInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudentRiskTrackingCreateInput = {
    riskLevel: $Enums.RiskLevel
    attendanceRate: Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: number
    totalAbsences?: number
    lastAttendanceDate?: Date | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutStudentRiskTrackingInput
  }

  export type StudentRiskTrackingUncheckedCreateInput = {
    id?: number
    studentId: number
    riskLevel: $Enums.RiskLevel
    attendanceRate: Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: number
    totalAbsences?: number
    lastAttendanceDate?: Date | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentRiskTrackingUpdateInput = {
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    attendanceRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: IntFieldUpdateOperationsInput | number
    totalAbsences?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutStudentRiskTrackingNestedInput
  }

  export type StudentRiskTrackingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    attendanceRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: IntFieldUpdateOperationsInput | number
    totalAbsences?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentRiskTrackingCreateManyInput = {
    id?: number
    studentId: number
    riskLevel: $Enums.RiskLevel
    attendanceRate: Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: number
    totalAbsences?: number
    lastAttendanceDate?: Date | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentRiskTrackingUpdateManyMutationInput = {
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    attendanceRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: IntFieldUpdateOperationsInput | number
    totalAbsences?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentRiskTrackingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    attendanceRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: IntFieldUpdateOperationsInput | number
    totalAbsences?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAlertCreateInput = {
    alertType: $Enums.AlertType
    message: string
    recipient?: string | null
    status?: $Enums.AlertStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutStudentAlertsInput
    sentByStaff?: StaffCreateNestedOneWithoutStudentAlertsInput
  }

  export type StudentAlertUncheckedCreateInput = {
    id?: number
    studentId: number
    alertType: $Enums.AlertType
    message: string
    recipient?: string | null
    status?: $Enums.AlertStatus
    sentBy?: number | null
    sentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type StudentAlertUpdateInput = {
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutStudentAlertsNestedInput
    sentByStaff?: StaffUpdateOneWithoutStudentAlertsNestedInput
  }

  export type StudentAlertUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    sentBy?: NullableIntFieldUpdateOperationsInput | number | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAlertCreateManyInput = {
    id?: number
    studentId: number
    alertType: $Enums.AlertType
    message: string
    recipient?: string | null
    status?: $Enums.AlertStatus
    sentBy?: number | null
    sentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type StudentAlertUpdateManyMutationInput = {
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAlertUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    sentBy?: NullableIntFieldUpdateOperationsInput | number | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPointCreateInput = {
    points: number
    pointType: string
    description?: string | null
    referenceId?: number | null
    awardedBy?: number | null
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutStudentPointsInput
    class?: ClassCreateNestedOneWithoutStudentPointsInput
  }

  export type StudentPointUncheckedCreateInput = {
    id?: number
    studentId: number
    classId?: number | null
    points: number
    pointType: string
    description?: string | null
    referenceId?: number | null
    awardedBy?: number | null
    createdAt?: Date | string
  }

  export type StudentPointUpdateInput = {
    points?: IntFieldUpdateOperationsInput | number
    pointType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    awardedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutStudentPointsNestedInput
    class?: ClassUpdateOneWithoutStudentPointsNestedInput
  }

  export type StudentPointUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    pointType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    awardedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPointCreateManyInput = {
    id?: number
    studentId: number
    classId?: number | null
    points: number
    pointType: string
    description?: string | null
    referenceId?: number | null
    awardedBy?: number | null
    createdAt?: Date | string
  }

  export type StudentPointUpdateManyMutationInput = {
    points?: IntFieldUpdateOperationsInput | number
    pointType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    awardedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPointUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    pointType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    awardedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AchievementCreateInput = {
    name: string
    description?: string | null
    category: string
    icon?: string | null
    pointsReward?: number
    requirementType?: string | null
    requirementValue?: number | null
    requirementPeriod?: number | null
    isActive?: boolean
    createdAt?: Date | string
    studentAchievements?: StudentAchievementCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    category: string
    icon?: string | null
    pointsReward?: number
    requirementType?: string | null
    requirementValue?: number | null
    requirementPeriod?: number | null
    isActive?: boolean
    createdAt?: Date | string
    studentAchievements?: StudentAchievementUncheckedCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    requirementType?: NullableStringFieldUpdateOperationsInput | string | null
    requirementValue?: NullableIntFieldUpdateOperationsInput | number | null
    requirementPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentAchievements?: StudentAchievementUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    requirementType?: NullableStringFieldUpdateOperationsInput | string | null
    requirementValue?: NullableIntFieldUpdateOperationsInput | number | null
    requirementPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentAchievements?: StudentAchievementUncheckedUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    category: string
    icon?: string | null
    pointsReward?: number
    requirementType?: string | null
    requirementValue?: number | null
    requirementPeriod?: number | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type AchievementUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    requirementType?: NullableStringFieldUpdateOperationsInput | string | null
    requirementValue?: NullableIntFieldUpdateOperationsInput | number | null
    requirementPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AchievementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    requirementType?: NullableStringFieldUpdateOperationsInput | string | null
    requirementValue?: NullableIntFieldUpdateOperationsInput | number | null
    requirementPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAchievementCreateInput = {
    progress?: number
    isEarned?: boolean
    earnedAt?: Date | string | null
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutStudentAchievementsInput
    achievement: AchievementCreateNestedOneWithoutStudentAchievementsInput
  }

  export type StudentAchievementUncheckedCreateInput = {
    id?: number
    studentId: number
    achievementId: number
    progress?: number
    isEarned?: boolean
    earnedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type StudentAchievementUpdateInput = {
    progress?: IntFieldUpdateOperationsInput | number
    isEarned?: BoolFieldUpdateOperationsInput | boolean
    earnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutStudentAchievementsNestedInput
    achievement?: AchievementUpdateOneRequiredWithoutStudentAchievementsNestedInput
  }

  export type StudentAchievementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    achievementId?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    isEarned?: BoolFieldUpdateOperationsInput | boolean
    earnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAchievementCreateManyInput = {
    id?: number
    studentId: number
    achievementId: number
    progress?: number
    isEarned?: boolean
    earnedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type StudentAchievementUpdateManyMutationInput = {
    progress?: IntFieldUpdateOperationsInput | number
    isEarned?: BoolFieldUpdateOperationsInput | boolean
    earnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAchievementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    achievementId?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    isEarned?: BoolFieldUpdateOperationsInput | boolean
    earnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentStreakCreateInput = {
    currentStreak?: number
    longestStreak?: number
    lastAttendanceDate?: Date | string | null
    streakStartDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutStudentStreaksInput
    class: ClassCreateNestedOneWithoutStudentStreaksInput
  }

  export type StudentStreakUncheckedCreateInput = {
    id?: number
    studentId: number
    classId: number
    currentStreak?: number
    longestStreak?: number
    lastAttendanceDate?: Date | string | null
    streakStartDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentStreakUpdateInput = {
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    streakStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutStudentStreaksNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentStreaksNestedInput
  }

  export type StudentStreakUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    streakStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentStreakCreateManyInput = {
    id?: number
    studentId: number
    classId: number
    currentStreak?: number
    longestStreak?: number
    lastAttendanceDate?: Date | string | null
    streakStartDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentStreakUpdateManyMutationInput = {
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    streakStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentStreakUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    streakStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaderboardRankingCreateInput = {
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutLeaderboardRankingsInput
    class?: ClassCreateNestedOneWithoutLeaderboardRankingsInput
    department?: DepartmentCreateNestedOneWithoutLeaderboardRankingsInput
  }

  export type LeaderboardRankingUncheckedCreateInput = {
    id?: number
    studentId: number
    classId?: number | null
    departmentId?: number | null
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type LeaderboardRankingUpdateInput = {
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutLeaderboardRankingsNestedInput
    class?: ClassUpdateOneWithoutLeaderboardRankingsNestedInput
    department?: DepartmentUpdateOneWithoutLeaderboardRankingsNestedInput
  }

  export type LeaderboardRankingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaderboardRankingCreateManyInput = {
    id?: number
    studentId: number
    classId?: number | null
    departmentId?: number | null
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type LeaderboardRankingUpdateManyMutationInput = {
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaderboardRankingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeofenceSettingsCreateInput = {
    defaultRadius?: number
    enabled?: boolean
    allowOverride?: boolean
    accuracyThreshold?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeofenceSettingsUncheckedCreateInput = {
    id?: number
    defaultRadius?: number
    enabled?: boolean
    allowOverride?: boolean
    accuracyThreshold?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeofenceSettingsUpdateInput = {
    defaultRadius?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    allowOverride?: BoolFieldUpdateOperationsInput | boolean
    accuracyThreshold?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeofenceSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    defaultRadius?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    allowOverride?: BoolFieldUpdateOperationsInput | boolean
    accuracyThreshold?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeofenceSettingsCreateManyInput = {
    id?: number
    defaultRadius?: number
    enabled?: boolean
    allowOverride?: boolean
    accuracyThreshold?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeofenceSettingsUpdateManyMutationInput = {
    defaultRadius?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    allowOverride?: BoolFieldUpdateOperationsInput | boolean
    accuracyThreshold?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeofenceSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    defaultRadius?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    allowOverride?: BoolFieldUpdateOperationsInput | boolean
    accuracyThreshold?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassLocationCreateInput = {
    name: string
    latitude: number
    longitude: number
    radius?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutClassLocationsInput
  }

  export type ClassLocationUncheckedCreateInput = {
    id?: number
    classId: number
    name: string
    latitude: number
    longitude: number
    radius?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassLocationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    radius?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutClassLocationsNestedInput
  }

  export type ClassLocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    radius?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassLocationCreateManyInput = {
    id?: number
    classId: number
    name: string
    latitude: number
    longitude: number
    radius?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassLocationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    radius?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassLocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    radius?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AdminNullableScalarRelationFilter = {
    is?: AdminWhereInput | null
    isNot?: AdminWhereInput | null
  }

  export type StaffNullableScalarRelationFilter = {
    is?: StaffWhereInput | null
    isNot?: StaffWhereInput | null
  }

  export type StudentNullableScalarRelationFilter = {
    is?: StudentWhereInput | null
    isNot?: StudentWhereInput | null
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    status?: SortOrder
    phone?: SortOrder
    avatarUrl?: SortOrder
    lastSeen?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    status?: SortOrder
    phone?: SortOrder
    avatarUrl?: SortOrder
    lastSeen?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    status?: SortOrder
    phone?: SortOrder
    avatarUrl?: SortOrder
    lastSeen?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    adminLevel?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    adminLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    adminLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type AttendanceSessionListRelationFilter = {
    every?: AttendanceSessionWhereInput
    some?: AttendanceSessionWhereInput
    none?: AttendanceSessionWhereInput
  }

  export type AttendanceRecordListRelationFilter = {
    every?: AttendanceRecordWhereInput
    some?: AttendanceRecordWhereInput
    none?: AttendanceRecordWhereInput
  }

  export type AbsenceJustificationListRelationFilter = {
    every?: AbsenceJustificationWhereInput
    some?: AbsenceJustificationWhereInput
    none?: AbsenceJustificationWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type StudentAlertListRelationFilter = {
    every?: StudentAlertWhereInput
    some?: StudentAlertWhereInput
    none?: StudentAlertWhereInput
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AbsenceJustificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentAlertOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    department?: SortOrder
    position?: SortOrder
    joinDate?: SortOrder
    salary?: SortOrder
    officeLocation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    salary?: SortOrder
  }

  export type StaffMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    department?: SortOrder
    position?: SortOrder
    joinDate?: SortOrder
    salary?: SortOrder
    officeLocation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    department?: SortOrder
    position?: SortOrder
    joinDate?: SortOrder
    salary?: SortOrder
    officeLocation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    salary?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type ClassEnrollmentListRelationFilter = {
    every?: ClassEnrollmentWhereInput
    some?: ClassEnrollmentWhereInput
    none?: ClassEnrollmentWhereInput
  }

  export type StudentRiskTrackingListRelationFilter = {
    every?: StudentRiskTrackingWhereInput
    some?: StudentRiskTrackingWhereInput
    none?: StudentRiskTrackingWhereInput
  }

  export type StudentPointListRelationFilter = {
    every?: StudentPointWhereInput
    some?: StudentPointWhereInput
    none?: StudentPointWhereInput
  }

  export type StudentAchievementListRelationFilter = {
    every?: StudentAchievementWhereInput
    some?: StudentAchievementWhereInput
    none?: StudentAchievementWhereInput
  }

  export type StudentStreakListRelationFilter = {
    every?: StudentStreakWhereInput
    some?: StudentStreakWhereInput
    none?: StudentStreakWhereInput
  }

  export type LeaderboardRankingListRelationFilter = {
    every?: LeaderboardRankingWhereInput
    some?: LeaderboardRankingWhereInput
    none?: LeaderboardRankingWhereInput
  }

  export type ClassEnrollmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentRiskTrackingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentPointOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentAchievementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentStreakOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaderboardRankingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    studentId?: SortOrder
    class?: SortOrder
    section?: SortOrder
    year?: SortOrder
    enrollmentDate?: SortOrder
    gpa?: SortOrder
    parentEmail?: SortOrder
    parentPhone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gpa?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    studentId?: SortOrder
    class?: SortOrder
    section?: SortOrder
    year?: SortOrder
    enrollmentDate?: SortOrder
    gpa?: SortOrder
    parentEmail?: SortOrder
    parentPhone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    studentId?: SortOrder
    class?: SortOrder
    section?: SortOrder
    year?: SortOrder
    enrollmentDate?: SortOrder
    gpa?: SortOrder
    parentEmail?: SortOrder
    parentPhone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gpa?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ClassLocationListRelationFilter = {
    every?: ClassLocationWhereInput
    some?: ClassLocationWhereInput
    none?: ClassLocationWhereInput
  }

  export type ClassLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    facultyId?: SortOrder
    room?: SortOrder
    capacity?: SortOrder
    schedule?: SortOrder
    department?: SortOrder
    semester?: SortOrder
    academicYear?: SortOrder
    credits?: SortOrder
    classType?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadius?: SortOrder
    geofenceEnabled?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    id?: SortOrder
    facultyId?: SortOrder
    capacity?: SortOrder
    credits?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadius?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    facultyId?: SortOrder
    room?: SortOrder
    capacity?: SortOrder
    schedule?: SortOrder
    department?: SortOrder
    semester?: SortOrder
    academicYear?: SortOrder
    credits?: SortOrder
    classType?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadius?: SortOrder
    geofenceEnabled?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    facultyId?: SortOrder
    room?: SortOrder
    capacity?: SortOrder
    schedule?: SortOrder
    department?: SortOrder
    semester?: SortOrder
    academicYear?: SortOrder
    credits?: SortOrder
    classType?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadius?: SortOrder
    geofenceEnabled?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    id?: SortOrder
    facultyId?: SortOrder
    capacity?: SortOrder
    credits?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadius?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type ClassScalarRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type ClassEnrollmentStudentIdClassIdCompoundUniqueInput = {
    studentId: number
    classId: number
  }

  export type ClassEnrollmentCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    grade?: SortOrder
    createdAt?: SortOrder
  }

  export type ClassEnrollmentAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
  }

  export type ClassEnrollmentMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    grade?: SortOrder
    createdAt?: SortOrder
  }

  export type ClassEnrollmentMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    grade?: SortOrder
    createdAt?: SortOrder
  }

  export type ClassEnrollmentSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
  }

  export type EnumAttendanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusFilter<$PrismaModel> | $Enums.AttendanceStatus
  }

  export type EnumAttendanceMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceMethod | EnumAttendanceMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceMethodFilter<$PrismaModel> | $Enums.AttendanceMethod
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AttendanceRecordStudentIdClassIdSessionDateCompoundUniqueInput = {
    studentId: number
    classId: number
    sessionDate: Date | string
  }

  export type AttendanceRecordCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    sessionDate?: SortOrder
    sessionTime?: SortOrder
    status?: SortOrder
    checkInTime?: SortOrder
    method?: SortOrder
    qrSessionId?: SortOrder
    scanTimestamp?: SortOrder
    isJustified?: SortOrder
    justificationId?: SortOrder
    studentLatitude?: SortOrder
    studentLongitude?: SortOrder
    distanceFromClass?: SortOrder
    locationVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    recordedBy?: SortOrder
  }

  export type AttendanceRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    justificationId?: SortOrder
    studentLatitude?: SortOrder
    studentLongitude?: SortOrder
    distanceFromClass?: SortOrder
    recordedBy?: SortOrder
  }

  export type AttendanceRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    sessionDate?: SortOrder
    sessionTime?: SortOrder
    status?: SortOrder
    checkInTime?: SortOrder
    method?: SortOrder
    qrSessionId?: SortOrder
    scanTimestamp?: SortOrder
    isJustified?: SortOrder
    justificationId?: SortOrder
    studentLatitude?: SortOrder
    studentLongitude?: SortOrder
    distanceFromClass?: SortOrder
    locationVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    recordedBy?: SortOrder
  }

  export type AttendanceRecordMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    sessionDate?: SortOrder
    sessionTime?: SortOrder
    status?: SortOrder
    checkInTime?: SortOrder
    method?: SortOrder
    qrSessionId?: SortOrder
    scanTimestamp?: SortOrder
    isJustified?: SortOrder
    justificationId?: SortOrder
    studentLatitude?: SortOrder
    studentLongitude?: SortOrder
    distanceFromClass?: SortOrder
    locationVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    recordedBy?: SortOrder
  }

  export type AttendanceRecordSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    justificationId?: SortOrder
    studentLatitude?: SortOrder
    studentLongitude?: SortOrder
    distanceFromClass?: SortOrder
    recordedBy?: SortOrder
  }

  export type EnumAttendanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendanceStatusFilter<$PrismaModel>
  }

  export type EnumAttendanceMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceMethod | EnumAttendanceMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceMethodWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceMethodFilter<$PrismaModel>
    _max?: NestedEnumAttendanceMethodFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumSessionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionType | EnumSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionTypeFilter<$PrismaModel> | $Enums.SessionType
  }

  export type EnumPlanningStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanningStatus | EnumPlanningStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PlanningStatus[] | ListEnumPlanningStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanningStatus[] | ListEnumPlanningStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanningStatusFilter<$PrismaModel> | $Enums.PlanningStatus
  }

  export type StaffScalarRelationFilter = {
    is?: StaffWhereInput
    isNot?: StaffWhereInput
  }

  export type QRSessionListRelationFilter = {
    every?: QRSessionWhereInput
    some?: QRSessionWhereInput
    none?: QRSessionWhereInput
  }

  export type QRSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceSessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    classId?: SortOrder
    createdBy?: SortOrder
    sessionDate?: SortOrder
    sessionTime?: SortOrder
    sessionType?: SortOrder
    location?: SortOrder
    plannedTopic?: SortOrder
    targetLearning?: SortOrder
    targetLevel?: SortOrder
    planningStatus?: SortOrder
    notes?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadius?: SortOrder
    expiresAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    createdBy?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadius?: SortOrder
  }

  export type AttendanceSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    classId?: SortOrder
    createdBy?: SortOrder
    sessionDate?: SortOrder
    sessionTime?: SortOrder
    sessionType?: SortOrder
    location?: SortOrder
    plannedTopic?: SortOrder
    targetLearning?: SortOrder
    targetLevel?: SortOrder
    planningStatus?: SortOrder
    notes?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadius?: SortOrder
    expiresAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceSessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    classId?: SortOrder
    createdBy?: SortOrder
    sessionDate?: SortOrder
    sessionTime?: SortOrder
    sessionType?: SortOrder
    location?: SortOrder
    plannedTopic?: SortOrder
    targetLearning?: SortOrder
    targetLevel?: SortOrder
    planningStatus?: SortOrder
    notes?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadius?: SortOrder
    expiresAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceSessionSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    createdBy?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadius?: SortOrder
  }

  export type EnumSessionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionType | EnumSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SessionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionTypeFilter<$PrismaModel>
    _max?: NestedEnumSessionTypeFilter<$PrismaModel>
  }

  export type EnumPlanningStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanningStatus | EnumPlanningStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PlanningStatus[] | ListEnumPlanningStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanningStatus[] | ListEnumPlanningStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanningStatusWithAggregatesFilter<$PrismaModel> | $Enums.PlanningStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanningStatusFilter<$PrismaModel>
    _max?: NestedEnumPlanningStatusFilter<$PrismaModel>
  }

  export type AttendanceSessionScalarRelationFilter = {
    is?: AttendanceSessionWhereInput
    isNot?: AttendanceSessionWhereInput
  }

  export type QRSessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    attendanceSessionId?: SortOrder
    qrData?: SortOrder
    scanCount?: SortOrder
    maxScans?: SortOrder
    expiresAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type QRSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    attendanceSessionId?: SortOrder
    scanCount?: SortOrder
    maxScans?: SortOrder
  }

  export type QRSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    attendanceSessionId?: SortOrder
    qrData?: SortOrder
    scanCount?: SortOrder
    maxScans?: SortOrder
    expiresAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type QRSessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    attendanceSessionId?: SortOrder
    qrData?: SortOrder
    scanCount?: SortOrder
    maxScans?: SortOrder
    expiresAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type QRSessionSumOrderByAggregateInput = {
    id?: SortOrder
    attendanceSessionId?: SortOrder
    scanCount?: SortOrder
    maxScans?: SortOrder
  }

  export type EnumJustificationReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.JustificationReason | EnumJustificationReasonFieldRefInput<$PrismaModel>
    in?: $Enums.JustificationReason[] | ListEnumJustificationReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.JustificationReason[] | ListEnumJustificationReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumJustificationReasonFilter<$PrismaModel> | $Enums.JustificationReason
  }

  export type EnumJustificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JustificationStatus | EnumJustificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JustificationStatus[] | ListEnumJustificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JustificationStatus[] | ListEnumJustificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJustificationStatusFilter<$PrismaModel> | $Enums.JustificationStatus
  }

  export type AttendanceRecordNullableScalarRelationFilter = {
    is?: AttendanceRecordWhereInput | null
    isNot?: AttendanceRecordWhereInput | null
  }

  export type AbsenceJustificationCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    attendanceRecordId?: SortOrder
    absenceDate?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    documents?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    reviewNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AbsenceJustificationAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    attendanceRecordId?: SortOrder
    reviewedBy?: SortOrder
  }

  export type AbsenceJustificationMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    attendanceRecordId?: SortOrder
    absenceDate?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    reviewNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AbsenceJustificationMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    attendanceRecordId?: SortOrder
    absenceDate?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    reviewNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AbsenceJustificationSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    attendanceRecordId?: SortOrder
    reviewedBy?: SortOrder
  }

  export type EnumJustificationReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JustificationReason | EnumJustificationReasonFieldRefInput<$PrismaModel>
    in?: $Enums.JustificationReason[] | ListEnumJustificationReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.JustificationReason[] | ListEnumJustificationReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumJustificationReasonWithAggregatesFilter<$PrismaModel> | $Enums.JustificationReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJustificationReasonFilter<$PrismaModel>
    _max?: NestedEnumJustificationReasonFilter<$PrismaModel>
  }

  export type EnumJustificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JustificationStatus | EnumJustificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JustificationStatus[] | ListEnumJustificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JustificationStatus[] | ListEnumJustificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJustificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.JustificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJustificationStatusFilter<$PrismaModel>
    _max?: NestedEnumJustificationStatusFilter<$PrismaModel>
  }

  export type EnumDepartmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentType | EnumDepartmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentType[] | ListEnumDepartmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentType[] | ListEnumDepartmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentTypeFilter<$PrismaModel> | $Enums.DepartmentType
  }

  export type EnumDepartmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentStatus | EnumDepartmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentStatus[] | ListEnumDepartmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentStatus[] | ListEnumDepartmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentStatusFilter<$PrismaModel> | $Enums.DepartmentStatus
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    headId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    programsCount?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    id?: SortOrder
    headId?: SortOrder
    programsCount?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    headId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    programsCount?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    headId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    programsCount?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    id?: SortOrder
    headId?: SortOrder
    programsCount?: SortOrder
  }

  export type EnumDepartmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentType | EnumDepartmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentType[] | ListEnumDepartmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentType[] | ListEnumDepartmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DepartmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentTypeFilter<$PrismaModel>
    _max?: NestedEnumDepartmentTypeFilter<$PrismaModel>
  }

  export type EnumDepartmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentStatus | EnumDepartmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentStatus[] | ListEnumDepartmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentStatus[] | ListEnumDepartmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.DepartmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentStatusFilter<$PrismaModel>
    _max?: NestedEnumDepartmentStatusFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type EnumNotificationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityFilter<$PrismaModel> | $Enums.NotificationPriority
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    priority?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumNotificationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.NotificationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationPriorityFilter<$PrismaModel>
    _max?: NestedEnumNotificationPriorityFilter<$PrismaModel>
  }

  export type EnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type StudentRiskTrackingCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    riskLevel?: SortOrder
    attendanceRate?: SortOrder
    consecutiveAbsences?: SortOrder
    totalAbsences?: SortOrder
    lastAttendanceDate?: SortOrder
    parentEmail?: SortOrder
    parentPhone?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentRiskTrackingAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    attendanceRate?: SortOrder
    consecutiveAbsences?: SortOrder
    totalAbsences?: SortOrder
  }

  export type StudentRiskTrackingMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    riskLevel?: SortOrder
    attendanceRate?: SortOrder
    consecutiveAbsences?: SortOrder
    totalAbsences?: SortOrder
    lastAttendanceDate?: SortOrder
    parentEmail?: SortOrder
    parentPhone?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentRiskTrackingMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    riskLevel?: SortOrder
    attendanceRate?: SortOrder
    consecutiveAbsences?: SortOrder
    totalAbsences?: SortOrder
    lastAttendanceDate?: SortOrder
    parentEmail?: SortOrder
    parentPhone?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentRiskTrackingSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    attendanceRate?: SortOrder
    consecutiveAbsences?: SortOrder
    totalAbsences?: SortOrder
  }

  export type EnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumAlertTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeFilter<$PrismaModel> | $Enums.AlertType
  }

  export type EnumAlertStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStatusFilter<$PrismaModel> | $Enums.AlertStatus
  }

  export type StudentAlertCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    alertType?: SortOrder
    message?: SortOrder
    recipient?: SortOrder
    status?: SortOrder
    sentBy?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentAlertAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    sentBy?: SortOrder
  }

  export type StudentAlertMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    alertType?: SortOrder
    message?: SortOrder
    recipient?: SortOrder
    status?: SortOrder
    sentBy?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentAlertMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    alertType?: SortOrder
    message?: SortOrder
    recipient?: SortOrder
    status?: SortOrder
    sentBy?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentAlertSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    sentBy?: SortOrder
  }

  export type EnumAlertTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeWithAggregatesFilter<$PrismaModel> | $Enums.AlertType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertTypeFilter<$PrismaModel>
    _max?: NestedEnumAlertTypeFilter<$PrismaModel>
  }

  export type EnumAlertStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStatusWithAggregatesFilter<$PrismaModel> | $Enums.AlertStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertStatusFilter<$PrismaModel>
    _max?: NestedEnumAlertStatusFilter<$PrismaModel>
  }

  export type ClassNullableScalarRelationFilter = {
    is?: ClassWhereInput | null
    isNot?: ClassWhereInput | null
  }

  export type StudentPointCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    points?: SortOrder
    pointType?: SortOrder
    description?: SortOrder
    referenceId?: SortOrder
    awardedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentPointAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    points?: SortOrder
    referenceId?: SortOrder
    awardedBy?: SortOrder
  }

  export type StudentPointMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    points?: SortOrder
    pointType?: SortOrder
    description?: SortOrder
    referenceId?: SortOrder
    awardedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentPointMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    points?: SortOrder
    pointType?: SortOrder
    description?: SortOrder
    referenceId?: SortOrder
    awardedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentPointSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    points?: SortOrder
    referenceId?: SortOrder
    awardedBy?: SortOrder
  }

  export type AchievementCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    icon?: SortOrder
    pointsReward?: SortOrder
    requirementType?: SortOrder
    requirementValue?: SortOrder
    requirementPeriod?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type AchievementAvgOrderByAggregateInput = {
    id?: SortOrder
    pointsReward?: SortOrder
    requirementValue?: SortOrder
    requirementPeriod?: SortOrder
  }

  export type AchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    icon?: SortOrder
    pointsReward?: SortOrder
    requirementType?: SortOrder
    requirementValue?: SortOrder
    requirementPeriod?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type AchievementMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    icon?: SortOrder
    pointsReward?: SortOrder
    requirementType?: SortOrder
    requirementValue?: SortOrder
    requirementPeriod?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type AchievementSumOrderByAggregateInput = {
    id?: SortOrder
    pointsReward?: SortOrder
    requirementValue?: SortOrder
    requirementPeriod?: SortOrder
  }

  export type AchievementScalarRelationFilter = {
    is?: AchievementWhereInput
    isNot?: AchievementWhereInput
  }

  export type StudentAchievementStudentIdAchievementIdCompoundUniqueInput = {
    studentId: number
    achievementId: number
  }

  export type StudentAchievementCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    achievementId?: SortOrder
    progress?: SortOrder
    isEarned?: SortOrder
    earnedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentAchievementAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    achievementId?: SortOrder
    progress?: SortOrder
  }

  export type StudentAchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    achievementId?: SortOrder
    progress?: SortOrder
    isEarned?: SortOrder
    earnedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentAchievementMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    achievementId?: SortOrder
    progress?: SortOrder
    isEarned?: SortOrder
    earnedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentAchievementSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    achievementId?: SortOrder
    progress?: SortOrder
  }

  export type StudentStreakStudentIdClassIdCompoundUniqueInput = {
    studentId: number
    classId: number
  }

  export type StudentStreakCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    lastAttendanceDate?: SortOrder
    streakStartDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentStreakAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
  }

  export type StudentStreakMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    lastAttendanceDate?: SortOrder
    streakStartDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentStreakMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    lastAttendanceDate?: SortOrder
    streakStartDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentStreakSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type LeaderboardRankingStudentIdPeriodScopePeriodStartCompoundUniqueInput = {
    studentId: number
    period: string
    scope: string
    periodStart: Date | string
  }

  export type LeaderboardRankingCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    departmentId?: SortOrder
    period?: SortOrder
    scope?: SortOrder
    rankPosition?: SortOrder
    totalPoints?: SortOrder
    attendanceRate?: SortOrder
    streakDays?: SortOrder
    achievementsCount?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
  }

  export type LeaderboardRankingAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    departmentId?: SortOrder
    rankPosition?: SortOrder
    totalPoints?: SortOrder
    attendanceRate?: SortOrder
    streakDays?: SortOrder
    achievementsCount?: SortOrder
  }

  export type LeaderboardRankingMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    departmentId?: SortOrder
    period?: SortOrder
    scope?: SortOrder
    rankPosition?: SortOrder
    totalPoints?: SortOrder
    attendanceRate?: SortOrder
    streakDays?: SortOrder
    achievementsCount?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
  }

  export type LeaderboardRankingMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    departmentId?: SortOrder
    period?: SortOrder
    scope?: SortOrder
    rankPosition?: SortOrder
    totalPoints?: SortOrder
    attendanceRate?: SortOrder
    streakDays?: SortOrder
    achievementsCount?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
  }

  export type LeaderboardRankingSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    departmentId?: SortOrder
    rankPosition?: SortOrder
    totalPoints?: SortOrder
    attendanceRate?: SortOrder
    streakDays?: SortOrder
    achievementsCount?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type GeofenceSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    defaultRadius?: SortOrder
    enabled?: SortOrder
    allowOverride?: SortOrder
    accuracyThreshold?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeofenceSettingsAvgOrderByAggregateInput = {
    id?: SortOrder
    defaultRadius?: SortOrder
    accuracyThreshold?: SortOrder
  }

  export type GeofenceSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    defaultRadius?: SortOrder
    enabled?: SortOrder
    allowOverride?: SortOrder
    accuracyThreshold?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeofenceSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    defaultRadius?: SortOrder
    enabled?: SortOrder
    allowOverride?: SortOrder
    accuracyThreshold?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeofenceSettingsSumOrderByAggregateInput = {
    id?: SortOrder
    defaultRadius?: SortOrder
    accuracyThreshold?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ClassLocationCountOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    radius?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassLocationAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    radius?: SortOrder
  }

  export type ClassLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    radius?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassLocationMinOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    radius?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassLocationSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    radius?: SortOrder
  }

  export type AdminCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    connect?: StaffWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AdminUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type StaffUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    connect?: StaffWhereUniqueInput
  }

  export type StudentUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AdminUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type StaffUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    upsert?: StaffUpsertWithoutUserInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutUserInput, StaffUpdateWithoutUserInput>, StaffUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AdminUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type StaffUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    upsert?: StaffUpsertWithoutUserInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutUserInput, StaffUpdateWithoutUserInput>, StaffUncheckedUpdateWithoutUserInput>
  }

  export type StudentUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAdminInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    upsert?: UserUpsertWithoutAdminInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminInput, UserUpdateWithoutAdminInput>, UserUncheckedUpdateWithoutAdminInput>
  }

  export type UserCreateNestedOneWithoutStaffInput = {
    create?: XOR<UserCreateWithoutStaffInput, UserUncheckedCreateWithoutStaffInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffInput
    connect?: UserWhereUniqueInput
  }

  export type ClassCreateNestedManyWithoutFacultyInput = {
    create?: XOR<ClassCreateWithoutFacultyInput, ClassUncheckedCreateWithoutFacultyInput> | ClassCreateWithoutFacultyInput[] | ClassUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutFacultyInput | ClassCreateOrConnectWithoutFacultyInput[]
    createMany?: ClassCreateManyFacultyInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type AttendanceSessionCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AttendanceSessionCreateWithoutCreatorInput, AttendanceSessionUncheckedCreateWithoutCreatorInput> | AttendanceSessionCreateWithoutCreatorInput[] | AttendanceSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AttendanceSessionCreateOrConnectWithoutCreatorInput | AttendanceSessionCreateOrConnectWithoutCreatorInput[]
    createMany?: AttendanceSessionCreateManyCreatorInputEnvelope
    connect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
  }

  export type AttendanceRecordCreateNestedManyWithoutRecordedByStaffInput = {
    create?: XOR<AttendanceRecordCreateWithoutRecordedByStaffInput, AttendanceRecordUncheckedCreateWithoutRecordedByStaffInput> | AttendanceRecordCreateWithoutRecordedByStaffInput[] | AttendanceRecordUncheckedCreateWithoutRecordedByStaffInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutRecordedByStaffInput | AttendanceRecordCreateOrConnectWithoutRecordedByStaffInput[]
    createMany?: AttendanceRecordCreateManyRecordedByStaffInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type AbsenceJustificationCreateNestedManyWithoutReviewedByStaffInput = {
    create?: XOR<AbsenceJustificationCreateWithoutReviewedByStaffInput, AbsenceJustificationUncheckedCreateWithoutReviewedByStaffInput> | AbsenceJustificationCreateWithoutReviewedByStaffInput[] | AbsenceJustificationUncheckedCreateWithoutReviewedByStaffInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutReviewedByStaffInput | AbsenceJustificationCreateOrConnectWithoutReviewedByStaffInput[]
    createMany?: AbsenceJustificationCreateManyReviewedByStaffInputEnvelope
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutHeadInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput> | DepartmentCreateWithoutHeadInput[] | DepartmentUncheckedCreateWithoutHeadInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput | DepartmentCreateOrConnectWithoutHeadInput[]
    createMany?: DepartmentCreateManyHeadInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type StudentAlertCreateNestedManyWithoutSentByStaffInput = {
    create?: XOR<StudentAlertCreateWithoutSentByStaffInput, StudentAlertUncheckedCreateWithoutSentByStaffInput> | StudentAlertCreateWithoutSentByStaffInput[] | StudentAlertUncheckedCreateWithoutSentByStaffInput[]
    connectOrCreate?: StudentAlertCreateOrConnectWithoutSentByStaffInput | StudentAlertCreateOrConnectWithoutSentByStaffInput[]
    createMany?: StudentAlertCreateManySentByStaffInputEnvelope
    connect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutFacultyInput = {
    create?: XOR<ClassCreateWithoutFacultyInput, ClassUncheckedCreateWithoutFacultyInput> | ClassCreateWithoutFacultyInput[] | ClassUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutFacultyInput | ClassCreateOrConnectWithoutFacultyInput[]
    createMany?: ClassCreateManyFacultyInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type AttendanceSessionUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AttendanceSessionCreateWithoutCreatorInput, AttendanceSessionUncheckedCreateWithoutCreatorInput> | AttendanceSessionCreateWithoutCreatorInput[] | AttendanceSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AttendanceSessionCreateOrConnectWithoutCreatorInput | AttendanceSessionCreateOrConnectWithoutCreatorInput[]
    createMany?: AttendanceSessionCreateManyCreatorInputEnvelope
    connect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
  }

  export type AttendanceRecordUncheckedCreateNestedManyWithoutRecordedByStaffInput = {
    create?: XOR<AttendanceRecordCreateWithoutRecordedByStaffInput, AttendanceRecordUncheckedCreateWithoutRecordedByStaffInput> | AttendanceRecordCreateWithoutRecordedByStaffInput[] | AttendanceRecordUncheckedCreateWithoutRecordedByStaffInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutRecordedByStaffInput | AttendanceRecordCreateOrConnectWithoutRecordedByStaffInput[]
    createMany?: AttendanceRecordCreateManyRecordedByStaffInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type AbsenceJustificationUncheckedCreateNestedManyWithoutReviewedByStaffInput = {
    create?: XOR<AbsenceJustificationCreateWithoutReviewedByStaffInput, AbsenceJustificationUncheckedCreateWithoutReviewedByStaffInput> | AbsenceJustificationCreateWithoutReviewedByStaffInput[] | AbsenceJustificationUncheckedCreateWithoutReviewedByStaffInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutReviewedByStaffInput | AbsenceJustificationCreateOrConnectWithoutReviewedByStaffInput[]
    createMany?: AbsenceJustificationCreateManyReviewedByStaffInputEnvelope
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutHeadInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput> | DepartmentCreateWithoutHeadInput[] | DepartmentUncheckedCreateWithoutHeadInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput | DepartmentCreateOrConnectWithoutHeadInput[]
    createMany?: DepartmentCreateManyHeadInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type StudentAlertUncheckedCreateNestedManyWithoutSentByStaffInput = {
    create?: XOR<StudentAlertCreateWithoutSentByStaffInput, StudentAlertUncheckedCreateWithoutSentByStaffInput> | StudentAlertCreateWithoutSentByStaffInput[] | StudentAlertUncheckedCreateWithoutSentByStaffInput[]
    connectOrCreate?: StudentAlertCreateOrConnectWithoutSentByStaffInput | StudentAlertCreateOrConnectWithoutSentByStaffInput[]
    createMany?: StudentAlertCreateManySentByStaffInputEnvelope
    connect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneRequiredWithoutStaffNestedInput = {
    create?: XOR<UserCreateWithoutStaffInput, UserUncheckedCreateWithoutStaffInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffInput
    upsert?: UserUpsertWithoutStaffInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStaffInput, UserUpdateWithoutStaffInput>, UserUncheckedUpdateWithoutStaffInput>
  }

  export type ClassUpdateManyWithoutFacultyNestedInput = {
    create?: XOR<ClassCreateWithoutFacultyInput, ClassUncheckedCreateWithoutFacultyInput> | ClassCreateWithoutFacultyInput[] | ClassUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutFacultyInput | ClassCreateOrConnectWithoutFacultyInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutFacultyInput | ClassUpsertWithWhereUniqueWithoutFacultyInput[]
    createMany?: ClassCreateManyFacultyInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutFacultyInput | ClassUpdateWithWhereUniqueWithoutFacultyInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutFacultyInput | ClassUpdateManyWithWhereWithoutFacultyInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type AttendanceSessionUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AttendanceSessionCreateWithoutCreatorInput, AttendanceSessionUncheckedCreateWithoutCreatorInput> | AttendanceSessionCreateWithoutCreatorInput[] | AttendanceSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AttendanceSessionCreateOrConnectWithoutCreatorInput | AttendanceSessionCreateOrConnectWithoutCreatorInput[]
    upsert?: AttendanceSessionUpsertWithWhereUniqueWithoutCreatorInput | AttendanceSessionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AttendanceSessionCreateManyCreatorInputEnvelope
    set?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    disconnect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    delete?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    connect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    update?: AttendanceSessionUpdateWithWhereUniqueWithoutCreatorInput | AttendanceSessionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AttendanceSessionUpdateManyWithWhereWithoutCreatorInput | AttendanceSessionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AttendanceSessionScalarWhereInput | AttendanceSessionScalarWhereInput[]
  }

  export type AttendanceRecordUpdateManyWithoutRecordedByStaffNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutRecordedByStaffInput, AttendanceRecordUncheckedCreateWithoutRecordedByStaffInput> | AttendanceRecordCreateWithoutRecordedByStaffInput[] | AttendanceRecordUncheckedCreateWithoutRecordedByStaffInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutRecordedByStaffInput | AttendanceRecordCreateOrConnectWithoutRecordedByStaffInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutRecordedByStaffInput | AttendanceRecordUpsertWithWhereUniqueWithoutRecordedByStaffInput[]
    createMany?: AttendanceRecordCreateManyRecordedByStaffInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutRecordedByStaffInput | AttendanceRecordUpdateWithWhereUniqueWithoutRecordedByStaffInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutRecordedByStaffInput | AttendanceRecordUpdateManyWithWhereWithoutRecordedByStaffInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type AbsenceJustificationUpdateManyWithoutReviewedByStaffNestedInput = {
    create?: XOR<AbsenceJustificationCreateWithoutReviewedByStaffInput, AbsenceJustificationUncheckedCreateWithoutReviewedByStaffInput> | AbsenceJustificationCreateWithoutReviewedByStaffInput[] | AbsenceJustificationUncheckedCreateWithoutReviewedByStaffInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutReviewedByStaffInput | AbsenceJustificationCreateOrConnectWithoutReviewedByStaffInput[]
    upsert?: AbsenceJustificationUpsertWithWhereUniqueWithoutReviewedByStaffInput | AbsenceJustificationUpsertWithWhereUniqueWithoutReviewedByStaffInput[]
    createMany?: AbsenceJustificationCreateManyReviewedByStaffInputEnvelope
    set?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    disconnect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    delete?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    update?: AbsenceJustificationUpdateWithWhereUniqueWithoutReviewedByStaffInput | AbsenceJustificationUpdateWithWhereUniqueWithoutReviewedByStaffInput[]
    updateMany?: AbsenceJustificationUpdateManyWithWhereWithoutReviewedByStaffInput | AbsenceJustificationUpdateManyWithWhereWithoutReviewedByStaffInput[]
    deleteMany?: AbsenceJustificationScalarWhereInput | AbsenceJustificationScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutHeadNestedInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput> | DepartmentCreateWithoutHeadInput[] | DepartmentUncheckedCreateWithoutHeadInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput | DepartmentCreateOrConnectWithoutHeadInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutHeadInput | DepartmentUpsertWithWhereUniqueWithoutHeadInput[]
    createMany?: DepartmentCreateManyHeadInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutHeadInput | DepartmentUpdateWithWhereUniqueWithoutHeadInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutHeadInput | DepartmentUpdateManyWithWhereWithoutHeadInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type StudentAlertUpdateManyWithoutSentByStaffNestedInput = {
    create?: XOR<StudentAlertCreateWithoutSentByStaffInput, StudentAlertUncheckedCreateWithoutSentByStaffInput> | StudentAlertCreateWithoutSentByStaffInput[] | StudentAlertUncheckedCreateWithoutSentByStaffInput[]
    connectOrCreate?: StudentAlertCreateOrConnectWithoutSentByStaffInput | StudentAlertCreateOrConnectWithoutSentByStaffInput[]
    upsert?: StudentAlertUpsertWithWhereUniqueWithoutSentByStaffInput | StudentAlertUpsertWithWhereUniqueWithoutSentByStaffInput[]
    createMany?: StudentAlertCreateManySentByStaffInputEnvelope
    set?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    disconnect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    delete?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    connect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    update?: StudentAlertUpdateWithWhereUniqueWithoutSentByStaffInput | StudentAlertUpdateWithWhereUniqueWithoutSentByStaffInput[]
    updateMany?: StudentAlertUpdateManyWithWhereWithoutSentByStaffInput | StudentAlertUpdateManyWithWhereWithoutSentByStaffInput[]
    deleteMany?: StudentAlertScalarWhereInput | StudentAlertScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutFacultyNestedInput = {
    create?: XOR<ClassCreateWithoutFacultyInput, ClassUncheckedCreateWithoutFacultyInput> | ClassCreateWithoutFacultyInput[] | ClassUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutFacultyInput | ClassCreateOrConnectWithoutFacultyInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutFacultyInput | ClassUpsertWithWhereUniqueWithoutFacultyInput[]
    createMany?: ClassCreateManyFacultyInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutFacultyInput | ClassUpdateWithWhereUniqueWithoutFacultyInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutFacultyInput | ClassUpdateManyWithWhereWithoutFacultyInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type AttendanceSessionUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AttendanceSessionCreateWithoutCreatorInput, AttendanceSessionUncheckedCreateWithoutCreatorInput> | AttendanceSessionCreateWithoutCreatorInput[] | AttendanceSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AttendanceSessionCreateOrConnectWithoutCreatorInput | AttendanceSessionCreateOrConnectWithoutCreatorInput[]
    upsert?: AttendanceSessionUpsertWithWhereUniqueWithoutCreatorInput | AttendanceSessionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AttendanceSessionCreateManyCreatorInputEnvelope
    set?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    disconnect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    delete?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    connect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    update?: AttendanceSessionUpdateWithWhereUniqueWithoutCreatorInput | AttendanceSessionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AttendanceSessionUpdateManyWithWhereWithoutCreatorInput | AttendanceSessionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AttendanceSessionScalarWhereInput | AttendanceSessionScalarWhereInput[]
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutRecordedByStaffNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutRecordedByStaffInput, AttendanceRecordUncheckedCreateWithoutRecordedByStaffInput> | AttendanceRecordCreateWithoutRecordedByStaffInput[] | AttendanceRecordUncheckedCreateWithoutRecordedByStaffInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutRecordedByStaffInput | AttendanceRecordCreateOrConnectWithoutRecordedByStaffInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutRecordedByStaffInput | AttendanceRecordUpsertWithWhereUniqueWithoutRecordedByStaffInput[]
    createMany?: AttendanceRecordCreateManyRecordedByStaffInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutRecordedByStaffInput | AttendanceRecordUpdateWithWhereUniqueWithoutRecordedByStaffInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutRecordedByStaffInput | AttendanceRecordUpdateManyWithWhereWithoutRecordedByStaffInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type AbsenceJustificationUncheckedUpdateManyWithoutReviewedByStaffNestedInput = {
    create?: XOR<AbsenceJustificationCreateWithoutReviewedByStaffInput, AbsenceJustificationUncheckedCreateWithoutReviewedByStaffInput> | AbsenceJustificationCreateWithoutReviewedByStaffInput[] | AbsenceJustificationUncheckedCreateWithoutReviewedByStaffInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutReviewedByStaffInput | AbsenceJustificationCreateOrConnectWithoutReviewedByStaffInput[]
    upsert?: AbsenceJustificationUpsertWithWhereUniqueWithoutReviewedByStaffInput | AbsenceJustificationUpsertWithWhereUniqueWithoutReviewedByStaffInput[]
    createMany?: AbsenceJustificationCreateManyReviewedByStaffInputEnvelope
    set?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    disconnect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    delete?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    update?: AbsenceJustificationUpdateWithWhereUniqueWithoutReviewedByStaffInput | AbsenceJustificationUpdateWithWhereUniqueWithoutReviewedByStaffInput[]
    updateMany?: AbsenceJustificationUpdateManyWithWhereWithoutReviewedByStaffInput | AbsenceJustificationUpdateManyWithWhereWithoutReviewedByStaffInput[]
    deleteMany?: AbsenceJustificationScalarWhereInput | AbsenceJustificationScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutHeadNestedInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput> | DepartmentCreateWithoutHeadInput[] | DepartmentUncheckedCreateWithoutHeadInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput | DepartmentCreateOrConnectWithoutHeadInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutHeadInput | DepartmentUpsertWithWhereUniqueWithoutHeadInput[]
    createMany?: DepartmentCreateManyHeadInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutHeadInput | DepartmentUpdateWithWhereUniqueWithoutHeadInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutHeadInput | DepartmentUpdateManyWithWhereWithoutHeadInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type StudentAlertUncheckedUpdateManyWithoutSentByStaffNestedInput = {
    create?: XOR<StudentAlertCreateWithoutSentByStaffInput, StudentAlertUncheckedCreateWithoutSentByStaffInput> | StudentAlertCreateWithoutSentByStaffInput[] | StudentAlertUncheckedCreateWithoutSentByStaffInput[]
    connectOrCreate?: StudentAlertCreateOrConnectWithoutSentByStaffInput | StudentAlertCreateOrConnectWithoutSentByStaffInput[]
    upsert?: StudentAlertUpsertWithWhereUniqueWithoutSentByStaffInput | StudentAlertUpsertWithWhereUniqueWithoutSentByStaffInput[]
    createMany?: StudentAlertCreateManySentByStaffInputEnvelope
    set?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    disconnect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    delete?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    connect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    update?: StudentAlertUpdateWithWhereUniqueWithoutSentByStaffInput | StudentAlertUpdateWithWhereUniqueWithoutSentByStaffInput[]
    updateMany?: StudentAlertUpdateManyWithWhereWithoutSentByStaffInput | StudentAlertUpdateManyWithWhereWithoutSentByStaffInput[]
    deleteMany?: StudentAlertScalarWhereInput | StudentAlertScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutStudentInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    connect?: UserWhereUniqueInput
  }

  export type ClassEnrollmentCreateNestedManyWithoutStudentInput = {
    create?: XOR<ClassEnrollmentCreateWithoutStudentInput, ClassEnrollmentUncheckedCreateWithoutStudentInput> | ClassEnrollmentCreateWithoutStudentInput[] | ClassEnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ClassEnrollmentCreateOrConnectWithoutStudentInput | ClassEnrollmentCreateOrConnectWithoutStudentInput[]
    createMany?: ClassEnrollmentCreateManyStudentInputEnvelope
    connect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
  }

  export type AttendanceRecordCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput> | AttendanceRecordCreateWithoutStudentInput[] | AttendanceRecordUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutStudentInput | AttendanceRecordCreateOrConnectWithoutStudentInput[]
    createMany?: AttendanceRecordCreateManyStudentInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type AbsenceJustificationCreateNestedManyWithoutStudentInput = {
    create?: XOR<AbsenceJustificationCreateWithoutStudentInput, AbsenceJustificationUncheckedCreateWithoutStudentInput> | AbsenceJustificationCreateWithoutStudentInput[] | AbsenceJustificationUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutStudentInput | AbsenceJustificationCreateOrConnectWithoutStudentInput[]
    createMany?: AbsenceJustificationCreateManyStudentInputEnvelope
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
  }

  export type StudentRiskTrackingCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentRiskTrackingCreateWithoutStudentInput, StudentRiskTrackingUncheckedCreateWithoutStudentInput> | StudentRiskTrackingCreateWithoutStudentInput[] | StudentRiskTrackingUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentRiskTrackingCreateOrConnectWithoutStudentInput | StudentRiskTrackingCreateOrConnectWithoutStudentInput[]
    createMany?: StudentRiskTrackingCreateManyStudentInputEnvelope
    connect?: StudentRiskTrackingWhereUniqueInput | StudentRiskTrackingWhereUniqueInput[]
  }

  export type StudentAlertCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentAlertCreateWithoutStudentInput, StudentAlertUncheckedCreateWithoutStudentInput> | StudentAlertCreateWithoutStudentInput[] | StudentAlertUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAlertCreateOrConnectWithoutStudentInput | StudentAlertCreateOrConnectWithoutStudentInput[]
    createMany?: StudentAlertCreateManyStudentInputEnvelope
    connect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
  }

  export type StudentPointCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentPointCreateWithoutStudentInput, StudentPointUncheckedCreateWithoutStudentInput> | StudentPointCreateWithoutStudentInput[] | StudentPointUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPointCreateOrConnectWithoutStudentInput | StudentPointCreateOrConnectWithoutStudentInput[]
    createMany?: StudentPointCreateManyStudentInputEnvelope
    connect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
  }

  export type StudentAchievementCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentAchievementCreateWithoutStudentInput, StudentAchievementUncheckedCreateWithoutStudentInput> | StudentAchievementCreateWithoutStudentInput[] | StudentAchievementUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAchievementCreateOrConnectWithoutStudentInput | StudentAchievementCreateOrConnectWithoutStudentInput[]
    createMany?: StudentAchievementCreateManyStudentInputEnvelope
    connect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
  }

  export type StudentStreakCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentStreakCreateWithoutStudentInput, StudentStreakUncheckedCreateWithoutStudentInput> | StudentStreakCreateWithoutStudentInput[] | StudentStreakUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentStreakCreateOrConnectWithoutStudentInput | StudentStreakCreateOrConnectWithoutStudentInput[]
    createMany?: StudentStreakCreateManyStudentInputEnvelope
    connect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
  }

  export type LeaderboardRankingCreateNestedManyWithoutStudentInput = {
    create?: XOR<LeaderboardRankingCreateWithoutStudentInput, LeaderboardRankingUncheckedCreateWithoutStudentInput> | LeaderboardRankingCreateWithoutStudentInput[] | LeaderboardRankingUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutStudentInput | LeaderboardRankingCreateOrConnectWithoutStudentInput[]
    createMany?: LeaderboardRankingCreateManyStudentInputEnvelope
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
  }

  export type ClassEnrollmentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<ClassEnrollmentCreateWithoutStudentInput, ClassEnrollmentUncheckedCreateWithoutStudentInput> | ClassEnrollmentCreateWithoutStudentInput[] | ClassEnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ClassEnrollmentCreateOrConnectWithoutStudentInput | ClassEnrollmentCreateOrConnectWithoutStudentInput[]
    createMany?: ClassEnrollmentCreateManyStudentInputEnvelope
    connect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
  }

  export type AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput> | AttendanceRecordCreateWithoutStudentInput[] | AttendanceRecordUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutStudentInput | AttendanceRecordCreateOrConnectWithoutStudentInput[]
    createMany?: AttendanceRecordCreateManyStudentInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type AbsenceJustificationUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AbsenceJustificationCreateWithoutStudentInput, AbsenceJustificationUncheckedCreateWithoutStudentInput> | AbsenceJustificationCreateWithoutStudentInput[] | AbsenceJustificationUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutStudentInput | AbsenceJustificationCreateOrConnectWithoutStudentInput[]
    createMany?: AbsenceJustificationCreateManyStudentInputEnvelope
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
  }

  export type StudentRiskTrackingUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentRiskTrackingCreateWithoutStudentInput, StudentRiskTrackingUncheckedCreateWithoutStudentInput> | StudentRiskTrackingCreateWithoutStudentInput[] | StudentRiskTrackingUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentRiskTrackingCreateOrConnectWithoutStudentInput | StudentRiskTrackingCreateOrConnectWithoutStudentInput[]
    createMany?: StudentRiskTrackingCreateManyStudentInputEnvelope
    connect?: StudentRiskTrackingWhereUniqueInput | StudentRiskTrackingWhereUniqueInput[]
  }

  export type StudentAlertUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentAlertCreateWithoutStudentInput, StudentAlertUncheckedCreateWithoutStudentInput> | StudentAlertCreateWithoutStudentInput[] | StudentAlertUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAlertCreateOrConnectWithoutStudentInput | StudentAlertCreateOrConnectWithoutStudentInput[]
    createMany?: StudentAlertCreateManyStudentInputEnvelope
    connect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
  }

  export type StudentPointUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentPointCreateWithoutStudentInput, StudentPointUncheckedCreateWithoutStudentInput> | StudentPointCreateWithoutStudentInput[] | StudentPointUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPointCreateOrConnectWithoutStudentInput | StudentPointCreateOrConnectWithoutStudentInput[]
    createMany?: StudentPointCreateManyStudentInputEnvelope
    connect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
  }

  export type StudentAchievementUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentAchievementCreateWithoutStudentInput, StudentAchievementUncheckedCreateWithoutStudentInput> | StudentAchievementCreateWithoutStudentInput[] | StudentAchievementUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAchievementCreateOrConnectWithoutStudentInput | StudentAchievementCreateOrConnectWithoutStudentInput[]
    createMany?: StudentAchievementCreateManyStudentInputEnvelope
    connect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
  }

  export type StudentStreakUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentStreakCreateWithoutStudentInput, StudentStreakUncheckedCreateWithoutStudentInput> | StudentStreakCreateWithoutStudentInput[] | StudentStreakUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentStreakCreateOrConnectWithoutStudentInput | StudentStreakCreateOrConnectWithoutStudentInput[]
    createMany?: StudentStreakCreateManyStudentInputEnvelope
    connect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
  }

  export type LeaderboardRankingUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<LeaderboardRankingCreateWithoutStudentInput, LeaderboardRankingUncheckedCreateWithoutStudentInput> | LeaderboardRankingCreateWithoutStudentInput[] | LeaderboardRankingUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutStudentInput | LeaderboardRankingCreateOrConnectWithoutStudentInput[]
    createMany?: LeaderboardRankingCreateManyStudentInputEnvelope
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    upsert?: UserUpsertWithoutStudentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentInput, UserUpdateWithoutStudentInput>, UserUncheckedUpdateWithoutStudentInput>
  }

  export type ClassEnrollmentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ClassEnrollmentCreateWithoutStudentInput, ClassEnrollmentUncheckedCreateWithoutStudentInput> | ClassEnrollmentCreateWithoutStudentInput[] | ClassEnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ClassEnrollmentCreateOrConnectWithoutStudentInput | ClassEnrollmentCreateOrConnectWithoutStudentInput[]
    upsert?: ClassEnrollmentUpsertWithWhereUniqueWithoutStudentInput | ClassEnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ClassEnrollmentCreateManyStudentInputEnvelope
    set?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    disconnect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    delete?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    connect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    update?: ClassEnrollmentUpdateWithWhereUniqueWithoutStudentInput | ClassEnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ClassEnrollmentUpdateManyWithWhereWithoutStudentInput | ClassEnrollmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ClassEnrollmentScalarWhereInput | ClassEnrollmentScalarWhereInput[]
  }

  export type AttendanceRecordUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput> | AttendanceRecordCreateWithoutStudentInput[] | AttendanceRecordUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutStudentInput | AttendanceRecordCreateOrConnectWithoutStudentInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutStudentInput | AttendanceRecordUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendanceRecordCreateManyStudentInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutStudentInput | AttendanceRecordUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutStudentInput | AttendanceRecordUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type AbsenceJustificationUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AbsenceJustificationCreateWithoutStudentInput, AbsenceJustificationUncheckedCreateWithoutStudentInput> | AbsenceJustificationCreateWithoutStudentInput[] | AbsenceJustificationUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutStudentInput | AbsenceJustificationCreateOrConnectWithoutStudentInput[]
    upsert?: AbsenceJustificationUpsertWithWhereUniqueWithoutStudentInput | AbsenceJustificationUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AbsenceJustificationCreateManyStudentInputEnvelope
    set?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    disconnect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    delete?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    update?: AbsenceJustificationUpdateWithWhereUniqueWithoutStudentInput | AbsenceJustificationUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AbsenceJustificationUpdateManyWithWhereWithoutStudentInput | AbsenceJustificationUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AbsenceJustificationScalarWhereInput | AbsenceJustificationScalarWhereInput[]
  }

  export type StudentRiskTrackingUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentRiskTrackingCreateWithoutStudentInput, StudentRiskTrackingUncheckedCreateWithoutStudentInput> | StudentRiskTrackingCreateWithoutStudentInput[] | StudentRiskTrackingUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentRiskTrackingCreateOrConnectWithoutStudentInput | StudentRiskTrackingCreateOrConnectWithoutStudentInput[]
    upsert?: StudentRiskTrackingUpsertWithWhereUniqueWithoutStudentInput | StudentRiskTrackingUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentRiskTrackingCreateManyStudentInputEnvelope
    set?: StudentRiskTrackingWhereUniqueInput | StudentRiskTrackingWhereUniqueInput[]
    disconnect?: StudentRiskTrackingWhereUniqueInput | StudentRiskTrackingWhereUniqueInput[]
    delete?: StudentRiskTrackingWhereUniqueInput | StudentRiskTrackingWhereUniqueInput[]
    connect?: StudentRiskTrackingWhereUniqueInput | StudentRiskTrackingWhereUniqueInput[]
    update?: StudentRiskTrackingUpdateWithWhereUniqueWithoutStudentInput | StudentRiskTrackingUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentRiskTrackingUpdateManyWithWhereWithoutStudentInput | StudentRiskTrackingUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentRiskTrackingScalarWhereInput | StudentRiskTrackingScalarWhereInput[]
  }

  export type StudentAlertUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentAlertCreateWithoutStudentInput, StudentAlertUncheckedCreateWithoutStudentInput> | StudentAlertCreateWithoutStudentInput[] | StudentAlertUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAlertCreateOrConnectWithoutStudentInput | StudentAlertCreateOrConnectWithoutStudentInput[]
    upsert?: StudentAlertUpsertWithWhereUniqueWithoutStudentInput | StudentAlertUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentAlertCreateManyStudentInputEnvelope
    set?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    disconnect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    delete?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    connect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    update?: StudentAlertUpdateWithWhereUniqueWithoutStudentInput | StudentAlertUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentAlertUpdateManyWithWhereWithoutStudentInput | StudentAlertUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentAlertScalarWhereInput | StudentAlertScalarWhereInput[]
  }

  export type StudentPointUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentPointCreateWithoutStudentInput, StudentPointUncheckedCreateWithoutStudentInput> | StudentPointCreateWithoutStudentInput[] | StudentPointUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPointCreateOrConnectWithoutStudentInput | StudentPointCreateOrConnectWithoutStudentInput[]
    upsert?: StudentPointUpsertWithWhereUniqueWithoutStudentInput | StudentPointUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentPointCreateManyStudentInputEnvelope
    set?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    disconnect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    delete?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    connect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    update?: StudentPointUpdateWithWhereUniqueWithoutStudentInput | StudentPointUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentPointUpdateManyWithWhereWithoutStudentInput | StudentPointUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentPointScalarWhereInput | StudentPointScalarWhereInput[]
  }

  export type StudentAchievementUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentAchievementCreateWithoutStudentInput, StudentAchievementUncheckedCreateWithoutStudentInput> | StudentAchievementCreateWithoutStudentInput[] | StudentAchievementUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAchievementCreateOrConnectWithoutStudentInput | StudentAchievementCreateOrConnectWithoutStudentInput[]
    upsert?: StudentAchievementUpsertWithWhereUniqueWithoutStudentInput | StudentAchievementUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentAchievementCreateManyStudentInputEnvelope
    set?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    disconnect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    delete?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    connect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    update?: StudentAchievementUpdateWithWhereUniqueWithoutStudentInput | StudentAchievementUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentAchievementUpdateManyWithWhereWithoutStudentInput | StudentAchievementUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentAchievementScalarWhereInput | StudentAchievementScalarWhereInput[]
  }

  export type StudentStreakUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentStreakCreateWithoutStudentInput, StudentStreakUncheckedCreateWithoutStudentInput> | StudentStreakCreateWithoutStudentInput[] | StudentStreakUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentStreakCreateOrConnectWithoutStudentInput | StudentStreakCreateOrConnectWithoutStudentInput[]
    upsert?: StudentStreakUpsertWithWhereUniqueWithoutStudentInput | StudentStreakUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentStreakCreateManyStudentInputEnvelope
    set?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    disconnect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    delete?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    connect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    update?: StudentStreakUpdateWithWhereUniqueWithoutStudentInput | StudentStreakUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentStreakUpdateManyWithWhereWithoutStudentInput | StudentStreakUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentStreakScalarWhereInput | StudentStreakScalarWhereInput[]
  }

  export type LeaderboardRankingUpdateManyWithoutStudentNestedInput = {
    create?: XOR<LeaderboardRankingCreateWithoutStudentInput, LeaderboardRankingUncheckedCreateWithoutStudentInput> | LeaderboardRankingCreateWithoutStudentInput[] | LeaderboardRankingUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutStudentInput | LeaderboardRankingCreateOrConnectWithoutStudentInput[]
    upsert?: LeaderboardRankingUpsertWithWhereUniqueWithoutStudentInput | LeaderboardRankingUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: LeaderboardRankingCreateManyStudentInputEnvelope
    set?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    disconnect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    delete?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    update?: LeaderboardRankingUpdateWithWhereUniqueWithoutStudentInput | LeaderboardRankingUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: LeaderboardRankingUpdateManyWithWhereWithoutStudentInput | LeaderboardRankingUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: LeaderboardRankingScalarWhereInput | LeaderboardRankingScalarWhereInput[]
  }

  export type ClassEnrollmentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ClassEnrollmentCreateWithoutStudentInput, ClassEnrollmentUncheckedCreateWithoutStudentInput> | ClassEnrollmentCreateWithoutStudentInput[] | ClassEnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ClassEnrollmentCreateOrConnectWithoutStudentInput | ClassEnrollmentCreateOrConnectWithoutStudentInput[]
    upsert?: ClassEnrollmentUpsertWithWhereUniqueWithoutStudentInput | ClassEnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ClassEnrollmentCreateManyStudentInputEnvelope
    set?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    disconnect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    delete?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    connect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    update?: ClassEnrollmentUpdateWithWhereUniqueWithoutStudentInput | ClassEnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ClassEnrollmentUpdateManyWithWhereWithoutStudentInput | ClassEnrollmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ClassEnrollmentScalarWhereInput | ClassEnrollmentScalarWhereInput[]
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput> | AttendanceRecordCreateWithoutStudentInput[] | AttendanceRecordUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutStudentInput | AttendanceRecordCreateOrConnectWithoutStudentInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutStudentInput | AttendanceRecordUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendanceRecordCreateManyStudentInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutStudentInput | AttendanceRecordUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutStudentInput | AttendanceRecordUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type AbsenceJustificationUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AbsenceJustificationCreateWithoutStudentInput, AbsenceJustificationUncheckedCreateWithoutStudentInput> | AbsenceJustificationCreateWithoutStudentInput[] | AbsenceJustificationUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutStudentInput | AbsenceJustificationCreateOrConnectWithoutStudentInput[]
    upsert?: AbsenceJustificationUpsertWithWhereUniqueWithoutStudentInput | AbsenceJustificationUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AbsenceJustificationCreateManyStudentInputEnvelope
    set?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    disconnect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    delete?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    update?: AbsenceJustificationUpdateWithWhereUniqueWithoutStudentInput | AbsenceJustificationUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AbsenceJustificationUpdateManyWithWhereWithoutStudentInput | AbsenceJustificationUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AbsenceJustificationScalarWhereInput | AbsenceJustificationScalarWhereInput[]
  }

  export type StudentRiskTrackingUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentRiskTrackingCreateWithoutStudentInput, StudentRiskTrackingUncheckedCreateWithoutStudentInput> | StudentRiskTrackingCreateWithoutStudentInput[] | StudentRiskTrackingUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentRiskTrackingCreateOrConnectWithoutStudentInput | StudentRiskTrackingCreateOrConnectWithoutStudentInput[]
    upsert?: StudentRiskTrackingUpsertWithWhereUniqueWithoutStudentInput | StudentRiskTrackingUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentRiskTrackingCreateManyStudentInputEnvelope
    set?: StudentRiskTrackingWhereUniqueInput | StudentRiskTrackingWhereUniqueInput[]
    disconnect?: StudentRiskTrackingWhereUniqueInput | StudentRiskTrackingWhereUniqueInput[]
    delete?: StudentRiskTrackingWhereUniqueInput | StudentRiskTrackingWhereUniqueInput[]
    connect?: StudentRiskTrackingWhereUniqueInput | StudentRiskTrackingWhereUniqueInput[]
    update?: StudentRiskTrackingUpdateWithWhereUniqueWithoutStudentInput | StudentRiskTrackingUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentRiskTrackingUpdateManyWithWhereWithoutStudentInput | StudentRiskTrackingUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentRiskTrackingScalarWhereInput | StudentRiskTrackingScalarWhereInput[]
  }

  export type StudentAlertUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentAlertCreateWithoutStudentInput, StudentAlertUncheckedCreateWithoutStudentInput> | StudentAlertCreateWithoutStudentInput[] | StudentAlertUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAlertCreateOrConnectWithoutStudentInput | StudentAlertCreateOrConnectWithoutStudentInput[]
    upsert?: StudentAlertUpsertWithWhereUniqueWithoutStudentInput | StudentAlertUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentAlertCreateManyStudentInputEnvelope
    set?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    disconnect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    delete?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    connect?: StudentAlertWhereUniqueInput | StudentAlertWhereUniqueInput[]
    update?: StudentAlertUpdateWithWhereUniqueWithoutStudentInput | StudentAlertUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentAlertUpdateManyWithWhereWithoutStudentInput | StudentAlertUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentAlertScalarWhereInput | StudentAlertScalarWhereInput[]
  }

  export type StudentPointUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentPointCreateWithoutStudentInput, StudentPointUncheckedCreateWithoutStudentInput> | StudentPointCreateWithoutStudentInput[] | StudentPointUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPointCreateOrConnectWithoutStudentInput | StudentPointCreateOrConnectWithoutStudentInput[]
    upsert?: StudentPointUpsertWithWhereUniqueWithoutStudentInput | StudentPointUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentPointCreateManyStudentInputEnvelope
    set?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    disconnect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    delete?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    connect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    update?: StudentPointUpdateWithWhereUniqueWithoutStudentInput | StudentPointUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentPointUpdateManyWithWhereWithoutStudentInput | StudentPointUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentPointScalarWhereInput | StudentPointScalarWhereInput[]
  }

  export type StudentAchievementUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentAchievementCreateWithoutStudentInput, StudentAchievementUncheckedCreateWithoutStudentInput> | StudentAchievementCreateWithoutStudentInput[] | StudentAchievementUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAchievementCreateOrConnectWithoutStudentInput | StudentAchievementCreateOrConnectWithoutStudentInput[]
    upsert?: StudentAchievementUpsertWithWhereUniqueWithoutStudentInput | StudentAchievementUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentAchievementCreateManyStudentInputEnvelope
    set?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    disconnect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    delete?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    connect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    update?: StudentAchievementUpdateWithWhereUniqueWithoutStudentInput | StudentAchievementUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentAchievementUpdateManyWithWhereWithoutStudentInput | StudentAchievementUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentAchievementScalarWhereInput | StudentAchievementScalarWhereInput[]
  }

  export type StudentStreakUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentStreakCreateWithoutStudentInput, StudentStreakUncheckedCreateWithoutStudentInput> | StudentStreakCreateWithoutStudentInput[] | StudentStreakUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentStreakCreateOrConnectWithoutStudentInput | StudentStreakCreateOrConnectWithoutStudentInput[]
    upsert?: StudentStreakUpsertWithWhereUniqueWithoutStudentInput | StudentStreakUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentStreakCreateManyStudentInputEnvelope
    set?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    disconnect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    delete?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    connect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    update?: StudentStreakUpdateWithWhereUniqueWithoutStudentInput | StudentStreakUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentStreakUpdateManyWithWhereWithoutStudentInput | StudentStreakUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentStreakScalarWhereInput | StudentStreakScalarWhereInput[]
  }

  export type LeaderboardRankingUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<LeaderboardRankingCreateWithoutStudentInput, LeaderboardRankingUncheckedCreateWithoutStudentInput> | LeaderboardRankingCreateWithoutStudentInput[] | LeaderboardRankingUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutStudentInput | LeaderboardRankingCreateOrConnectWithoutStudentInput[]
    upsert?: LeaderboardRankingUpsertWithWhereUniqueWithoutStudentInput | LeaderboardRankingUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: LeaderboardRankingCreateManyStudentInputEnvelope
    set?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    disconnect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    delete?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    update?: LeaderboardRankingUpdateWithWhereUniqueWithoutStudentInput | LeaderboardRankingUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: LeaderboardRankingUpdateManyWithWhereWithoutStudentInput | LeaderboardRankingUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: LeaderboardRankingScalarWhereInput | LeaderboardRankingScalarWhereInput[]
  }

  export type StaffCreateNestedOneWithoutClassesInput = {
    create?: XOR<StaffCreateWithoutClassesInput, StaffUncheckedCreateWithoutClassesInput>
    connectOrCreate?: StaffCreateOrConnectWithoutClassesInput
    connect?: StaffWhereUniqueInput
  }

  export type ClassEnrollmentCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassEnrollmentCreateWithoutClassInput, ClassEnrollmentUncheckedCreateWithoutClassInput> | ClassEnrollmentCreateWithoutClassInput[] | ClassEnrollmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassEnrollmentCreateOrConnectWithoutClassInput | ClassEnrollmentCreateOrConnectWithoutClassInput[]
    createMany?: ClassEnrollmentCreateManyClassInputEnvelope
    connect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
  }

  export type AttendanceRecordCreateNestedManyWithoutClassInput = {
    create?: XOR<AttendanceRecordCreateWithoutClassInput, AttendanceRecordUncheckedCreateWithoutClassInput> | AttendanceRecordCreateWithoutClassInput[] | AttendanceRecordUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutClassInput | AttendanceRecordCreateOrConnectWithoutClassInput[]
    createMany?: AttendanceRecordCreateManyClassInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type AttendanceSessionCreateNestedManyWithoutClassInput = {
    create?: XOR<AttendanceSessionCreateWithoutClassInput, AttendanceSessionUncheckedCreateWithoutClassInput> | AttendanceSessionCreateWithoutClassInput[] | AttendanceSessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceSessionCreateOrConnectWithoutClassInput | AttendanceSessionCreateOrConnectWithoutClassInput[]
    createMany?: AttendanceSessionCreateManyClassInputEnvelope
    connect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
  }

  export type AbsenceJustificationCreateNestedManyWithoutClassInput = {
    create?: XOR<AbsenceJustificationCreateWithoutClassInput, AbsenceJustificationUncheckedCreateWithoutClassInput> | AbsenceJustificationCreateWithoutClassInput[] | AbsenceJustificationUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutClassInput | AbsenceJustificationCreateOrConnectWithoutClassInput[]
    createMany?: AbsenceJustificationCreateManyClassInputEnvelope
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
  }

  export type StudentPointCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentPointCreateWithoutClassInput, StudentPointUncheckedCreateWithoutClassInput> | StudentPointCreateWithoutClassInput[] | StudentPointUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentPointCreateOrConnectWithoutClassInput | StudentPointCreateOrConnectWithoutClassInput[]
    createMany?: StudentPointCreateManyClassInputEnvelope
    connect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
  }

  export type StudentStreakCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentStreakCreateWithoutClassInput, StudentStreakUncheckedCreateWithoutClassInput> | StudentStreakCreateWithoutClassInput[] | StudentStreakUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentStreakCreateOrConnectWithoutClassInput | StudentStreakCreateOrConnectWithoutClassInput[]
    createMany?: StudentStreakCreateManyClassInputEnvelope
    connect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
  }

  export type LeaderboardRankingCreateNestedManyWithoutClassInput = {
    create?: XOR<LeaderboardRankingCreateWithoutClassInput, LeaderboardRankingUncheckedCreateWithoutClassInput> | LeaderboardRankingCreateWithoutClassInput[] | LeaderboardRankingUncheckedCreateWithoutClassInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutClassInput | LeaderboardRankingCreateOrConnectWithoutClassInput[]
    createMany?: LeaderboardRankingCreateManyClassInputEnvelope
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
  }

  export type ClassLocationCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassLocationCreateWithoutClassInput, ClassLocationUncheckedCreateWithoutClassInput> | ClassLocationCreateWithoutClassInput[] | ClassLocationUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassLocationCreateOrConnectWithoutClassInput | ClassLocationCreateOrConnectWithoutClassInput[]
    createMany?: ClassLocationCreateManyClassInputEnvelope
    connect?: ClassLocationWhereUniqueInput | ClassLocationWhereUniqueInput[]
  }

  export type ClassEnrollmentUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassEnrollmentCreateWithoutClassInput, ClassEnrollmentUncheckedCreateWithoutClassInput> | ClassEnrollmentCreateWithoutClassInput[] | ClassEnrollmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassEnrollmentCreateOrConnectWithoutClassInput | ClassEnrollmentCreateOrConnectWithoutClassInput[]
    createMany?: ClassEnrollmentCreateManyClassInputEnvelope
    connect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
  }

  export type AttendanceRecordUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<AttendanceRecordCreateWithoutClassInput, AttendanceRecordUncheckedCreateWithoutClassInput> | AttendanceRecordCreateWithoutClassInput[] | AttendanceRecordUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutClassInput | AttendanceRecordCreateOrConnectWithoutClassInput[]
    createMany?: AttendanceRecordCreateManyClassInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type AttendanceSessionUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<AttendanceSessionCreateWithoutClassInput, AttendanceSessionUncheckedCreateWithoutClassInput> | AttendanceSessionCreateWithoutClassInput[] | AttendanceSessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceSessionCreateOrConnectWithoutClassInput | AttendanceSessionCreateOrConnectWithoutClassInput[]
    createMany?: AttendanceSessionCreateManyClassInputEnvelope
    connect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
  }

  export type AbsenceJustificationUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<AbsenceJustificationCreateWithoutClassInput, AbsenceJustificationUncheckedCreateWithoutClassInput> | AbsenceJustificationCreateWithoutClassInput[] | AbsenceJustificationUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutClassInput | AbsenceJustificationCreateOrConnectWithoutClassInput[]
    createMany?: AbsenceJustificationCreateManyClassInputEnvelope
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
  }

  export type StudentPointUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentPointCreateWithoutClassInput, StudentPointUncheckedCreateWithoutClassInput> | StudentPointCreateWithoutClassInput[] | StudentPointUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentPointCreateOrConnectWithoutClassInput | StudentPointCreateOrConnectWithoutClassInput[]
    createMany?: StudentPointCreateManyClassInputEnvelope
    connect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
  }

  export type StudentStreakUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentStreakCreateWithoutClassInput, StudentStreakUncheckedCreateWithoutClassInput> | StudentStreakCreateWithoutClassInput[] | StudentStreakUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentStreakCreateOrConnectWithoutClassInput | StudentStreakCreateOrConnectWithoutClassInput[]
    createMany?: StudentStreakCreateManyClassInputEnvelope
    connect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
  }

  export type LeaderboardRankingUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<LeaderboardRankingCreateWithoutClassInput, LeaderboardRankingUncheckedCreateWithoutClassInput> | LeaderboardRankingCreateWithoutClassInput[] | LeaderboardRankingUncheckedCreateWithoutClassInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutClassInput | LeaderboardRankingCreateOrConnectWithoutClassInput[]
    createMany?: LeaderboardRankingCreateManyClassInputEnvelope
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
  }

  export type ClassLocationUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassLocationCreateWithoutClassInput, ClassLocationUncheckedCreateWithoutClassInput> | ClassLocationCreateWithoutClassInput[] | ClassLocationUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassLocationCreateOrConnectWithoutClassInput | ClassLocationCreateOrConnectWithoutClassInput[]
    createMany?: ClassLocationCreateManyClassInputEnvelope
    connect?: ClassLocationWhereUniqueInput | ClassLocationWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type StaffUpdateOneWithoutClassesNestedInput = {
    create?: XOR<StaffCreateWithoutClassesInput, StaffUncheckedCreateWithoutClassesInput>
    connectOrCreate?: StaffCreateOrConnectWithoutClassesInput
    upsert?: StaffUpsertWithoutClassesInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutClassesInput, StaffUpdateWithoutClassesInput>, StaffUncheckedUpdateWithoutClassesInput>
  }

  export type ClassEnrollmentUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassEnrollmentCreateWithoutClassInput, ClassEnrollmentUncheckedCreateWithoutClassInput> | ClassEnrollmentCreateWithoutClassInput[] | ClassEnrollmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassEnrollmentCreateOrConnectWithoutClassInput | ClassEnrollmentCreateOrConnectWithoutClassInput[]
    upsert?: ClassEnrollmentUpsertWithWhereUniqueWithoutClassInput | ClassEnrollmentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassEnrollmentCreateManyClassInputEnvelope
    set?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    disconnect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    delete?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    connect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    update?: ClassEnrollmentUpdateWithWhereUniqueWithoutClassInput | ClassEnrollmentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassEnrollmentUpdateManyWithWhereWithoutClassInput | ClassEnrollmentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassEnrollmentScalarWhereInput | ClassEnrollmentScalarWhereInput[]
  }

  export type AttendanceRecordUpdateManyWithoutClassNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutClassInput, AttendanceRecordUncheckedCreateWithoutClassInput> | AttendanceRecordCreateWithoutClassInput[] | AttendanceRecordUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutClassInput | AttendanceRecordCreateOrConnectWithoutClassInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutClassInput | AttendanceRecordUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AttendanceRecordCreateManyClassInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutClassInput | AttendanceRecordUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutClassInput | AttendanceRecordUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type AttendanceSessionUpdateManyWithoutClassNestedInput = {
    create?: XOR<AttendanceSessionCreateWithoutClassInput, AttendanceSessionUncheckedCreateWithoutClassInput> | AttendanceSessionCreateWithoutClassInput[] | AttendanceSessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceSessionCreateOrConnectWithoutClassInput | AttendanceSessionCreateOrConnectWithoutClassInput[]
    upsert?: AttendanceSessionUpsertWithWhereUniqueWithoutClassInput | AttendanceSessionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AttendanceSessionCreateManyClassInputEnvelope
    set?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    disconnect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    delete?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    connect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    update?: AttendanceSessionUpdateWithWhereUniqueWithoutClassInput | AttendanceSessionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AttendanceSessionUpdateManyWithWhereWithoutClassInput | AttendanceSessionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AttendanceSessionScalarWhereInput | AttendanceSessionScalarWhereInput[]
  }

  export type AbsenceJustificationUpdateManyWithoutClassNestedInput = {
    create?: XOR<AbsenceJustificationCreateWithoutClassInput, AbsenceJustificationUncheckedCreateWithoutClassInput> | AbsenceJustificationCreateWithoutClassInput[] | AbsenceJustificationUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutClassInput | AbsenceJustificationCreateOrConnectWithoutClassInput[]
    upsert?: AbsenceJustificationUpsertWithWhereUniqueWithoutClassInput | AbsenceJustificationUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AbsenceJustificationCreateManyClassInputEnvelope
    set?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    disconnect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    delete?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    update?: AbsenceJustificationUpdateWithWhereUniqueWithoutClassInput | AbsenceJustificationUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AbsenceJustificationUpdateManyWithWhereWithoutClassInput | AbsenceJustificationUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AbsenceJustificationScalarWhereInput | AbsenceJustificationScalarWhereInput[]
  }

  export type StudentPointUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentPointCreateWithoutClassInput, StudentPointUncheckedCreateWithoutClassInput> | StudentPointCreateWithoutClassInput[] | StudentPointUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentPointCreateOrConnectWithoutClassInput | StudentPointCreateOrConnectWithoutClassInput[]
    upsert?: StudentPointUpsertWithWhereUniqueWithoutClassInput | StudentPointUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentPointCreateManyClassInputEnvelope
    set?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    disconnect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    delete?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    connect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    update?: StudentPointUpdateWithWhereUniqueWithoutClassInput | StudentPointUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentPointUpdateManyWithWhereWithoutClassInput | StudentPointUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentPointScalarWhereInput | StudentPointScalarWhereInput[]
  }

  export type StudentStreakUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentStreakCreateWithoutClassInput, StudentStreakUncheckedCreateWithoutClassInput> | StudentStreakCreateWithoutClassInput[] | StudentStreakUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentStreakCreateOrConnectWithoutClassInput | StudentStreakCreateOrConnectWithoutClassInput[]
    upsert?: StudentStreakUpsertWithWhereUniqueWithoutClassInput | StudentStreakUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentStreakCreateManyClassInputEnvelope
    set?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    disconnect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    delete?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    connect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    update?: StudentStreakUpdateWithWhereUniqueWithoutClassInput | StudentStreakUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentStreakUpdateManyWithWhereWithoutClassInput | StudentStreakUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentStreakScalarWhereInput | StudentStreakScalarWhereInput[]
  }

  export type LeaderboardRankingUpdateManyWithoutClassNestedInput = {
    create?: XOR<LeaderboardRankingCreateWithoutClassInput, LeaderboardRankingUncheckedCreateWithoutClassInput> | LeaderboardRankingCreateWithoutClassInput[] | LeaderboardRankingUncheckedCreateWithoutClassInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutClassInput | LeaderboardRankingCreateOrConnectWithoutClassInput[]
    upsert?: LeaderboardRankingUpsertWithWhereUniqueWithoutClassInput | LeaderboardRankingUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: LeaderboardRankingCreateManyClassInputEnvelope
    set?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    disconnect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    delete?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    update?: LeaderboardRankingUpdateWithWhereUniqueWithoutClassInput | LeaderboardRankingUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: LeaderboardRankingUpdateManyWithWhereWithoutClassInput | LeaderboardRankingUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: LeaderboardRankingScalarWhereInput | LeaderboardRankingScalarWhereInput[]
  }

  export type ClassLocationUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassLocationCreateWithoutClassInput, ClassLocationUncheckedCreateWithoutClassInput> | ClassLocationCreateWithoutClassInput[] | ClassLocationUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassLocationCreateOrConnectWithoutClassInput | ClassLocationCreateOrConnectWithoutClassInput[]
    upsert?: ClassLocationUpsertWithWhereUniqueWithoutClassInput | ClassLocationUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassLocationCreateManyClassInputEnvelope
    set?: ClassLocationWhereUniqueInput | ClassLocationWhereUniqueInput[]
    disconnect?: ClassLocationWhereUniqueInput | ClassLocationWhereUniqueInput[]
    delete?: ClassLocationWhereUniqueInput | ClassLocationWhereUniqueInput[]
    connect?: ClassLocationWhereUniqueInput | ClassLocationWhereUniqueInput[]
    update?: ClassLocationUpdateWithWhereUniqueWithoutClassInput | ClassLocationUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassLocationUpdateManyWithWhereWithoutClassInput | ClassLocationUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassLocationScalarWhereInput | ClassLocationScalarWhereInput[]
  }

  export type ClassEnrollmentUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassEnrollmentCreateWithoutClassInput, ClassEnrollmentUncheckedCreateWithoutClassInput> | ClassEnrollmentCreateWithoutClassInput[] | ClassEnrollmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassEnrollmentCreateOrConnectWithoutClassInput | ClassEnrollmentCreateOrConnectWithoutClassInput[]
    upsert?: ClassEnrollmentUpsertWithWhereUniqueWithoutClassInput | ClassEnrollmentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassEnrollmentCreateManyClassInputEnvelope
    set?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    disconnect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    delete?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    connect?: ClassEnrollmentWhereUniqueInput | ClassEnrollmentWhereUniqueInput[]
    update?: ClassEnrollmentUpdateWithWhereUniqueWithoutClassInput | ClassEnrollmentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassEnrollmentUpdateManyWithWhereWithoutClassInput | ClassEnrollmentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassEnrollmentScalarWhereInput | ClassEnrollmentScalarWhereInput[]
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutClassInput, AttendanceRecordUncheckedCreateWithoutClassInput> | AttendanceRecordCreateWithoutClassInput[] | AttendanceRecordUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutClassInput | AttendanceRecordCreateOrConnectWithoutClassInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutClassInput | AttendanceRecordUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AttendanceRecordCreateManyClassInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutClassInput | AttendanceRecordUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutClassInput | AttendanceRecordUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type AttendanceSessionUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<AttendanceSessionCreateWithoutClassInput, AttendanceSessionUncheckedCreateWithoutClassInput> | AttendanceSessionCreateWithoutClassInput[] | AttendanceSessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceSessionCreateOrConnectWithoutClassInput | AttendanceSessionCreateOrConnectWithoutClassInput[]
    upsert?: AttendanceSessionUpsertWithWhereUniqueWithoutClassInput | AttendanceSessionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AttendanceSessionCreateManyClassInputEnvelope
    set?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    disconnect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    delete?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    connect?: AttendanceSessionWhereUniqueInput | AttendanceSessionWhereUniqueInput[]
    update?: AttendanceSessionUpdateWithWhereUniqueWithoutClassInput | AttendanceSessionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AttendanceSessionUpdateManyWithWhereWithoutClassInput | AttendanceSessionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AttendanceSessionScalarWhereInput | AttendanceSessionScalarWhereInput[]
  }

  export type AbsenceJustificationUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<AbsenceJustificationCreateWithoutClassInput, AbsenceJustificationUncheckedCreateWithoutClassInput> | AbsenceJustificationCreateWithoutClassInput[] | AbsenceJustificationUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutClassInput | AbsenceJustificationCreateOrConnectWithoutClassInput[]
    upsert?: AbsenceJustificationUpsertWithWhereUniqueWithoutClassInput | AbsenceJustificationUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AbsenceJustificationCreateManyClassInputEnvelope
    set?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    disconnect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    delete?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    update?: AbsenceJustificationUpdateWithWhereUniqueWithoutClassInput | AbsenceJustificationUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AbsenceJustificationUpdateManyWithWhereWithoutClassInput | AbsenceJustificationUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AbsenceJustificationScalarWhereInput | AbsenceJustificationScalarWhereInput[]
  }

  export type StudentPointUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentPointCreateWithoutClassInput, StudentPointUncheckedCreateWithoutClassInput> | StudentPointCreateWithoutClassInput[] | StudentPointUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentPointCreateOrConnectWithoutClassInput | StudentPointCreateOrConnectWithoutClassInput[]
    upsert?: StudentPointUpsertWithWhereUniqueWithoutClassInput | StudentPointUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentPointCreateManyClassInputEnvelope
    set?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    disconnect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    delete?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    connect?: StudentPointWhereUniqueInput | StudentPointWhereUniqueInput[]
    update?: StudentPointUpdateWithWhereUniqueWithoutClassInput | StudentPointUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentPointUpdateManyWithWhereWithoutClassInput | StudentPointUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentPointScalarWhereInput | StudentPointScalarWhereInput[]
  }

  export type StudentStreakUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentStreakCreateWithoutClassInput, StudentStreakUncheckedCreateWithoutClassInput> | StudentStreakCreateWithoutClassInput[] | StudentStreakUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentStreakCreateOrConnectWithoutClassInput | StudentStreakCreateOrConnectWithoutClassInput[]
    upsert?: StudentStreakUpsertWithWhereUniqueWithoutClassInput | StudentStreakUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentStreakCreateManyClassInputEnvelope
    set?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    disconnect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    delete?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    connect?: StudentStreakWhereUniqueInput | StudentStreakWhereUniqueInput[]
    update?: StudentStreakUpdateWithWhereUniqueWithoutClassInput | StudentStreakUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentStreakUpdateManyWithWhereWithoutClassInput | StudentStreakUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentStreakScalarWhereInput | StudentStreakScalarWhereInput[]
  }

  export type LeaderboardRankingUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<LeaderboardRankingCreateWithoutClassInput, LeaderboardRankingUncheckedCreateWithoutClassInput> | LeaderboardRankingCreateWithoutClassInput[] | LeaderboardRankingUncheckedCreateWithoutClassInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutClassInput | LeaderboardRankingCreateOrConnectWithoutClassInput[]
    upsert?: LeaderboardRankingUpsertWithWhereUniqueWithoutClassInput | LeaderboardRankingUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: LeaderboardRankingCreateManyClassInputEnvelope
    set?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    disconnect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    delete?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    update?: LeaderboardRankingUpdateWithWhereUniqueWithoutClassInput | LeaderboardRankingUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: LeaderboardRankingUpdateManyWithWhereWithoutClassInput | LeaderboardRankingUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: LeaderboardRankingScalarWhereInput | LeaderboardRankingScalarWhereInput[]
  }

  export type ClassLocationUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassLocationCreateWithoutClassInput, ClassLocationUncheckedCreateWithoutClassInput> | ClassLocationCreateWithoutClassInput[] | ClassLocationUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassLocationCreateOrConnectWithoutClassInput | ClassLocationCreateOrConnectWithoutClassInput[]
    upsert?: ClassLocationUpsertWithWhereUniqueWithoutClassInput | ClassLocationUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassLocationCreateManyClassInputEnvelope
    set?: ClassLocationWhereUniqueInput | ClassLocationWhereUniqueInput[]
    disconnect?: ClassLocationWhereUniqueInput | ClassLocationWhereUniqueInput[]
    delete?: ClassLocationWhereUniqueInput | ClassLocationWhereUniqueInput[]
    connect?: ClassLocationWhereUniqueInput | ClassLocationWhereUniqueInput[]
    update?: ClassLocationUpdateWithWhereUniqueWithoutClassInput | ClassLocationUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassLocationUpdateManyWithWhereWithoutClassInput | ClassLocationUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassLocationScalarWhereInput | ClassLocationScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutClassEnrollmentsInput = {
    create?: XOR<StudentCreateWithoutClassEnrollmentsInput, StudentUncheckedCreateWithoutClassEnrollmentsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutClassEnrollmentsInput
    connect?: StudentWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutClassEnrollmentsInput = {
    create?: XOR<ClassCreateWithoutClassEnrollmentsInput, ClassUncheckedCreateWithoutClassEnrollmentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutClassEnrollmentsInput
    connect?: ClassWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutClassEnrollmentsNestedInput = {
    create?: XOR<StudentCreateWithoutClassEnrollmentsInput, StudentUncheckedCreateWithoutClassEnrollmentsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutClassEnrollmentsInput
    upsert?: StudentUpsertWithoutClassEnrollmentsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutClassEnrollmentsInput, StudentUpdateWithoutClassEnrollmentsInput>, StudentUncheckedUpdateWithoutClassEnrollmentsInput>
  }

  export type ClassUpdateOneRequiredWithoutClassEnrollmentsNestedInput = {
    create?: XOR<ClassCreateWithoutClassEnrollmentsInput, ClassUncheckedCreateWithoutClassEnrollmentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutClassEnrollmentsInput
    upsert?: ClassUpsertWithoutClassEnrollmentsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutClassEnrollmentsInput, ClassUpdateWithoutClassEnrollmentsInput>, ClassUncheckedUpdateWithoutClassEnrollmentsInput>
  }

  export type StudentCreateNestedOneWithoutAttendanceRecordsInput = {
    create?: XOR<StudentCreateWithoutAttendanceRecordsInput, StudentUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendanceRecordsInput
    connect?: StudentWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutAttendanceRecordsInput = {
    create?: XOR<ClassCreateWithoutAttendanceRecordsInput, ClassUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAttendanceRecordsInput
    connect?: ClassWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutAttendanceRecordsInput = {
    create?: XOR<StaffCreateWithoutAttendanceRecordsInput, StaffUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutAttendanceRecordsInput
    connect?: StaffWhereUniqueInput
  }

  export type AbsenceJustificationCreateNestedManyWithoutAttendanceRecordInput = {
    create?: XOR<AbsenceJustificationCreateWithoutAttendanceRecordInput, AbsenceJustificationUncheckedCreateWithoutAttendanceRecordInput> | AbsenceJustificationCreateWithoutAttendanceRecordInput[] | AbsenceJustificationUncheckedCreateWithoutAttendanceRecordInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutAttendanceRecordInput | AbsenceJustificationCreateOrConnectWithoutAttendanceRecordInput[]
    createMany?: AbsenceJustificationCreateManyAttendanceRecordInputEnvelope
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
  }

  export type AbsenceJustificationUncheckedCreateNestedManyWithoutAttendanceRecordInput = {
    create?: XOR<AbsenceJustificationCreateWithoutAttendanceRecordInput, AbsenceJustificationUncheckedCreateWithoutAttendanceRecordInput> | AbsenceJustificationCreateWithoutAttendanceRecordInput[] | AbsenceJustificationUncheckedCreateWithoutAttendanceRecordInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutAttendanceRecordInput | AbsenceJustificationCreateOrConnectWithoutAttendanceRecordInput[]
    createMany?: AbsenceJustificationCreateManyAttendanceRecordInputEnvelope
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
  }

  export type EnumAttendanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.AttendanceStatus
  }

  export type EnumAttendanceMethodFieldUpdateOperationsInput = {
    set?: $Enums.AttendanceMethod
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type StudentUpdateOneRequiredWithoutAttendanceRecordsNestedInput = {
    create?: XOR<StudentCreateWithoutAttendanceRecordsInput, StudentUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendanceRecordsInput
    upsert?: StudentUpsertWithoutAttendanceRecordsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAttendanceRecordsInput, StudentUpdateWithoutAttendanceRecordsInput>, StudentUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type ClassUpdateOneRequiredWithoutAttendanceRecordsNestedInput = {
    create?: XOR<ClassCreateWithoutAttendanceRecordsInput, ClassUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAttendanceRecordsInput
    upsert?: ClassUpsertWithoutAttendanceRecordsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAttendanceRecordsInput, ClassUpdateWithoutAttendanceRecordsInput>, ClassUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type StaffUpdateOneWithoutAttendanceRecordsNestedInput = {
    create?: XOR<StaffCreateWithoutAttendanceRecordsInput, StaffUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutAttendanceRecordsInput
    upsert?: StaffUpsertWithoutAttendanceRecordsInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutAttendanceRecordsInput, StaffUpdateWithoutAttendanceRecordsInput>, StaffUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type AbsenceJustificationUpdateManyWithoutAttendanceRecordNestedInput = {
    create?: XOR<AbsenceJustificationCreateWithoutAttendanceRecordInput, AbsenceJustificationUncheckedCreateWithoutAttendanceRecordInput> | AbsenceJustificationCreateWithoutAttendanceRecordInput[] | AbsenceJustificationUncheckedCreateWithoutAttendanceRecordInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutAttendanceRecordInput | AbsenceJustificationCreateOrConnectWithoutAttendanceRecordInput[]
    upsert?: AbsenceJustificationUpsertWithWhereUniqueWithoutAttendanceRecordInput | AbsenceJustificationUpsertWithWhereUniqueWithoutAttendanceRecordInput[]
    createMany?: AbsenceJustificationCreateManyAttendanceRecordInputEnvelope
    set?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    disconnect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    delete?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    update?: AbsenceJustificationUpdateWithWhereUniqueWithoutAttendanceRecordInput | AbsenceJustificationUpdateWithWhereUniqueWithoutAttendanceRecordInput[]
    updateMany?: AbsenceJustificationUpdateManyWithWhereWithoutAttendanceRecordInput | AbsenceJustificationUpdateManyWithWhereWithoutAttendanceRecordInput[]
    deleteMany?: AbsenceJustificationScalarWhereInput | AbsenceJustificationScalarWhereInput[]
  }

  export type AbsenceJustificationUncheckedUpdateManyWithoutAttendanceRecordNestedInput = {
    create?: XOR<AbsenceJustificationCreateWithoutAttendanceRecordInput, AbsenceJustificationUncheckedCreateWithoutAttendanceRecordInput> | AbsenceJustificationCreateWithoutAttendanceRecordInput[] | AbsenceJustificationUncheckedCreateWithoutAttendanceRecordInput[]
    connectOrCreate?: AbsenceJustificationCreateOrConnectWithoutAttendanceRecordInput | AbsenceJustificationCreateOrConnectWithoutAttendanceRecordInput[]
    upsert?: AbsenceJustificationUpsertWithWhereUniqueWithoutAttendanceRecordInput | AbsenceJustificationUpsertWithWhereUniqueWithoutAttendanceRecordInput[]
    createMany?: AbsenceJustificationCreateManyAttendanceRecordInputEnvelope
    set?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    disconnect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    delete?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    connect?: AbsenceJustificationWhereUniqueInput | AbsenceJustificationWhereUniqueInput[]
    update?: AbsenceJustificationUpdateWithWhereUniqueWithoutAttendanceRecordInput | AbsenceJustificationUpdateWithWhereUniqueWithoutAttendanceRecordInput[]
    updateMany?: AbsenceJustificationUpdateManyWithWhereWithoutAttendanceRecordInput | AbsenceJustificationUpdateManyWithWhereWithoutAttendanceRecordInput[]
    deleteMany?: AbsenceJustificationScalarWhereInput | AbsenceJustificationScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutAttendanceSessionsInput = {
    create?: XOR<ClassCreateWithoutAttendanceSessionsInput, ClassUncheckedCreateWithoutAttendanceSessionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAttendanceSessionsInput
    connect?: ClassWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutAttendanceSessionsInput = {
    create?: XOR<StaffCreateWithoutAttendanceSessionsInput, StaffUncheckedCreateWithoutAttendanceSessionsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutAttendanceSessionsInput
    connect?: StaffWhereUniqueInput
  }

  export type QRSessionCreateNestedManyWithoutAttendanceSessionInput = {
    create?: XOR<QRSessionCreateWithoutAttendanceSessionInput, QRSessionUncheckedCreateWithoutAttendanceSessionInput> | QRSessionCreateWithoutAttendanceSessionInput[] | QRSessionUncheckedCreateWithoutAttendanceSessionInput[]
    connectOrCreate?: QRSessionCreateOrConnectWithoutAttendanceSessionInput | QRSessionCreateOrConnectWithoutAttendanceSessionInput[]
    createMany?: QRSessionCreateManyAttendanceSessionInputEnvelope
    connect?: QRSessionWhereUniqueInput | QRSessionWhereUniqueInput[]
  }

  export type QRSessionUncheckedCreateNestedManyWithoutAttendanceSessionInput = {
    create?: XOR<QRSessionCreateWithoutAttendanceSessionInput, QRSessionUncheckedCreateWithoutAttendanceSessionInput> | QRSessionCreateWithoutAttendanceSessionInput[] | QRSessionUncheckedCreateWithoutAttendanceSessionInput[]
    connectOrCreate?: QRSessionCreateOrConnectWithoutAttendanceSessionInput | QRSessionCreateOrConnectWithoutAttendanceSessionInput[]
    createMany?: QRSessionCreateManyAttendanceSessionInputEnvelope
    connect?: QRSessionWhereUniqueInput | QRSessionWhereUniqueInput[]
  }

  export type EnumSessionTypeFieldUpdateOperationsInput = {
    set?: $Enums.SessionType
  }

  export type EnumPlanningStatusFieldUpdateOperationsInput = {
    set?: $Enums.PlanningStatus
  }

  export type ClassUpdateOneRequiredWithoutAttendanceSessionsNestedInput = {
    create?: XOR<ClassCreateWithoutAttendanceSessionsInput, ClassUncheckedCreateWithoutAttendanceSessionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAttendanceSessionsInput
    upsert?: ClassUpsertWithoutAttendanceSessionsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAttendanceSessionsInput, ClassUpdateWithoutAttendanceSessionsInput>, ClassUncheckedUpdateWithoutAttendanceSessionsInput>
  }

  export type StaffUpdateOneRequiredWithoutAttendanceSessionsNestedInput = {
    create?: XOR<StaffCreateWithoutAttendanceSessionsInput, StaffUncheckedCreateWithoutAttendanceSessionsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutAttendanceSessionsInput
    upsert?: StaffUpsertWithoutAttendanceSessionsInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutAttendanceSessionsInput, StaffUpdateWithoutAttendanceSessionsInput>, StaffUncheckedUpdateWithoutAttendanceSessionsInput>
  }

  export type QRSessionUpdateManyWithoutAttendanceSessionNestedInput = {
    create?: XOR<QRSessionCreateWithoutAttendanceSessionInput, QRSessionUncheckedCreateWithoutAttendanceSessionInput> | QRSessionCreateWithoutAttendanceSessionInput[] | QRSessionUncheckedCreateWithoutAttendanceSessionInput[]
    connectOrCreate?: QRSessionCreateOrConnectWithoutAttendanceSessionInput | QRSessionCreateOrConnectWithoutAttendanceSessionInput[]
    upsert?: QRSessionUpsertWithWhereUniqueWithoutAttendanceSessionInput | QRSessionUpsertWithWhereUniqueWithoutAttendanceSessionInput[]
    createMany?: QRSessionCreateManyAttendanceSessionInputEnvelope
    set?: QRSessionWhereUniqueInput | QRSessionWhereUniqueInput[]
    disconnect?: QRSessionWhereUniqueInput | QRSessionWhereUniqueInput[]
    delete?: QRSessionWhereUniqueInput | QRSessionWhereUniqueInput[]
    connect?: QRSessionWhereUniqueInput | QRSessionWhereUniqueInput[]
    update?: QRSessionUpdateWithWhereUniqueWithoutAttendanceSessionInput | QRSessionUpdateWithWhereUniqueWithoutAttendanceSessionInput[]
    updateMany?: QRSessionUpdateManyWithWhereWithoutAttendanceSessionInput | QRSessionUpdateManyWithWhereWithoutAttendanceSessionInput[]
    deleteMany?: QRSessionScalarWhereInput | QRSessionScalarWhereInput[]
  }

  export type QRSessionUncheckedUpdateManyWithoutAttendanceSessionNestedInput = {
    create?: XOR<QRSessionCreateWithoutAttendanceSessionInput, QRSessionUncheckedCreateWithoutAttendanceSessionInput> | QRSessionCreateWithoutAttendanceSessionInput[] | QRSessionUncheckedCreateWithoutAttendanceSessionInput[]
    connectOrCreate?: QRSessionCreateOrConnectWithoutAttendanceSessionInput | QRSessionCreateOrConnectWithoutAttendanceSessionInput[]
    upsert?: QRSessionUpsertWithWhereUniqueWithoutAttendanceSessionInput | QRSessionUpsertWithWhereUniqueWithoutAttendanceSessionInput[]
    createMany?: QRSessionCreateManyAttendanceSessionInputEnvelope
    set?: QRSessionWhereUniqueInput | QRSessionWhereUniqueInput[]
    disconnect?: QRSessionWhereUniqueInput | QRSessionWhereUniqueInput[]
    delete?: QRSessionWhereUniqueInput | QRSessionWhereUniqueInput[]
    connect?: QRSessionWhereUniqueInput | QRSessionWhereUniqueInput[]
    update?: QRSessionUpdateWithWhereUniqueWithoutAttendanceSessionInput | QRSessionUpdateWithWhereUniqueWithoutAttendanceSessionInput[]
    updateMany?: QRSessionUpdateManyWithWhereWithoutAttendanceSessionInput | QRSessionUpdateManyWithWhereWithoutAttendanceSessionInput[]
    deleteMany?: QRSessionScalarWhereInput | QRSessionScalarWhereInput[]
  }

  export type AttendanceSessionCreateNestedOneWithoutQrSessionsInput = {
    create?: XOR<AttendanceSessionCreateWithoutQrSessionsInput, AttendanceSessionUncheckedCreateWithoutQrSessionsInput>
    connectOrCreate?: AttendanceSessionCreateOrConnectWithoutQrSessionsInput
    connect?: AttendanceSessionWhereUniqueInput
  }

  export type AttendanceSessionUpdateOneRequiredWithoutQrSessionsNestedInput = {
    create?: XOR<AttendanceSessionCreateWithoutQrSessionsInput, AttendanceSessionUncheckedCreateWithoutQrSessionsInput>
    connectOrCreate?: AttendanceSessionCreateOrConnectWithoutQrSessionsInput
    upsert?: AttendanceSessionUpsertWithoutQrSessionsInput
    connect?: AttendanceSessionWhereUniqueInput
    update?: XOR<XOR<AttendanceSessionUpdateToOneWithWhereWithoutQrSessionsInput, AttendanceSessionUpdateWithoutQrSessionsInput>, AttendanceSessionUncheckedUpdateWithoutQrSessionsInput>
  }

  export type StudentCreateNestedOneWithoutAbsenceJustificationsInput = {
    create?: XOR<StudentCreateWithoutAbsenceJustificationsInput, StudentUncheckedCreateWithoutAbsenceJustificationsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAbsenceJustificationsInput
    connect?: StudentWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutAbsenceJustificationsInput = {
    create?: XOR<ClassCreateWithoutAbsenceJustificationsInput, ClassUncheckedCreateWithoutAbsenceJustificationsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAbsenceJustificationsInput
    connect?: ClassWhereUniqueInput
  }

  export type AttendanceRecordCreateNestedOneWithoutAbsenceJustificationsInput = {
    create?: XOR<AttendanceRecordCreateWithoutAbsenceJustificationsInput, AttendanceRecordUncheckedCreateWithoutAbsenceJustificationsInput>
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutAbsenceJustificationsInput
    connect?: AttendanceRecordWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutAbsenceJustificationsInput = {
    create?: XOR<StaffCreateWithoutAbsenceJustificationsInput, StaffUncheckedCreateWithoutAbsenceJustificationsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutAbsenceJustificationsInput
    connect?: StaffWhereUniqueInput
  }

  export type EnumJustificationReasonFieldUpdateOperationsInput = {
    set?: $Enums.JustificationReason
  }

  export type EnumJustificationStatusFieldUpdateOperationsInput = {
    set?: $Enums.JustificationStatus
  }

  export type StudentUpdateOneRequiredWithoutAbsenceJustificationsNestedInput = {
    create?: XOR<StudentCreateWithoutAbsenceJustificationsInput, StudentUncheckedCreateWithoutAbsenceJustificationsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAbsenceJustificationsInput
    upsert?: StudentUpsertWithoutAbsenceJustificationsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAbsenceJustificationsInput, StudentUpdateWithoutAbsenceJustificationsInput>, StudentUncheckedUpdateWithoutAbsenceJustificationsInput>
  }

  export type ClassUpdateOneRequiredWithoutAbsenceJustificationsNestedInput = {
    create?: XOR<ClassCreateWithoutAbsenceJustificationsInput, ClassUncheckedCreateWithoutAbsenceJustificationsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAbsenceJustificationsInput
    upsert?: ClassUpsertWithoutAbsenceJustificationsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAbsenceJustificationsInput, ClassUpdateWithoutAbsenceJustificationsInput>, ClassUncheckedUpdateWithoutAbsenceJustificationsInput>
  }

  export type AttendanceRecordUpdateOneWithoutAbsenceJustificationsNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutAbsenceJustificationsInput, AttendanceRecordUncheckedCreateWithoutAbsenceJustificationsInput>
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutAbsenceJustificationsInput
    upsert?: AttendanceRecordUpsertWithoutAbsenceJustificationsInput
    disconnect?: AttendanceRecordWhereInput | boolean
    delete?: AttendanceRecordWhereInput | boolean
    connect?: AttendanceRecordWhereUniqueInput
    update?: XOR<XOR<AttendanceRecordUpdateToOneWithWhereWithoutAbsenceJustificationsInput, AttendanceRecordUpdateWithoutAbsenceJustificationsInput>, AttendanceRecordUncheckedUpdateWithoutAbsenceJustificationsInput>
  }

  export type StaffUpdateOneWithoutAbsenceJustificationsNestedInput = {
    create?: XOR<StaffCreateWithoutAbsenceJustificationsInput, StaffUncheckedCreateWithoutAbsenceJustificationsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutAbsenceJustificationsInput
    upsert?: StaffUpsertWithoutAbsenceJustificationsInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutAbsenceJustificationsInput, StaffUpdateWithoutAbsenceJustificationsInput>, StaffUncheckedUpdateWithoutAbsenceJustificationsInput>
  }

  export type StaffCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<StaffCreateWithoutDepartmentsInput, StaffUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutDepartmentsInput
    connect?: StaffWhereUniqueInput
  }

  export type LeaderboardRankingCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<LeaderboardRankingCreateWithoutDepartmentInput, LeaderboardRankingUncheckedCreateWithoutDepartmentInput> | LeaderboardRankingCreateWithoutDepartmentInput[] | LeaderboardRankingUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutDepartmentInput | LeaderboardRankingCreateOrConnectWithoutDepartmentInput[]
    createMany?: LeaderboardRankingCreateManyDepartmentInputEnvelope
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
  }

  export type LeaderboardRankingUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<LeaderboardRankingCreateWithoutDepartmentInput, LeaderboardRankingUncheckedCreateWithoutDepartmentInput> | LeaderboardRankingCreateWithoutDepartmentInput[] | LeaderboardRankingUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutDepartmentInput | LeaderboardRankingCreateOrConnectWithoutDepartmentInput[]
    createMany?: LeaderboardRankingCreateManyDepartmentInputEnvelope
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
  }

  export type EnumDepartmentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DepartmentType
  }

  export type EnumDepartmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.DepartmentStatus
  }

  export type StaffUpdateOneWithoutDepartmentsNestedInput = {
    create?: XOR<StaffCreateWithoutDepartmentsInput, StaffUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutDepartmentsInput
    upsert?: StaffUpsertWithoutDepartmentsInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutDepartmentsInput, StaffUpdateWithoutDepartmentsInput>, StaffUncheckedUpdateWithoutDepartmentsInput>
  }

  export type LeaderboardRankingUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<LeaderboardRankingCreateWithoutDepartmentInput, LeaderboardRankingUncheckedCreateWithoutDepartmentInput> | LeaderboardRankingCreateWithoutDepartmentInput[] | LeaderboardRankingUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutDepartmentInput | LeaderboardRankingCreateOrConnectWithoutDepartmentInput[]
    upsert?: LeaderboardRankingUpsertWithWhereUniqueWithoutDepartmentInput | LeaderboardRankingUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: LeaderboardRankingCreateManyDepartmentInputEnvelope
    set?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    disconnect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    delete?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    update?: LeaderboardRankingUpdateWithWhereUniqueWithoutDepartmentInput | LeaderboardRankingUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: LeaderboardRankingUpdateManyWithWhereWithoutDepartmentInput | LeaderboardRankingUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: LeaderboardRankingScalarWhereInput | LeaderboardRankingScalarWhereInput[]
  }

  export type LeaderboardRankingUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<LeaderboardRankingCreateWithoutDepartmentInput, LeaderboardRankingUncheckedCreateWithoutDepartmentInput> | LeaderboardRankingCreateWithoutDepartmentInput[] | LeaderboardRankingUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: LeaderboardRankingCreateOrConnectWithoutDepartmentInput | LeaderboardRankingCreateOrConnectWithoutDepartmentInput[]
    upsert?: LeaderboardRankingUpsertWithWhereUniqueWithoutDepartmentInput | LeaderboardRankingUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: LeaderboardRankingCreateManyDepartmentInputEnvelope
    set?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    disconnect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    delete?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    connect?: LeaderboardRankingWhereUniqueInput | LeaderboardRankingWhereUniqueInput[]
    update?: LeaderboardRankingUpdateWithWhereUniqueWithoutDepartmentInput | LeaderboardRankingUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: LeaderboardRankingUpdateManyWithWhereWithoutDepartmentInput | LeaderboardRankingUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: LeaderboardRankingScalarWhereInput | LeaderboardRankingScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type EnumNotificationPriorityFieldUpdateOperationsInput = {
    set?: $Enums.NotificationPriority
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type StudentCreateNestedOneWithoutStudentRiskTrackingInput = {
    create?: XOR<StudentCreateWithoutStudentRiskTrackingInput, StudentUncheckedCreateWithoutStudentRiskTrackingInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentRiskTrackingInput
    connect?: StudentWhereUniqueInput
  }

  export type EnumRiskLevelFieldUpdateOperationsInput = {
    set?: $Enums.RiskLevel
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type StudentUpdateOneRequiredWithoutStudentRiskTrackingNestedInput = {
    create?: XOR<StudentCreateWithoutStudentRiskTrackingInput, StudentUncheckedCreateWithoutStudentRiskTrackingInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentRiskTrackingInput
    upsert?: StudentUpsertWithoutStudentRiskTrackingInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutStudentRiskTrackingInput, StudentUpdateWithoutStudentRiskTrackingInput>, StudentUncheckedUpdateWithoutStudentRiskTrackingInput>
  }

  export type StudentCreateNestedOneWithoutStudentAlertsInput = {
    create?: XOR<StudentCreateWithoutStudentAlertsInput, StudentUncheckedCreateWithoutStudentAlertsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentAlertsInput
    connect?: StudentWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutStudentAlertsInput = {
    create?: XOR<StaffCreateWithoutStudentAlertsInput, StaffUncheckedCreateWithoutStudentAlertsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutStudentAlertsInput
    connect?: StaffWhereUniqueInput
  }

  export type EnumAlertTypeFieldUpdateOperationsInput = {
    set?: $Enums.AlertType
  }

  export type EnumAlertStatusFieldUpdateOperationsInput = {
    set?: $Enums.AlertStatus
  }

  export type StudentUpdateOneRequiredWithoutStudentAlertsNestedInput = {
    create?: XOR<StudentCreateWithoutStudentAlertsInput, StudentUncheckedCreateWithoutStudentAlertsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentAlertsInput
    upsert?: StudentUpsertWithoutStudentAlertsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutStudentAlertsInput, StudentUpdateWithoutStudentAlertsInput>, StudentUncheckedUpdateWithoutStudentAlertsInput>
  }

  export type StaffUpdateOneWithoutStudentAlertsNestedInput = {
    create?: XOR<StaffCreateWithoutStudentAlertsInput, StaffUncheckedCreateWithoutStudentAlertsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutStudentAlertsInput
    upsert?: StaffUpsertWithoutStudentAlertsInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutStudentAlertsInput, StaffUpdateWithoutStudentAlertsInput>, StaffUncheckedUpdateWithoutStudentAlertsInput>
  }

  export type StudentCreateNestedOneWithoutStudentPointsInput = {
    create?: XOR<StudentCreateWithoutStudentPointsInput, StudentUncheckedCreateWithoutStudentPointsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentPointsInput
    connect?: StudentWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutStudentPointsInput = {
    create?: XOR<ClassCreateWithoutStudentPointsInput, ClassUncheckedCreateWithoutStudentPointsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentPointsInput
    connect?: ClassWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutStudentPointsNestedInput = {
    create?: XOR<StudentCreateWithoutStudentPointsInput, StudentUncheckedCreateWithoutStudentPointsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentPointsInput
    upsert?: StudentUpsertWithoutStudentPointsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutStudentPointsInput, StudentUpdateWithoutStudentPointsInput>, StudentUncheckedUpdateWithoutStudentPointsInput>
  }

  export type ClassUpdateOneWithoutStudentPointsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentPointsInput, ClassUncheckedCreateWithoutStudentPointsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentPointsInput
    upsert?: ClassUpsertWithoutStudentPointsInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutStudentPointsInput, ClassUpdateWithoutStudentPointsInput>, ClassUncheckedUpdateWithoutStudentPointsInput>
  }

  export type StudentAchievementCreateNestedManyWithoutAchievementInput = {
    create?: XOR<StudentAchievementCreateWithoutAchievementInput, StudentAchievementUncheckedCreateWithoutAchievementInput> | StudentAchievementCreateWithoutAchievementInput[] | StudentAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: StudentAchievementCreateOrConnectWithoutAchievementInput | StudentAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: StudentAchievementCreateManyAchievementInputEnvelope
    connect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
  }

  export type StudentAchievementUncheckedCreateNestedManyWithoutAchievementInput = {
    create?: XOR<StudentAchievementCreateWithoutAchievementInput, StudentAchievementUncheckedCreateWithoutAchievementInput> | StudentAchievementCreateWithoutAchievementInput[] | StudentAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: StudentAchievementCreateOrConnectWithoutAchievementInput | StudentAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: StudentAchievementCreateManyAchievementInputEnvelope
    connect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
  }

  export type StudentAchievementUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<StudentAchievementCreateWithoutAchievementInput, StudentAchievementUncheckedCreateWithoutAchievementInput> | StudentAchievementCreateWithoutAchievementInput[] | StudentAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: StudentAchievementCreateOrConnectWithoutAchievementInput | StudentAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: StudentAchievementUpsertWithWhereUniqueWithoutAchievementInput | StudentAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: StudentAchievementCreateManyAchievementInputEnvelope
    set?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    disconnect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    delete?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    connect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    update?: StudentAchievementUpdateWithWhereUniqueWithoutAchievementInput | StudentAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: StudentAchievementUpdateManyWithWhereWithoutAchievementInput | StudentAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: StudentAchievementScalarWhereInput | StudentAchievementScalarWhereInput[]
  }

  export type StudentAchievementUncheckedUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<StudentAchievementCreateWithoutAchievementInput, StudentAchievementUncheckedCreateWithoutAchievementInput> | StudentAchievementCreateWithoutAchievementInput[] | StudentAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: StudentAchievementCreateOrConnectWithoutAchievementInput | StudentAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: StudentAchievementUpsertWithWhereUniqueWithoutAchievementInput | StudentAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: StudentAchievementCreateManyAchievementInputEnvelope
    set?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    disconnect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    delete?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    connect?: StudentAchievementWhereUniqueInput | StudentAchievementWhereUniqueInput[]
    update?: StudentAchievementUpdateWithWhereUniqueWithoutAchievementInput | StudentAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: StudentAchievementUpdateManyWithWhereWithoutAchievementInput | StudentAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: StudentAchievementScalarWhereInput | StudentAchievementScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutStudentAchievementsInput = {
    create?: XOR<StudentCreateWithoutStudentAchievementsInput, StudentUncheckedCreateWithoutStudentAchievementsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentAchievementsInput
    connect?: StudentWhereUniqueInput
  }

  export type AchievementCreateNestedOneWithoutStudentAchievementsInput = {
    create?: XOR<AchievementCreateWithoutStudentAchievementsInput, AchievementUncheckedCreateWithoutStudentAchievementsInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutStudentAchievementsInput
    connect?: AchievementWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutStudentAchievementsNestedInput = {
    create?: XOR<StudentCreateWithoutStudentAchievementsInput, StudentUncheckedCreateWithoutStudentAchievementsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentAchievementsInput
    upsert?: StudentUpsertWithoutStudentAchievementsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutStudentAchievementsInput, StudentUpdateWithoutStudentAchievementsInput>, StudentUncheckedUpdateWithoutStudentAchievementsInput>
  }

  export type AchievementUpdateOneRequiredWithoutStudentAchievementsNestedInput = {
    create?: XOR<AchievementCreateWithoutStudentAchievementsInput, AchievementUncheckedCreateWithoutStudentAchievementsInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutStudentAchievementsInput
    upsert?: AchievementUpsertWithoutStudentAchievementsInput
    connect?: AchievementWhereUniqueInput
    update?: XOR<XOR<AchievementUpdateToOneWithWhereWithoutStudentAchievementsInput, AchievementUpdateWithoutStudentAchievementsInput>, AchievementUncheckedUpdateWithoutStudentAchievementsInput>
  }

  export type StudentCreateNestedOneWithoutStudentStreaksInput = {
    create?: XOR<StudentCreateWithoutStudentStreaksInput, StudentUncheckedCreateWithoutStudentStreaksInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentStreaksInput
    connect?: StudentWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutStudentStreaksInput = {
    create?: XOR<ClassCreateWithoutStudentStreaksInput, ClassUncheckedCreateWithoutStudentStreaksInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentStreaksInput
    connect?: ClassWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutStudentStreaksNestedInput = {
    create?: XOR<StudentCreateWithoutStudentStreaksInput, StudentUncheckedCreateWithoutStudentStreaksInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentStreaksInput
    upsert?: StudentUpsertWithoutStudentStreaksInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutStudentStreaksInput, StudentUpdateWithoutStudentStreaksInput>, StudentUncheckedUpdateWithoutStudentStreaksInput>
  }

  export type ClassUpdateOneRequiredWithoutStudentStreaksNestedInput = {
    create?: XOR<ClassCreateWithoutStudentStreaksInput, ClassUncheckedCreateWithoutStudentStreaksInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentStreaksInput
    upsert?: ClassUpsertWithoutStudentStreaksInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutStudentStreaksInput, ClassUpdateWithoutStudentStreaksInput>, ClassUncheckedUpdateWithoutStudentStreaksInput>
  }

  export type StudentCreateNestedOneWithoutLeaderboardRankingsInput = {
    create?: XOR<StudentCreateWithoutLeaderboardRankingsInput, StudentUncheckedCreateWithoutLeaderboardRankingsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutLeaderboardRankingsInput
    connect?: StudentWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutLeaderboardRankingsInput = {
    create?: XOR<ClassCreateWithoutLeaderboardRankingsInput, ClassUncheckedCreateWithoutLeaderboardRankingsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutLeaderboardRankingsInput
    connect?: ClassWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutLeaderboardRankingsInput = {
    create?: XOR<DepartmentCreateWithoutLeaderboardRankingsInput, DepartmentUncheckedCreateWithoutLeaderboardRankingsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutLeaderboardRankingsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutLeaderboardRankingsNestedInput = {
    create?: XOR<StudentCreateWithoutLeaderboardRankingsInput, StudentUncheckedCreateWithoutLeaderboardRankingsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutLeaderboardRankingsInput
    upsert?: StudentUpsertWithoutLeaderboardRankingsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutLeaderboardRankingsInput, StudentUpdateWithoutLeaderboardRankingsInput>, StudentUncheckedUpdateWithoutLeaderboardRankingsInput>
  }

  export type ClassUpdateOneWithoutLeaderboardRankingsNestedInput = {
    create?: XOR<ClassCreateWithoutLeaderboardRankingsInput, ClassUncheckedCreateWithoutLeaderboardRankingsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutLeaderboardRankingsInput
    upsert?: ClassUpsertWithoutLeaderboardRankingsInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutLeaderboardRankingsInput, ClassUpdateWithoutLeaderboardRankingsInput>, ClassUncheckedUpdateWithoutLeaderboardRankingsInput>
  }

  export type DepartmentUpdateOneWithoutLeaderboardRankingsNestedInput = {
    create?: XOR<DepartmentCreateWithoutLeaderboardRankingsInput, DepartmentUncheckedCreateWithoutLeaderboardRankingsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutLeaderboardRankingsInput
    upsert?: DepartmentUpsertWithoutLeaderboardRankingsInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutLeaderboardRankingsInput, DepartmentUpdateWithoutLeaderboardRankingsInput>, DepartmentUncheckedUpdateWithoutLeaderboardRankingsInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClassCreateNestedOneWithoutClassLocationsInput = {
    create?: XOR<ClassCreateWithoutClassLocationsInput, ClassUncheckedCreateWithoutClassLocationsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutClassLocationsInput
    connect?: ClassWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutClassLocationsNestedInput = {
    create?: XOR<ClassCreateWithoutClassLocationsInput, ClassUncheckedCreateWithoutClassLocationsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutClassLocationsInput
    upsert?: ClassUpsertWithoutClassLocationsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutClassLocationsInput, ClassUpdateWithoutClassLocationsInput>, ClassUncheckedUpdateWithoutClassLocationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumAttendanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusFilter<$PrismaModel> | $Enums.AttendanceStatus
  }

  export type NestedEnumAttendanceMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceMethod | EnumAttendanceMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceMethodFilter<$PrismaModel> | $Enums.AttendanceMethod
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendanceStatusFilter<$PrismaModel>
  }

  export type NestedEnumAttendanceMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceMethod | EnumAttendanceMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceMethodWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceMethodFilter<$PrismaModel>
    _max?: NestedEnumAttendanceMethodFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumSessionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionType | EnumSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionTypeFilter<$PrismaModel> | $Enums.SessionType
  }

  export type NestedEnumPlanningStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanningStatus | EnumPlanningStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PlanningStatus[] | ListEnumPlanningStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanningStatus[] | ListEnumPlanningStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanningStatusFilter<$PrismaModel> | $Enums.PlanningStatus
  }

  export type NestedEnumSessionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionType | EnumSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionType[] | ListEnumSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SessionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionTypeFilter<$PrismaModel>
    _max?: NestedEnumSessionTypeFilter<$PrismaModel>
  }

  export type NestedEnumPlanningStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanningStatus | EnumPlanningStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PlanningStatus[] | ListEnumPlanningStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanningStatus[] | ListEnumPlanningStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanningStatusWithAggregatesFilter<$PrismaModel> | $Enums.PlanningStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanningStatusFilter<$PrismaModel>
    _max?: NestedEnumPlanningStatusFilter<$PrismaModel>
  }

  export type NestedEnumJustificationReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.JustificationReason | EnumJustificationReasonFieldRefInput<$PrismaModel>
    in?: $Enums.JustificationReason[] | ListEnumJustificationReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.JustificationReason[] | ListEnumJustificationReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumJustificationReasonFilter<$PrismaModel> | $Enums.JustificationReason
  }

  export type NestedEnumJustificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JustificationStatus | EnumJustificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JustificationStatus[] | ListEnumJustificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JustificationStatus[] | ListEnumJustificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJustificationStatusFilter<$PrismaModel> | $Enums.JustificationStatus
  }

  export type NestedEnumJustificationReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JustificationReason | EnumJustificationReasonFieldRefInput<$PrismaModel>
    in?: $Enums.JustificationReason[] | ListEnumJustificationReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.JustificationReason[] | ListEnumJustificationReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumJustificationReasonWithAggregatesFilter<$PrismaModel> | $Enums.JustificationReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJustificationReasonFilter<$PrismaModel>
    _max?: NestedEnumJustificationReasonFilter<$PrismaModel>
  }

  export type NestedEnumJustificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JustificationStatus | EnumJustificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JustificationStatus[] | ListEnumJustificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JustificationStatus[] | ListEnumJustificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJustificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.JustificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJustificationStatusFilter<$PrismaModel>
    _max?: NestedEnumJustificationStatusFilter<$PrismaModel>
  }

  export type NestedEnumDepartmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentType | EnumDepartmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentType[] | ListEnumDepartmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentType[] | ListEnumDepartmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentTypeFilter<$PrismaModel> | $Enums.DepartmentType
  }

  export type NestedEnumDepartmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentStatus | EnumDepartmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentStatus[] | ListEnumDepartmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentStatus[] | ListEnumDepartmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentStatusFilter<$PrismaModel> | $Enums.DepartmentStatus
  }

  export type NestedEnumDepartmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentType | EnumDepartmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentType[] | ListEnumDepartmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentType[] | ListEnumDepartmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DepartmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentTypeFilter<$PrismaModel>
    _max?: NestedEnumDepartmentTypeFilter<$PrismaModel>
  }

  export type NestedEnumDepartmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentStatus | EnumDepartmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentStatus[] | ListEnumDepartmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentStatus[] | ListEnumDepartmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.DepartmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentStatusFilter<$PrismaModel>
    _max?: NestedEnumDepartmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityFilter<$PrismaModel> | $Enums.NotificationPriority
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.NotificationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationPriorityFilter<$PrismaModel>
    _max?: NestedEnumNotificationPriorityFilter<$PrismaModel>
  }

  export type NestedEnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumAlertTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeFilter<$PrismaModel> | $Enums.AlertType
  }

  export type NestedEnumAlertStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStatusFilter<$PrismaModel> | $Enums.AlertStatus
  }

  export type NestedEnumAlertTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeWithAggregatesFilter<$PrismaModel> | $Enums.AlertType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertTypeFilter<$PrismaModel>
    _max?: NestedEnumAlertTypeFilter<$PrismaModel>
  }

  export type NestedEnumAlertStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStatusWithAggregatesFilter<$PrismaModel> | $Enums.AlertStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertStatusFilter<$PrismaModel>
    _max?: NestedEnumAlertStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AdminCreateWithoutUserInput = {
    adminLevel?: string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUncheckedCreateWithoutUserInput = {
    id?: number
    adminLevel?: string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminCreateOrConnectWithoutUserInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
  }

  export type StaffCreateWithoutUserInput = {
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classes?: ClassCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffUncheckedCreateWithoutUserInput = {
    id?: number
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classes?: ClassUncheckedCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffCreateOrConnectWithoutUserInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
  }

  export type StudentCreateWithoutUserInput = {
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutUserInput = {
    id?: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingUncheckedCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementUncheckedCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutUserInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateWithoutUserInput = {
    type: $Enums.NotificationType
    title: string
    message: string
    read?: boolean
    priority?: $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    read?: boolean
    priority?: $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AdminUpsertWithoutUserInput = {
    update: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateWithoutUserInput = {
    adminLevel?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminLevel?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUpsertWithoutUserInput = {
    update: XOR<StaffUpdateWithoutUserInput, StaffUncheckedUpdateWithoutUserInput>
    create: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutUserInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutUserInput, StaffUncheckedUpdateWithoutUserInput>
  }

  export type StaffUpdateWithoutUserInput = {
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: ClassUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutSentByStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: ClassUncheckedUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutSentByStaffNestedInput
  }

  export type StudentUpsertWithoutUserInput = {
    update: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutUserInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateWithoutUserInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUncheckedUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUncheckedUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    read?: BoolFilter<"Notification"> | boolean
    priority?: EnumNotificationPriorityFilter<"Notification"> | $Enums.NotificationPriority
    data?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
  }

  export type UserCreateWithoutAdminInput = {
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    phone?: string | null
    avatarUrl?: string | null
    lastSeen?: Date | string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    phone?: string | null
    avatarUrl?: string | null
    lastSeen?: Date | string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
  }

  export type UserUpsertWithoutAdminInput = {
    update: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
  }

  export type UserUpdateWithoutAdminInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutStaffInput = {
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    phone?: string | null
    avatarUrl?: string | null
    lastSeen?: Date | string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: AdminCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStaffInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    phone?: string | null
    avatarUrl?: string | null
    lastSeen?: Date | string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStaffInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStaffInput, UserUncheckedCreateWithoutStaffInput>
  }

  export type ClassCreateWithoutFacultyInput = {
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutFacultyInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutFacultyInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutFacultyInput, ClassUncheckedCreateWithoutFacultyInput>
  }

  export type ClassCreateManyFacultyInputEnvelope = {
    data: ClassCreateManyFacultyInput | ClassCreateManyFacultyInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceSessionCreateWithoutCreatorInput = {
    sessionId: string
    sessionDate: Date | string
    sessionTime: Date | string
    sessionType?: $Enums.SessionType
    location?: string | null
    plannedTopic?: string | null
    targetLearning?: string | null
    targetLevel?: string | null
    planningStatus?: $Enums.PlanningStatus
    notes?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutAttendanceSessionsInput
    qrSessions?: QRSessionCreateNestedManyWithoutAttendanceSessionInput
  }

  export type AttendanceSessionUncheckedCreateWithoutCreatorInput = {
    id?: number
    sessionId: string
    classId: number
    sessionDate: Date | string
    sessionTime: Date | string
    sessionType?: $Enums.SessionType
    location?: string | null
    plannedTopic?: string | null
    targetLearning?: string | null
    targetLevel?: string | null
    planningStatus?: $Enums.PlanningStatus
    notes?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrSessions?: QRSessionUncheckedCreateNestedManyWithoutAttendanceSessionInput
  }

  export type AttendanceSessionCreateOrConnectWithoutCreatorInput = {
    where: AttendanceSessionWhereUniqueInput
    create: XOR<AttendanceSessionCreateWithoutCreatorInput, AttendanceSessionUncheckedCreateWithoutCreatorInput>
  }

  export type AttendanceSessionCreateManyCreatorInputEnvelope = {
    data: AttendanceSessionCreateManyCreatorInput | AttendanceSessionCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceRecordCreateWithoutRecordedByStaffInput = {
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAttendanceRecordsInput
    class: ClassCreateNestedOneWithoutAttendanceRecordsInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutAttendanceRecordInput
  }

  export type AttendanceRecordUncheckedCreateWithoutRecordedByStaffInput = {
    id?: number
    studentId: number
    classId: number
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutAttendanceRecordInput
  }

  export type AttendanceRecordCreateOrConnectWithoutRecordedByStaffInput = {
    where: AttendanceRecordWhereUniqueInput
    create: XOR<AttendanceRecordCreateWithoutRecordedByStaffInput, AttendanceRecordUncheckedCreateWithoutRecordedByStaffInput>
  }

  export type AttendanceRecordCreateManyRecordedByStaffInputEnvelope = {
    data: AttendanceRecordCreateManyRecordedByStaffInput | AttendanceRecordCreateManyRecordedByStaffInput[]
    skipDuplicates?: boolean
  }

  export type AbsenceJustificationCreateWithoutReviewedByStaffInput = {
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAbsenceJustificationsInput
    class: ClassCreateNestedOneWithoutAbsenceJustificationsInput
    attendanceRecord?: AttendanceRecordCreateNestedOneWithoutAbsenceJustificationsInput
  }

  export type AbsenceJustificationUncheckedCreateWithoutReviewedByStaffInput = {
    id?: number
    studentId: number
    classId: number
    attendanceRecordId?: number | null
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceJustificationCreateOrConnectWithoutReviewedByStaffInput = {
    where: AbsenceJustificationWhereUniqueInput
    create: XOR<AbsenceJustificationCreateWithoutReviewedByStaffInput, AbsenceJustificationUncheckedCreateWithoutReviewedByStaffInput>
  }

  export type AbsenceJustificationCreateManyReviewedByStaffInputEnvelope = {
    data: AbsenceJustificationCreateManyReviewedByStaffInput | AbsenceJustificationCreateManyReviewedByStaffInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutHeadInput = {
    name: string
    code: string
    type?: $Enums.DepartmentType
    status?: $Enums.DepartmentStatus
    programsCount?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutHeadInput = {
    id?: number
    name: string
    code: string
    type?: $Enums.DepartmentType
    status?: $Enums.DepartmentStatus
    programsCount?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutHeadInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
  }

  export type DepartmentCreateManyHeadInputEnvelope = {
    data: DepartmentCreateManyHeadInput | DepartmentCreateManyHeadInput[]
    skipDuplicates?: boolean
  }

  export type StudentAlertCreateWithoutSentByStaffInput = {
    alertType: $Enums.AlertType
    message: string
    recipient?: string | null
    status?: $Enums.AlertStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutStudentAlertsInput
  }

  export type StudentAlertUncheckedCreateWithoutSentByStaffInput = {
    id?: number
    studentId: number
    alertType: $Enums.AlertType
    message: string
    recipient?: string | null
    status?: $Enums.AlertStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type StudentAlertCreateOrConnectWithoutSentByStaffInput = {
    where: StudentAlertWhereUniqueInput
    create: XOR<StudentAlertCreateWithoutSentByStaffInput, StudentAlertUncheckedCreateWithoutSentByStaffInput>
  }

  export type StudentAlertCreateManySentByStaffInputEnvelope = {
    data: StudentAlertCreateManySentByStaffInput | StudentAlertCreateManySentByStaffInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStaffInput = {
    update: XOR<UserUpdateWithoutStaffInput, UserUncheckedUpdateWithoutStaffInput>
    create: XOR<UserCreateWithoutStaffInput, UserUncheckedCreateWithoutStaffInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStaffInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStaffInput, UserUncheckedUpdateWithoutStaffInput>
  }

  export type UserUpdateWithoutStaffInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClassUpsertWithWhereUniqueWithoutFacultyInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutFacultyInput, ClassUncheckedUpdateWithoutFacultyInput>
    create: XOR<ClassCreateWithoutFacultyInput, ClassUncheckedCreateWithoutFacultyInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutFacultyInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutFacultyInput, ClassUncheckedUpdateWithoutFacultyInput>
  }

  export type ClassUpdateManyWithWhereWithoutFacultyInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutFacultyInput>
  }

  export type ClassScalarWhereInput = {
    AND?: ClassScalarWhereInput | ClassScalarWhereInput[]
    OR?: ClassScalarWhereInput[]
    NOT?: ClassScalarWhereInput | ClassScalarWhereInput[]
    id?: IntFilter<"Class"> | number
    name?: StringFilter<"Class"> | string
    code?: StringFilter<"Class"> | string
    subject?: StringFilter<"Class"> | string
    description?: StringNullableFilter<"Class"> | string | null
    facultyId?: IntNullableFilter<"Class"> | number | null
    room?: StringNullableFilter<"Class"> | string | null
    capacity?: IntNullableFilter<"Class"> | number | null
    schedule?: StringNullableFilter<"Class"> | string | null
    department?: StringNullableFilter<"Class"> | string | null
    semester?: StringNullableFilter<"Class"> | string | null
    academicYear?: StringNullableFilter<"Class"> | string | null
    credits?: IntNullableFilter<"Class"> | number | null
    classType?: StringNullableFilter<"Class"> | string | null
    latitude?: FloatNullableFilter<"Class"> | number | null
    longitude?: FloatNullableFilter<"Class"> | number | null
    geofenceRadius?: IntNullableFilter<"Class"> | number | null
    geofenceEnabled?: BoolNullableFilter<"Class"> | boolean | null
    status?: StringNullableFilter<"Class"> | string | null
    createdAt?: DateTimeFilter<"Class"> | Date | string
    updatedAt?: DateTimeFilter<"Class"> | Date | string
  }

  export type AttendanceSessionUpsertWithWhereUniqueWithoutCreatorInput = {
    where: AttendanceSessionWhereUniqueInput
    update: XOR<AttendanceSessionUpdateWithoutCreatorInput, AttendanceSessionUncheckedUpdateWithoutCreatorInput>
    create: XOR<AttendanceSessionCreateWithoutCreatorInput, AttendanceSessionUncheckedCreateWithoutCreatorInput>
  }

  export type AttendanceSessionUpdateWithWhereUniqueWithoutCreatorInput = {
    where: AttendanceSessionWhereUniqueInput
    data: XOR<AttendanceSessionUpdateWithoutCreatorInput, AttendanceSessionUncheckedUpdateWithoutCreatorInput>
  }

  export type AttendanceSessionUpdateManyWithWhereWithoutCreatorInput = {
    where: AttendanceSessionScalarWhereInput
    data: XOR<AttendanceSessionUpdateManyMutationInput, AttendanceSessionUncheckedUpdateManyWithoutCreatorInput>
  }

  export type AttendanceSessionScalarWhereInput = {
    AND?: AttendanceSessionScalarWhereInput | AttendanceSessionScalarWhereInput[]
    OR?: AttendanceSessionScalarWhereInput[]
    NOT?: AttendanceSessionScalarWhereInput | AttendanceSessionScalarWhereInput[]
    id?: IntFilter<"AttendanceSession"> | number
    sessionId?: StringFilter<"AttendanceSession"> | string
    classId?: IntFilter<"AttendanceSession"> | number
    createdBy?: IntFilter<"AttendanceSession"> | number
    sessionDate?: DateTimeFilter<"AttendanceSession"> | Date | string
    sessionTime?: DateTimeFilter<"AttendanceSession"> | Date | string
    sessionType?: EnumSessionTypeFilter<"AttendanceSession"> | $Enums.SessionType
    location?: StringNullableFilter<"AttendanceSession"> | string | null
    plannedTopic?: StringNullableFilter<"AttendanceSession"> | string | null
    targetLearning?: StringNullableFilter<"AttendanceSession"> | string | null
    targetLevel?: StringNullableFilter<"AttendanceSession"> | string | null
    planningStatus?: EnumPlanningStatusFilter<"AttendanceSession"> | $Enums.PlanningStatus
    notes?: StringNullableFilter<"AttendanceSession"> | string | null
    latitude?: FloatNullableFilter<"AttendanceSession"> | number | null
    longitude?: FloatNullableFilter<"AttendanceSession"> | number | null
    geofenceRadius?: IntNullableFilter<"AttendanceSession"> | number | null
    expiresAt?: DateTimeFilter<"AttendanceSession"> | Date | string
    status?: StringNullableFilter<"AttendanceSession"> | string | null
    createdAt?: DateTimeFilter<"AttendanceSession"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceSession"> | Date | string
  }

  export type AttendanceRecordUpsertWithWhereUniqueWithoutRecordedByStaffInput = {
    where: AttendanceRecordWhereUniqueInput
    update: XOR<AttendanceRecordUpdateWithoutRecordedByStaffInput, AttendanceRecordUncheckedUpdateWithoutRecordedByStaffInput>
    create: XOR<AttendanceRecordCreateWithoutRecordedByStaffInput, AttendanceRecordUncheckedCreateWithoutRecordedByStaffInput>
  }

  export type AttendanceRecordUpdateWithWhereUniqueWithoutRecordedByStaffInput = {
    where: AttendanceRecordWhereUniqueInput
    data: XOR<AttendanceRecordUpdateWithoutRecordedByStaffInput, AttendanceRecordUncheckedUpdateWithoutRecordedByStaffInput>
  }

  export type AttendanceRecordUpdateManyWithWhereWithoutRecordedByStaffInput = {
    where: AttendanceRecordScalarWhereInput
    data: XOR<AttendanceRecordUpdateManyMutationInput, AttendanceRecordUncheckedUpdateManyWithoutRecordedByStaffInput>
  }

  export type AttendanceRecordScalarWhereInput = {
    AND?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
    OR?: AttendanceRecordScalarWhereInput[]
    NOT?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
    id?: IntFilter<"AttendanceRecord"> | number
    studentId?: IntFilter<"AttendanceRecord"> | number
    classId?: IntFilter<"AttendanceRecord"> | number
    sessionDate?: DateTimeFilter<"AttendanceRecord"> | Date | string
    sessionTime?: DateTimeNullableFilter<"AttendanceRecord"> | Date | string | null
    status?: EnumAttendanceStatusFilter<"AttendanceRecord"> | $Enums.AttendanceStatus
    checkInTime?: DateTimeNullableFilter<"AttendanceRecord"> | Date | string | null
    method?: EnumAttendanceMethodFilter<"AttendanceRecord"> | $Enums.AttendanceMethod
    qrSessionId?: StringNullableFilter<"AttendanceRecord"> | string | null
    scanTimestamp?: DateTimeNullableFilter<"AttendanceRecord"> | Date | string | null
    isJustified?: BoolFilter<"AttendanceRecord"> | boolean
    justificationId?: IntNullableFilter<"AttendanceRecord"> | number | null
    studentLatitude?: FloatNullableFilter<"AttendanceRecord"> | number | null
    studentLongitude?: FloatNullableFilter<"AttendanceRecord"> | number | null
    distanceFromClass?: FloatNullableFilter<"AttendanceRecord"> | number | null
    locationVerified?: BoolNullableFilter<"AttendanceRecord"> | boolean | null
    createdAt?: DateTimeFilter<"AttendanceRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceRecord"> | Date | string
    recordedBy?: IntNullableFilter<"AttendanceRecord"> | number | null
  }

  export type AbsenceJustificationUpsertWithWhereUniqueWithoutReviewedByStaffInput = {
    where: AbsenceJustificationWhereUniqueInput
    update: XOR<AbsenceJustificationUpdateWithoutReviewedByStaffInput, AbsenceJustificationUncheckedUpdateWithoutReviewedByStaffInput>
    create: XOR<AbsenceJustificationCreateWithoutReviewedByStaffInput, AbsenceJustificationUncheckedCreateWithoutReviewedByStaffInput>
  }

  export type AbsenceJustificationUpdateWithWhereUniqueWithoutReviewedByStaffInput = {
    where: AbsenceJustificationWhereUniqueInput
    data: XOR<AbsenceJustificationUpdateWithoutReviewedByStaffInput, AbsenceJustificationUncheckedUpdateWithoutReviewedByStaffInput>
  }

  export type AbsenceJustificationUpdateManyWithWhereWithoutReviewedByStaffInput = {
    where: AbsenceJustificationScalarWhereInput
    data: XOR<AbsenceJustificationUpdateManyMutationInput, AbsenceJustificationUncheckedUpdateManyWithoutReviewedByStaffInput>
  }

  export type AbsenceJustificationScalarWhereInput = {
    AND?: AbsenceJustificationScalarWhereInput | AbsenceJustificationScalarWhereInput[]
    OR?: AbsenceJustificationScalarWhereInput[]
    NOT?: AbsenceJustificationScalarWhereInput | AbsenceJustificationScalarWhereInput[]
    id?: IntFilter<"AbsenceJustification"> | number
    studentId?: IntFilter<"AbsenceJustification"> | number
    classId?: IntFilter<"AbsenceJustification"> | number
    attendanceRecordId?: IntNullableFilter<"AbsenceJustification"> | number | null
    absenceDate?: DateTimeFilter<"AbsenceJustification"> | Date | string
    reason?: EnumJustificationReasonFilter<"AbsenceJustification"> | $Enums.JustificationReason
    description?: StringNullableFilter<"AbsenceJustification"> | string | null
    documents?: JsonNullableFilter<"AbsenceJustification">
    status?: EnumJustificationStatusFilter<"AbsenceJustification"> | $Enums.JustificationStatus
    submittedAt?: DateTimeFilter<"AbsenceJustification"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"AbsenceJustification"> | Date | string | null
    reviewedBy?: IntNullableFilter<"AbsenceJustification"> | number | null
    reviewNote?: StringNullableFilter<"AbsenceJustification"> | string | null
    createdAt?: DateTimeFilter<"AbsenceJustification"> | Date | string
    updatedAt?: DateTimeFilter<"AbsenceJustification"> | Date | string
  }

  export type DepartmentUpsertWithWhereUniqueWithoutHeadInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutHeadInput, DepartmentUncheckedUpdateWithoutHeadInput>
    create: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutHeadInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutHeadInput, DepartmentUncheckedUpdateWithoutHeadInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutHeadInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutHeadInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: IntFilter<"Department"> | number
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    headId?: IntNullableFilter<"Department"> | number | null
    type?: EnumDepartmentTypeFilter<"Department"> | $Enums.DepartmentType
    status?: EnumDepartmentStatusFilter<"Department"> | $Enums.DepartmentStatus
    programsCount?: IntFilter<"Department"> | number
    description?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
  }

  export type StudentAlertUpsertWithWhereUniqueWithoutSentByStaffInput = {
    where: StudentAlertWhereUniqueInput
    update: XOR<StudentAlertUpdateWithoutSentByStaffInput, StudentAlertUncheckedUpdateWithoutSentByStaffInput>
    create: XOR<StudentAlertCreateWithoutSentByStaffInput, StudentAlertUncheckedCreateWithoutSentByStaffInput>
  }

  export type StudentAlertUpdateWithWhereUniqueWithoutSentByStaffInput = {
    where: StudentAlertWhereUniqueInput
    data: XOR<StudentAlertUpdateWithoutSentByStaffInput, StudentAlertUncheckedUpdateWithoutSentByStaffInput>
  }

  export type StudentAlertUpdateManyWithWhereWithoutSentByStaffInput = {
    where: StudentAlertScalarWhereInput
    data: XOR<StudentAlertUpdateManyMutationInput, StudentAlertUncheckedUpdateManyWithoutSentByStaffInput>
  }

  export type StudentAlertScalarWhereInput = {
    AND?: StudentAlertScalarWhereInput | StudentAlertScalarWhereInput[]
    OR?: StudentAlertScalarWhereInput[]
    NOT?: StudentAlertScalarWhereInput | StudentAlertScalarWhereInput[]
    id?: IntFilter<"StudentAlert"> | number
    studentId?: IntFilter<"StudentAlert"> | number
    alertType?: EnumAlertTypeFilter<"StudentAlert"> | $Enums.AlertType
    message?: StringFilter<"StudentAlert"> | string
    recipient?: StringNullableFilter<"StudentAlert"> | string | null
    status?: EnumAlertStatusFilter<"StudentAlert"> | $Enums.AlertStatus
    sentBy?: IntNullableFilter<"StudentAlert"> | number | null
    sentAt?: DateTimeNullableFilter<"StudentAlert"> | Date | string | null
    createdAt?: DateTimeFilter<"StudentAlert"> | Date | string
  }

  export type UserCreateWithoutStudentInput = {
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    phone?: string | null
    avatarUrl?: string | null
    lastSeen?: Date | string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: AdminCreateNestedOneWithoutUserInput
    staff?: StaffCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudentInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    phone?: string | null
    avatarUrl?: string | null
    lastSeen?: Date | string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    staff?: StaffUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
  }

  export type ClassEnrollmentCreateWithoutStudentInput = {
    enrollmentDate?: Date | string
    status?: string | null
    grade?: string | null
    createdAt?: Date | string
    class: ClassCreateNestedOneWithoutClassEnrollmentsInput
  }

  export type ClassEnrollmentUncheckedCreateWithoutStudentInput = {
    id?: number
    classId: number
    enrollmentDate?: Date | string
    status?: string | null
    grade?: string | null
    createdAt?: Date | string
  }

  export type ClassEnrollmentCreateOrConnectWithoutStudentInput = {
    where: ClassEnrollmentWhereUniqueInput
    create: XOR<ClassEnrollmentCreateWithoutStudentInput, ClassEnrollmentUncheckedCreateWithoutStudentInput>
  }

  export type ClassEnrollmentCreateManyStudentInputEnvelope = {
    data: ClassEnrollmentCreateManyStudentInput | ClassEnrollmentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceRecordCreateWithoutStudentInput = {
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutAttendanceRecordsInput
    recordedByStaff?: StaffCreateNestedOneWithoutAttendanceRecordsInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutAttendanceRecordInput
  }

  export type AttendanceRecordUncheckedCreateWithoutStudentInput = {
    id?: number
    classId: number
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recordedBy?: number | null
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutAttendanceRecordInput
  }

  export type AttendanceRecordCreateOrConnectWithoutStudentInput = {
    where: AttendanceRecordWhereUniqueInput
    create: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput>
  }

  export type AttendanceRecordCreateManyStudentInputEnvelope = {
    data: AttendanceRecordCreateManyStudentInput | AttendanceRecordCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AbsenceJustificationCreateWithoutStudentInput = {
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutAbsenceJustificationsInput
    attendanceRecord?: AttendanceRecordCreateNestedOneWithoutAbsenceJustificationsInput
    reviewedByStaff?: StaffCreateNestedOneWithoutAbsenceJustificationsInput
  }

  export type AbsenceJustificationUncheckedCreateWithoutStudentInput = {
    id?: number
    classId: number
    attendanceRecordId?: number | null
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceJustificationCreateOrConnectWithoutStudentInput = {
    where: AbsenceJustificationWhereUniqueInput
    create: XOR<AbsenceJustificationCreateWithoutStudentInput, AbsenceJustificationUncheckedCreateWithoutStudentInput>
  }

  export type AbsenceJustificationCreateManyStudentInputEnvelope = {
    data: AbsenceJustificationCreateManyStudentInput | AbsenceJustificationCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentRiskTrackingCreateWithoutStudentInput = {
    riskLevel: $Enums.RiskLevel
    attendanceRate: Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: number
    totalAbsences?: number
    lastAttendanceDate?: Date | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentRiskTrackingUncheckedCreateWithoutStudentInput = {
    id?: number
    riskLevel: $Enums.RiskLevel
    attendanceRate: Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: number
    totalAbsences?: number
    lastAttendanceDate?: Date | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentRiskTrackingCreateOrConnectWithoutStudentInput = {
    where: StudentRiskTrackingWhereUniqueInput
    create: XOR<StudentRiskTrackingCreateWithoutStudentInput, StudentRiskTrackingUncheckedCreateWithoutStudentInput>
  }

  export type StudentRiskTrackingCreateManyStudentInputEnvelope = {
    data: StudentRiskTrackingCreateManyStudentInput | StudentRiskTrackingCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentAlertCreateWithoutStudentInput = {
    alertType: $Enums.AlertType
    message: string
    recipient?: string | null
    status?: $Enums.AlertStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
    sentByStaff?: StaffCreateNestedOneWithoutStudentAlertsInput
  }

  export type StudentAlertUncheckedCreateWithoutStudentInput = {
    id?: number
    alertType: $Enums.AlertType
    message: string
    recipient?: string | null
    status?: $Enums.AlertStatus
    sentBy?: number | null
    sentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type StudentAlertCreateOrConnectWithoutStudentInput = {
    where: StudentAlertWhereUniqueInput
    create: XOR<StudentAlertCreateWithoutStudentInput, StudentAlertUncheckedCreateWithoutStudentInput>
  }

  export type StudentAlertCreateManyStudentInputEnvelope = {
    data: StudentAlertCreateManyStudentInput | StudentAlertCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentPointCreateWithoutStudentInput = {
    points: number
    pointType: string
    description?: string | null
    referenceId?: number | null
    awardedBy?: number | null
    createdAt?: Date | string
    class?: ClassCreateNestedOneWithoutStudentPointsInput
  }

  export type StudentPointUncheckedCreateWithoutStudentInput = {
    id?: number
    classId?: number | null
    points: number
    pointType: string
    description?: string | null
    referenceId?: number | null
    awardedBy?: number | null
    createdAt?: Date | string
  }

  export type StudentPointCreateOrConnectWithoutStudentInput = {
    where: StudentPointWhereUniqueInput
    create: XOR<StudentPointCreateWithoutStudentInput, StudentPointUncheckedCreateWithoutStudentInput>
  }

  export type StudentPointCreateManyStudentInputEnvelope = {
    data: StudentPointCreateManyStudentInput | StudentPointCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentAchievementCreateWithoutStudentInput = {
    progress?: number
    isEarned?: boolean
    earnedAt?: Date | string | null
    createdAt?: Date | string
    achievement: AchievementCreateNestedOneWithoutStudentAchievementsInput
  }

  export type StudentAchievementUncheckedCreateWithoutStudentInput = {
    id?: number
    achievementId: number
    progress?: number
    isEarned?: boolean
    earnedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type StudentAchievementCreateOrConnectWithoutStudentInput = {
    where: StudentAchievementWhereUniqueInput
    create: XOR<StudentAchievementCreateWithoutStudentInput, StudentAchievementUncheckedCreateWithoutStudentInput>
  }

  export type StudentAchievementCreateManyStudentInputEnvelope = {
    data: StudentAchievementCreateManyStudentInput | StudentAchievementCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentStreakCreateWithoutStudentInput = {
    currentStreak?: number
    longestStreak?: number
    lastAttendanceDate?: Date | string | null
    streakStartDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutStudentStreaksInput
  }

  export type StudentStreakUncheckedCreateWithoutStudentInput = {
    id?: number
    classId: number
    currentStreak?: number
    longestStreak?: number
    lastAttendanceDate?: Date | string | null
    streakStartDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentStreakCreateOrConnectWithoutStudentInput = {
    where: StudentStreakWhereUniqueInput
    create: XOR<StudentStreakCreateWithoutStudentInput, StudentStreakUncheckedCreateWithoutStudentInput>
  }

  export type StudentStreakCreateManyStudentInputEnvelope = {
    data: StudentStreakCreateManyStudentInput | StudentStreakCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type LeaderboardRankingCreateWithoutStudentInput = {
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
    class?: ClassCreateNestedOneWithoutLeaderboardRankingsInput
    department?: DepartmentCreateNestedOneWithoutLeaderboardRankingsInput
  }

  export type LeaderboardRankingUncheckedCreateWithoutStudentInput = {
    id?: number
    classId?: number | null
    departmentId?: number | null
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type LeaderboardRankingCreateOrConnectWithoutStudentInput = {
    where: LeaderboardRankingWhereUniqueInput
    create: XOR<LeaderboardRankingCreateWithoutStudentInput, LeaderboardRankingUncheckedCreateWithoutStudentInput>
  }

  export type LeaderboardRankingCreateManyStudentInputEnvelope = {
    data: LeaderboardRankingCreateManyStudentInput | LeaderboardRankingCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStudentInput = {
    update: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
  }

  export type UserUpdateWithoutStudentInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneWithoutUserNestedInput
    staff?: StaffUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    staff?: StaffUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClassEnrollmentUpsertWithWhereUniqueWithoutStudentInput = {
    where: ClassEnrollmentWhereUniqueInput
    update: XOR<ClassEnrollmentUpdateWithoutStudentInput, ClassEnrollmentUncheckedUpdateWithoutStudentInput>
    create: XOR<ClassEnrollmentCreateWithoutStudentInput, ClassEnrollmentUncheckedCreateWithoutStudentInput>
  }

  export type ClassEnrollmentUpdateWithWhereUniqueWithoutStudentInput = {
    where: ClassEnrollmentWhereUniqueInput
    data: XOR<ClassEnrollmentUpdateWithoutStudentInput, ClassEnrollmentUncheckedUpdateWithoutStudentInput>
  }

  export type ClassEnrollmentUpdateManyWithWhereWithoutStudentInput = {
    where: ClassEnrollmentScalarWhereInput
    data: XOR<ClassEnrollmentUpdateManyMutationInput, ClassEnrollmentUncheckedUpdateManyWithoutStudentInput>
  }

  export type ClassEnrollmentScalarWhereInput = {
    AND?: ClassEnrollmentScalarWhereInput | ClassEnrollmentScalarWhereInput[]
    OR?: ClassEnrollmentScalarWhereInput[]
    NOT?: ClassEnrollmentScalarWhereInput | ClassEnrollmentScalarWhereInput[]
    id?: IntFilter<"ClassEnrollment"> | number
    studentId?: IntFilter<"ClassEnrollment"> | number
    classId?: IntFilter<"ClassEnrollment"> | number
    enrollmentDate?: DateTimeFilter<"ClassEnrollment"> | Date | string
    status?: StringNullableFilter<"ClassEnrollment"> | string | null
    grade?: StringNullableFilter<"ClassEnrollment"> | string | null
    createdAt?: DateTimeFilter<"ClassEnrollment"> | Date | string
  }

  export type AttendanceRecordUpsertWithWhereUniqueWithoutStudentInput = {
    where: AttendanceRecordWhereUniqueInput
    update: XOR<AttendanceRecordUpdateWithoutStudentInput, AttendanceRecordUncheckedUpdateWithoutStudentInput>
    create: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput>
  }

  export type AttendanceRecordUpdateWithWhereUniqueWithoutStudentInput = {
    where: AttendanceRecordWhereUniqueInput
    data: XOR<AttendanceRecordUpdateWithoutStudentInput, AttendanceRecordUncheckedUpdateWithoutStudentInput>
  }

  export type AttendanceRecordUpdateManyWithWhereWithoutStudentInput = {
    where: AttendanceRecordScalarWhereInput
    data: XOR<AttendanceRecordUpdateManyMutationInput, AttendanceRecordUncheckedUpdateManyWithoutStudentInput>
  }

  export type AbsenceJustificationUpsertWithWhereUniqueWithoutStudentInput = {
    where: AbsenceJustificationWhereUniqueInput
    update: XOR<AbsenceJustificationUpdateWithoutStudentInput, AbsenceJustificationUncheckedUpdateWithoutStudentInput>
    create: XOR<AbsenceJustificationCreateWithoutStudentInput, AbsenceJustificationUncheckedCreateWithoutStudentInput>
  }

  export type AbsenceJustificationUpdateWithWhereUniqueWithoutStudentInput = {
    where: AbsenceJustificationWhereUniqueInput
    data: XOR<AbsenceJustificationUpdateWithoutStudentInput, AbsenceJustificationUncheckedUpdateWithoutStudentInput>
  }

  export type AbsenceJustificationUpdateManyWithWhereWithoutStudentInput = {
    where: AbsenceJustificationScalarWhereInput
    data: XOR<AbsenceJustificationUpdateManyMutationInput, AbsenceJustificationUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentRiskTrackingUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentRiskTrackingWhereUniqueInput
    update: XOR<StudentRiskTrackingUpdateWithoutStudentInput, StudentRiskTrackingUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentRiskTrackingCreateWithoutStudentInput, StudentRiskTrackingUncheckedCreateWithoutStudentInput>
  }

  export type StudentRiskTrackingUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentRiskTrackingWhereUniqueInput
    data: XOR<StudentRiskTrackingUpdateWithoutStudentInput, StudentRiskTrackingUncheckedUpdateWithoutStudentInput>
  }

  export type StudentRiskTrackingUpdateManyWithWhereWithoutStudentInput = {
    where: StudentRiskTrackingScalarWhereInput
    data: XOR<StudentRiskTrackingUpdateManyMutationInput, StudentRiskTrackingUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentRiskTrackingScalarWhereInput = {
    AND?: StudentRiskTrackingScalarWhereInput | StudentRiskTrackingScalarWhereInput[]
    OR?: StudentRiskTrackingScalarWhereInput[]
    NOT?: StudentRiskTrackingScalarWhereInput | StudentRiskTrackingScalarWhereInput[]
    id?: IntFilter<"StudentRiskTracking"> | number
    studentId?: IntFilter<"StudentRiskTracking"> | number
    riskLevel?: EnumRiskLevelFilter<"StudentRiskTracking"> | $Enums.RiskLevel
    attendanceRate?: DecimalFilter<"StudentRiskTracking"> | Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: IntFilter<"StudentRiskTracking"> | number
    totalAbsences?: IntFilter<"StudentRiskTracking"> | number
    lastAttendanceDate?: DateTimeNullableFilter<"StudentRiskTracking"> | Date | string | null
    parentEmail?: StringNullableFilter<"StudentRiskTracking"> | string | null
    parentPhone?: StringNullableFilter<"StudentRiskTracking"> | string | null
    notes?: StringNullableFilter<"StudentRiskTracking"> | string | null
    createdAt?: DateTimeFilter<"StudentRiskTracking"> | Date | string
    updatedAt?: DateTimeFilter<"StudentRiskTracking"> | Date | string
  }

  export type StudentAlertUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentAlertWhereUniqueInput
    update: XOR<StudentAlertUpdateWithoutStudentInput, StudentAlertUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentAlertCreateWithoutStudentInput, StudentAlertUncheckedCreateWithoutStudentInput>
  }

  export type StudentAlertUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentAlertWhereUniqueInput
    data: XOR<StudentAlertUpdateWithoutStudentInput, StudentAlertUncheckedUpdateWithoutStudentInput>
  }

  export type StudentAlertUpdateManyWithWhereWithoutStudentInput = {
    where: StudentAlertScalarWhereInput
    data: XOR<StudentAlertUpdateManyMutationInput, StudentAlertUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentPointUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentPointWhereUniqueInput
    update: XOR<StudentPointUpdateWithoutStudentInput, StudentPointUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentPointCreateWithoutStudentInput, StudentPointUncheckedCreateWithoutStudentInput>
  }

  export type StudentPointUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentPointWhereUniqueInput
    data: XOR<StudentPointUpdateWithoutStudentInput, StudentPointUncheckedUpdateWithoutStudentInput>
  }

  export type StudentPointUpdateManyWithWhereWithoutStudentInput = {
    where: StudentPointScalarWhereInput
    data: XOR<StudentPointUpdateManyMutationInput, StudentPointUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentPointScalarWhereInput = {
    AND?: StudentPointScalarWhereInput | StudentPointScalarWhereInput[]
    OR?: StudentPointScalarWhereInput[]
    NOT?: StudentPointScalarWhereInput | StudentPointScalarWhereInput[]
    id?: IntFilter<"StudentPoint"> | number
    studentId?: IntFilter<"StudentPoint"> | number
    classId?: IntNullableFilter<"StudentPoint"> | number | null
    points?: IntFilter<"StudentPoint"> | number
    pointType?: StringFilter<"StudentPoint"> | string
    description?: StringNullableFilter<"StudentPoint"> | string | null
    referenceId?: IntNullableFilter<"StudentPoint"> | number | null
    awardedBy?: IntNullableFilter<"StudentPoint"> | number | null
    createdAt?: DateTimeFilter<"StudentPoint"> | Date | string
  }

  export type StudentAchievementUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentAchievementWhereUniqueInput
    update: XOR<StudentAchievementUpdateWithoutStudentInput, StudentAchievementUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentAchievementCreateWithoutStudentInput, StudentAchievementUncheckedCreateWithoutStudentInput>
  }

  export type StudentAchievementUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentAchievementWhereUniqueInput
    data: XOR<StudentAchievementUpdateWithoutStudentInput, StudentAchievementUncheckedUpdateWithoutStudentInput>
  }

  export type StudentAchievementUpdateManyWithWhereWithoutStudentInput = {
    where: StudentAchievementScalarWhereInput
    data: XOR<StudentAchievementUpdateManyMutationInput, StudentAchievementUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentAchievementScalarWhereInput = {
    AND?: StudentAchievementScalarWhereInput | StudentAchievementScalarWhereInput[]
    OR?: StudentAchievementScalarWhereInput[]
    NOT?: StudentAchievementScalarWhereInput | StudentAchievementScalarWhereInput[]
    id?: IntFilter<"StudentAchievement"> | number
    studentId?: IntFilter<"StudentAchievement"> | number
    achievementId?: IntFilter<"StudentAchievement"> | number
    progress?: IntFilter<"StudentAchievement"> | number
    isEarned?: BoolFilter<"StudentAchievement"> | boolean
    earnedAt?: DateTimeNullableFilter<"StudentAchievement"> | Date | string | null
    createdAt?: DateTimeFilter<"StudentAchievement"> | Date | string
  }

  export type StudentStreakUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentStreakWhereUniqueInput
    update: XOR<StudentStreakUpdateWithoutStudentInput, StudentStreakUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentStreakCreateWithoutStudentInput, StudentStreakUncheckedCreateWithoutStudentInput>
  }

  export type StudentStreakUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentStreakWhereUniqueInput
    data: XOR<StudentStreakUpdateWithoutStudentInput, StudentStreakUncheckedUpdateWithoutStudentInput>
  }

  export type StudentStreakUpdateManyWithWhereWithoutStudentInput = {
    where: StudentStreakScalarWhereInput
    data: XOR<StudentStreakUpdateManyMutationInput, StudentStreakUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentStreakScalarWhereInput = {
    AND?: StudentStreakScalarWhereInput | StudentStreakScalarWhereInput[]
    OR?: StudentStreakScalarWhereInput[]
    NOT?: StudentStreakScalarWhereInput | StudentStreakScalarWhereInput[]
    id?: IntFilter<"StudentStreak"> | number
    studentId?: IntFilter<"StudentStreak"> | number
    classId?: IntFilter<"StudentStreak"> | number
    currentStreak?: IntFilter<"StudentStreak"> | number
    longestStreak?: IntFilter<"StudentStreak"> | number
    lastAttendanceDate?: DateTimeNullableFilter<"StudentStreak"> | Date | string | null
    streakStartDate?: DateTimeNullableFilter<"StudentStreak"> | Date | string | null
    createdAt?: DateTimeFilter<"StudentStreak"> | Date | string
    updatedAt?: DateTimeFilter<"StudentStreak"> | Date | string
  }

  export type LeaderboardRankingUpsertWithWhereUniqueWithoutStudentInput = {
    where: LeaderboardRankingWhereUniqueInput
    update: XOR<LeaderboardRankingUpdateWithoutStudentInput, LeaderboardRankingUncheckedUpdateWithoutStudentInput>
    create: XOR<LeaderboardRankingCreateWithoutStudentInput, LeaderboardRankingUncheckedCreateWithoutStudentInput>
  }

  export type LeaderboardRankingUpdateWithWhereUniqueWithoutStudentInput = {
    where: LeaderboardRankingWhereUniqueInput
    data: XOR<LeaderboardRankingUpdateWithoutStudentInput, LeaderboardRankingUncheckedUpdateWithoutStudentInput>
  }

  export type LeaderboardRankingUpdateManyWithWhereWithoutStudentInput = {
    where: LeaderboardRankingScalarWhereInput
    data: XOR<LeaderboardRankingUpdateManyMutationInput, LeaderboardRankingUncheckedUpdateManyWithoutStudentInput>
  }

  export type LeaderboardRankingScalarWhereInput = {
    AND?: LeaderboardRankingScalarWhereInput | LeaderboardRankingScalarWhereInput[]
    OR?: LeaderboardRankingScalarWhereInput[]
    NOT?: LeaderboardRankingScalarWhereInput | LeaderboardRankingScalarWhereInput[]
    id?: IntFilter<"LeaderboardRanking"> | number
    studentId?: IntFilter<"LeaderboardRanking"> | number
    classId?: IntNullableFilter<"LeaderboardRanking"> | number | null
    departmentId?: IntNullableFilter<"LeaderboardRanking"> | number | null
    period?: StringFilter<"LeaderboardRanking"> | string
    scope?: StringFilter<"LeaderboardRanking"> | string
    rankPosition?: IntFilter<"LeaderboardRanking"> | number
    totalPoints?: IntFilter<"LeaderboardRanking"> | number
    attendanceRate?: DecimalNullableFilter<"LeaderboardRanking"> | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFilter<"LeaderboardRanking"> | number
    achievementsCount?: IntFilter<"LeaderboardRanking"> | number
    periodStart?: DateTimeFilter<"LeaderboardRanking"> | Date | string
    periodEnd?: DateTimeFilter<"LeaderboardRanking"> | Date | string
    createdAt?: DateTimeFilter<"LeaderboardRanking"> | Date | string
  }

  export type StaffCreateWithoutClassesInput = {
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffUncheckedCreateWithoutClassesInput = {
    id?: number
    userId: number
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffCreateOrConnectWithoutClassesInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutClassesInput, StaffUncheckedCreateWithoutClassesInput>
  }

  export type ClassEnrollmentCreateWithoutClassInput = {
    enrollmentDate?: Date | string
    status?: string | null
    grade?: string | null
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutClassEnrollmentsInput
  }

  export type ClassEnrollmentUncheckedCreateWithoutClassInput = {
    id?: number
    studentId: number
    enrollmentDate?: Date | string
    status?: string | null
    grade?: string | null
    createdAt?: Date | string
  }

  export type ClassEnrollmentCreateOrConnectWithoutClassInput = {
    where: ClassEnrollmentWhereUniqueInput
    create: XOR<ClassEnrollmentCreateWithoutClassInput, ClassEnrollmentUncheckedCreateWithoutClassInput>
  }

  export type ClassEnrollmentCreateManyClassInputEnvelope = {
    data: ClassEnrollmentCreateManyClassInput | ClassEnrollmentCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceRecordCreateWithoutClassInput = {
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAttendanceRecordsInput
    recordedByStaff?: StaffCreateNestedOneWithoutAttendanceRecordsInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutAttendanceRecordInput
  }

  export type AttendanceRecordUncheckedCreateWithoutClassInput = {
    id?: number
    studentId: number
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recordedBy?: number | null
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutAttendanceRecordInput
  }

  export type AttendanceRecordCreateOrConnectWithoutClassInput = {
    where: AttendanceRecordWhereUniqueInput
    create: XOR<AttendanceRecordCreateWithoutClassInput, AttendanceRecordUncheckedCreateWithoutClassInput>
  }

  export type AttendanceRecordCreateManyClassInputEnvelope = {
    data: AttendanceRecordCreateManyClassInput | AttendanceRecordCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceSessionCreateWithoutClassInput = {
    sessionId: string
    sessionDate: Date | string
    sessionTime: Date | string
    sessionType?: $Enums.SessionType
    location?: string | null
    plannedTopic?: string | null
    targetLearning?: string | null
    targetLevel?: string | null
    planningStatus?: $Enums.PlanningStatus
    notes?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: StaffCreateNestedOneWithoutAttendanceSessionsInput
    qrSessions?: QRSessionCreateNestedManyWithoutAttendanceSessionInput
  }

  export type AttendanceSessionUncheckedCreateWithoutClassInput = {
    id?: number
    sessionId: string
    createdBy: number
    sessionDate: Date | string
    sessionTime: Date | string
    sessionType?: $Enums.SessionType
    location?: string | null
    plannedTopic?: string | null
    targetLearning?: string | null
    targetLevel?: string | null
    planningStatus?: $Enums.PlanningStatus
    notes?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrSessions?: QRSessionUncheckedCreateNestedManyWithoutAttendanceSessionInput
  }

  export type AttendanceSessionCreateOrConnectWithoutClassInput = {
    where: AttendanceSessionWhereUniqueInput
    create: XOR<AttendanceSessionCreateWithoutClassInput, AttendanceSessionUncheckedCreateWithoutClassInput>
  }

  export type AttendanceSessionCreateManyClassInputEnvelope = {
    data: AttendanceSessionCreateManyClassInput | AttendanceSessionCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type AbsenceJustificationCreateWithoutClassInput = {
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAbsenceJustificationsInput
    attendanceRecord?: AttendanceRecordCreateNestedOneWithoutAbsenceJustificationsInput
    reviewedByStaff?: StaffCreateNestedOneWithoutAbsenceJustificationsInput
  }

  export type AbsenceJustificationUncheckedCreateWithoutClassInput = {
    id?: number
    studentId: number
    attendanceRecordId?: number | null
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceJustificationCreateOrConnectWithoutClassInput = {
    where: AbsenceJustificationWhereUniqueInput
    create: XOR<AbsenceJustificationCreateWithoutClassInput, AbsenceJustificationUncheckedCreateWithoutClassInput>
  }

  export type AbsenceJustificationCreateManyClassInputEnvelope = {
    data: AbsenceJustificationCreateManyClassInput | AbsenceJustificationCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type StudentPointCreateWithoutClassInput = {
    points: number
    pointType: string
    description?: string | null
    referenceId?: number | null
    awardedBy?: number | null
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutStudentPointsInput
  }

  export type StudentPointUncheckedCreateWithoutClassInput = {
    id?: number
    studentId: number
    points: number
    pointType: string
    description?: string | null
    referenceId?: number | null
    awardedBy?: number | null
    createdAt?: Date | string
  }

  export type StudentPointCreateOrConnectWithoutClassInput = {
    where: StudentPointWhereUniqueInput
    create: XOR<StudentPointCreateWithoutClassInput, StudentPointUncheckedCreateWithoutClassInput>
  }

  export type StudentPointCreateManyClassInputEnvelope = {
    data: StudentPointCreateManyClassInput | StudentPointCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type StudentStreakCreateWithoutClassInput = {
    currentStreak?: number
    longestStreak?: number
    lastAttendanceDate?: Date | string | null
    streakStartDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutStudentStreaksInput
  }

  export type StudentStreakUncheckedCreateWithoutClassInput = {
    id?: number
    studentId: number
    currentStreak?: number
    longestStreak?: number
    lastAttendanceDate?: Date | string | null
    streakStartDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentStreakCreateOrConnectWithoutClassInput = {
    where: StudentStreakWhereUniqueInput
    create: XOR<StudentStreakCreateWithoutClassInput, StudentStreakUncheckedCreateWithoutClassInput>
  }

  export type StudentStreakCreateManyClassInputEnvelope = {
    data: StudentStreakCreateManyClassInput | StudentStreakCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type LeaderboardRankingCreateWithoutClassInput = {
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutLeaderboardRankingsInput
    department?: DepartmentCreateNestedOneWithoutLeaderboardRankingsInput
  }

  export type LeaderboardRankingUncheckedCreateWithoutClassInput = {
    id?: number
    studentId: number
    departmentId?: number | null
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type LeaderboardRankingCreateOrConnectWithoutClassInput = {
    where: LeaderboardRankingWhereUniqueInput
    create: XOR<LeaderboardRankingCreateWithoutClassInput, LeaderboardRankingUncheckedCreateWithoutClassInput>
  }

  export type LeaderboardRankingCreateManyClassInputEnvelope = {
    data: LeaderboardRankingCreateManyClassInput | LeaderboardRankingCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type ClassLocationCreateWithoutClassInput = {
    name: string
    latitude: number
    longitude: number
    radius?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassLocationUncheckedCreateWithoutClassInput = {
    id?: number
    name: string
    latitude: number
    longitude: number
    radius?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassLocationCreateOrConnectWithoutClassInput = {
    where: ClassLocationWhereUniqueInput
    create: XOR<ClassLocationCreateWithoutClassInput, ClassLocationUncheckedCreateWithoutClassInput>
  }

  export type ClassLocationCreateManyClassInputEnvelope = {
    data: ClassLocationCreateManyClassInput | ClassLocationCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type StaffUpsertWithoutClassesInput = {
    update: XOR<StaffUpdateWithoutClassesInput, StaffUncheckedUpdateWithoutClassesInput>
    create: XOR<StaffCreateWithoutClassesInput, StaffUncheckedCreateWithoutClassesInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutClassesInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutClassesInput, StaffUncheckedUpdateWithoutClassesInput>
  }

  export type StaffUpdateWithoutClassesInput = {
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutSentByStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutSentByStaffNestedInput
  }

  export type ClassEnrollmentUpsertWithWhereUniqueWithoutClassInput = {
    where: ClassEnrollmentWhereUniqueInput
    update: XOR<ClassEnrollmentUpdateWithoutClassInput, ClassEnrollmentUncheckedUpdateWithoutClassInput>
    create: XOR<ClassEnrollmentCreateWithoutClassInput, ClassEnrollmentUncheckedCreateWithoutClassInput>
  }

  export type ClassEnrollmentUpdateWithWhereUniqueWithoutClassInput = {
    where: ClassEnrollmentWhereUniqueInput
    data: XOR<ClassEnrollmentUpdateWithoutClassInput, ClassEnrollmentUncheckedUpdateWithoutClassInput>
  }

  export type ClassEnrollmentUpdateManyWithWhereWithoutClassInput = {
    where: ClassEnrollmentScalarWhereInput
    data: XOR<ClassEnrollmentUpdateManyMutationInput, ClassEnrollmentUncheckedUpdateManyWithoutClassInput>
  }

  export type AttendanceRecordUpsertWithWhereUniqueWithoutClassInput = {
    where: AttendanceRecordWhereUniqueInput
    update: XOR<AttendanceRecordUpdateWithoutClassInput, AttendanceRecordUncheckedUpdateWithoutClassInput>
    create: XOR<AttendanceRecordCreateWithoutClassInput, AttendanceRecordUncheckedCreateWithoutClassInput>
  }

  export type AttendanceRecordUpdateWithWhereUniqueWithoutClassInput = {
    where: AttendanceRecordWhereUniqueInput
    data: XOR<AttendanceRecordUpdateWithoutClassInput, AttendanceRecordUncheckedUpdateWithoutClassInput>
  }

  export type AttendanceRecordUpdateManyWithWhereWithoutClassInput = {
    where: AttendanceRecordScalarWhereInput
    data: XOR<AttendanceRecordUpdateManyMutationInput, AttendanceRecordUncheckedUpdateManyWithoutClassInput>
  }

  export type AttendanceSessionUpsertWithWhereUniqueWithoutClassInput = {
    where: AttendanceSessionWhereUniqueInput
    update: XOR<AttendanceSessionUpdateWithoutClassInput, AttendanceSessionUncheckedUpdateWithoutClassInput>
    create: XOR<AttendanceSessionCreateWithoutClassInput, AttendanceSessionUncheckedCreateWithoutClassInput>
  }

  export type AttendanceSessionUpdateWithWhereUniqueWithoutClassInput = {
    where: AttendanceSessionWhereUniqueInput
    data: XOR<AttendanceSessionUpdateWithoutClassInput, AttendanceSessionUncheckedUpdateWithoutClassInput>
  }

  export type AttendanceSessionUpdateManyWithWhereWithoutClassInput = {
    where: AttendanceSessionScalarWhereInput
    data: XOR<AttendanceSessionUpdateManyMutationInput, AttendanceSessionUncheckedUpdateManyWithoutClassInput>
  }

  export type AbsenceJustificationUpsertWithWhereUniqueWithoutClassInput = {
    where: AbsenceJustificationWhereUniqueInput
    update: XOR<AbsenceJustificationUpdateWithoutClassInput, AbsenceJustificationUncheckedUpdateWithoutClassInput>
    create: XOR<AbsenceJustificationCreateWithoutClassInput, AbsenceJustificationUncheckedCreateWithoutClassInput>
  }

  export type AbsenceJustificationUpdateWithWhereUniqueWithoutClassInput = {
    where: AbsenceJustificationWhereUniqueInput
    data: XOR<AbsenceJustificationUpdateWithoutClassInput, AbsenceJustificationUncheckedUpdateWithoutClassInput>
  }

  export type AbsenceJustificationUpdateManyWithWhereWithoutClassInput = {
    where: AbsenceJustificationScalarWhereInput
    data: XOR<AbsenceJustificationUpdateManyMutationInput, AbsenceJustificationUncheckedUpdateManyWithoutClassInput>
  }

  export type StudentPointUpsertWithWhereUniqueWithoutClassInput = {
    where: StudentPointWhereUniqueInput
    update: XOR<StudentPointUpdateWithoutClassInput, StudentPointUncheckedUpdateWithoutClassInput>
    create: XOR<StudentPointCreateWithoutClassInput, StudentPointUncheckedCreateWithoutClassInput>
  }

  export type StudentPointUpdateWithWhereUniqueWithoutClassInput = {
    where: StudentPointWhereUniqueInput
    data: XOR<StudentPointUpdateWithoutClassInput, StudentPointUncheckedUpdateWithoutClassInput>
  }

  export type StudentPointUpdateManyWithWhereWithoutClassInput = {
    where: StudentPointScalarWhereInput
    data: XOR<StudentPointUpdateManyMutationInput, StudentPointUncheckedUpdateManyWithoutClassInput>
  }

  export type StudentStreakUpsertWithWhereUniqueWithoutClassInput = {
    where: StudentStreakWhereUniqueInput
    update: XOR<StudentStreakUpdateWithoutClassInput, StudentStreakUncheckedUpdateWithoutClassInput>
    create: XOR<StudentStreakCreateWithoutClassInput, StudentStreakUncheckedCreateWithoutClassInput>
  }

  export type StudentStreakUpdateWithWhereUniqueWithoutClassInput = {
    where: StudentStreakWhereUniqueInput
    data: XOR<StudentStreakUpdateWithoutClassInput, StudentStreakUncheckedUpdateWithoutClassInput>
  }

  export type StudentStreakUpdateManyWithWhereWithoutClassInput = {
    where: StudentStreakScalarWhereInput
    data: XOR<StudentStreakUpdateManyMutationInput, StudentStreakUncheckedUpdateManyWithoutClassInput>
  }

  export type LeaderboardRankingUpsertWithWhereUniqueWithoutClassInput = {
    where: LeaderboardRankingWhereUniqueInput
    update: XOR<LeaderboardRankingUpdateWithoutClassInput, LeaderboardRankingUncheckedUpdateWithoutClassInput>
    create: XOR<LeaderboardRankingCreateWithoutClassInput, LeaderboardRankingUncheckedCreateWithoutClassInput>
  }

  export type LeaderboardRankingUpdateWithWhereUniqueWithoutClassInput = {
    where: LeaderboardRankingWhereUniqueInput
    data: XOR<LeaderboardRankingUpdateWithoutClassInput, LeaderboardRankingUncheckedUpdateWithoutClassInput>
  }

  export type LeaderboardRankingUpdateManyWithWhereWithoutClassInput = {
    where: LeaderboardRankingScalarWhereInput
    data: XOR<LeaderboardRankingUpdateManyMutationInput, LeaderboardRankingUncheckedUpdateManyWithoutClassInput>
  }

  export type ClassLocationUpsertWithWhereUniqueWithoutClassInput = {
    where: ClassLocationWhereUniqueInput
    update: XOR<ClassLocationUpdateWithoutClassInput, ClassLocationUncheckedUpdateWithoutClassInput>
    create: XOR<ClassLocationCreateWithoutClassInput, ClassLocationUncheckedCreateWithoutClassInput>
  }

  export type ClassLocationUpdateWithWhereUniqueWithoutClassInput = {
    where: ClassLocationWhereUniqueInput
    data: XOR<ClassLocationUpdateWithoutClassInput, ClassLocationUncheckedUpdateWithoutClassInput>
  }

  export type ClassLocationUpdateManyWithWhereWithoutClassInput = {
    where: ClassLocationScalarWhereInput
    data: XOR<ClassLocationUpdateManyMutationInput, ClassLocationUncheckedUpdateManyWithoutClassInput>
  }

  export type ClassLocationScalarWhereInput = {
    AND?: ClassLocationScalarWhereInput | ClassLocationScalarWhereInput[]
    OR?: ClassLocationScalarWhereInput[]
    NOT?: ClassLocationScalarWhereInput | ClassLocationScalarWhereInput[]
    id?: IntFilter<"ClassLocation"> | number
    classId?: IntFilter<"ClassLocation"> | number
    name?: StringFilter<"ClassLocation"> | string
    latitude?: FloatFilter<"ClassLocation"> | number
    longitude?: FloatFilter<"ClassLocation"> | number
    radius?: IntFilter<"ClassLocation"> | number
    isActive?: BoolFilter<"ClassLocation"> | boolean
    createdAt?: DateTimeFilter<"ClassLocation"> | Date | string
    updatedAt?: DateTimeFilter<"ClassLocation"> | Date | string
  }

  export type StudentCreateWithoutClassEnrollmentsInput = {
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutClassEnrollmentsInput = {
    id?: number
    userId: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingUncheckedCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementUncheckedCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutClassEnrollmentsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutClassEnrollmentsInput, StudentUncheckedCreateWithoutClassEnrollmentsInput>
  }

  export type ClassCreateWithoutClassEnrollmentsInput = {
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    faculty?: StaffCreateNestedOneWithoutClassesInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutClassEnrollmentsInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    facultyId?: number | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutClassEnrollmentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutClassEnrollmentsInput, ClassUncheckedCreateWithoutClassEnrollmentsInput>
  }

  export type StudentUpsertWithoutClassEnrollmentsInput = {
    update: XOR<StudentUpdateWithoutClassEnrollmentsInput, StudentUncheckedUpdateWithoutClassEnrollmentsInput>
    create: XOR<StudentCreateWithoutClassEnrollmentsInput, StudentUncheckedCreateWithoutClassEnrollmentsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutClassEnrollmentsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutClassEnrollmentsInput, StudentUncheckedUpdateWithoutClassEnrollmentsInput>
  }

  export type StudentUpdateWithoutClassEnrollmentsInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutClassEnrollmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUncheckedUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUncheckedUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassUpsertWithoutClassEnrollmentsInput = {
    update: XOR<ClassUpdateWithoutClassEnrollmentsInput, ClassUncheckedUpdateWithoutClassEnrollmentsInput>
    create: XOR<ClassCreateWithoutClassEnrollmentsInput, ClassUncheckedCreateWithoutClassEnrollmentsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutClassEnrollmentsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutClassEnrollmentsInput, ClassUncheckedUpdateWithoutClassEnrollmentsInput>
  }

  export type ClassUpdateWithoutClassEnrollmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    faculty?: StaffUpdateOneWithoutClassesNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutClassEnrollmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facultyId?: NullableIntFieldUpdateOperationsInput | number | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUncheckedUpdateManyWithoutClassNestedInput
  }

  export type StudentCreateWithoutAttendanceRecordsInput = {
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAttendanceRecordsInput = {
    id?: number
    userId: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingUncheckedCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementUncheckedCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAttendanceRecordsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAttendanceRecordsInput, StudentUncheckedCreateWithoutAttendanceRecordsInput>
  }

  export type ClassCreateWithoutAttendanceRecordsInput = {
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    faculty?: StaffCreateNestedOneWithoutClassesInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutAttendanceRecordsInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    facultyId?: number | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutAttendanceRecordsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAttendanceRecordsInput, ClassUncheckedCreateWithoutAttendanceRecordsInput>
  }

  export type StaffCreateWithoutAttendanceRecordsInput = {
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    classes?: ClassCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutCreatorInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffUncheckedCreateWithoutAttendanceRecordsInput = {
    id?: number
    userId: number
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classes?: ClassUncheckedCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutCreatorInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffCreateOrConnectWithoutAttendanceRecordsInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutAttendanceRecordsInput, StaffUncheckedCreateWithoutAttendanceRecordsInput>
  }

  export type AbsenceJustificationCreateWithoutAttendanceRecordInput = {
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAbsenceJustificationsInput
    class: ClassCreateNestedOneWithoutAbsenceJustificationsInput
    reviewedByStaff?: StaffCreateNestedOneWithoutAbsenceJustificationsInput
  }

  export type AbsenceJustificationUncheckedCreateWithoutAttendanceRecordInput = {
    id?: number
    studentId: number
    classId: number
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceJustificationCreateOrConnectWithoutAttendanceRecordInput = {
    where: AbsenceJustificationWhereUniqueInput
    create: XOR<AbsenceJustificationCreateWithoutAttendanceRecordInput, AbsenceJustificationUncheckedCreateWithoutAttendanceRecordInput>
  }

  export type AbsenceJustificationCreateManyAttendanceRecordInputEnvelope = {
    data: AbsenceJustificationCreateManyAttendanceRecordInput | AbsenceJustificationCreateManyAttendanceRecordInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithoutAttendanceRecordsInput = {
    update: XOR<StudentUpdateWithoutAttendanceRecordsInput, StudentUncheckedUpdateWithoutAttendanceRecordsInput>
    create: XOR<StudentCreateWithoutAttendanceRecordsInput, StudentUncheckedCreateWithoutAttendanceRecordsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAttendanceRecordsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAttendanceRecordsInput, StudentUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type StudentUpdateWithoutAttendanceRecordsInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAttendanceRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUncheckedUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUncheckedUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassUpsertWithoutAttendanceRecordsInput = {
    update: XOR<ClassUpdateWithoutAttendanceRecordsInput, ClassUncheckedUpdateWithoutAttendanceRecordsInput>
    create: XOR<ClassCreateWithoutAttendanceRecordsInput, ClassUncheckedCreateWithoutAttendanceRecordsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAttendanceRecordsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAttendanceRecordsInput, ClassUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type ClassUpdateWithoutAttendanceRecordsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    faculty?: StaffUpdateOneWithoutClassesNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutAttendanceRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facultyId?: NullableIntFieldUpdateOperationsInput | number | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUncheckedUpdateManyWithoutClassNestedInput
  }

  export type StaffUpsertWithoutAttendanceRecordsInput = {
    update: XOR<StaffUpdateWithoutAttendanceRecordsInput, StaffUncheckedUpdateWithoutAttendanceRecordsInput>
    create: XOR<StaffCreateWithoutAttendanceRecordsInput, StaffUncheckedCreateWithoutAttendanceRecordsInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutAttendanceRecordsInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutAttendanceRecordsInput, StaffUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type StaffUpdateWithoutAttendanceRecordsInput = {
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    classes?: ClassUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutCreatorNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutSentByStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutAttendanceRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: ClassUncheckedUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutCreatorNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutSentByStaffNestedInput
  }

  export type AbsenceJustificationUpsertWithWhereUniqueWithoutAttendanceRecordInput = {
    where: AbsenceJustificationWhereUniqueInput
    update: XOR<AbsenceJustificationUpdateWithoutAttendanceRecordInput, AbsenceJustificationUncheckedUpdateWithoutAttendanceRecordInput>
    create: XOR<AbsenceJustificationCreateWithoutAttendanceRecordInput, AbsenceJustificationUncheckedCreateWithoutAttendanceRecordInput>
  }

  export type AbsenceJustificationUpdateWithWhereUniqueWithoutAttendanceRecordInput = {
    where: AbsenceJustificationWhereUniqueInput
    data: XOR<AbsenceJustificationUpdateWithoutAttendanceRecordInput, AbsenceJustificationUncheckedUpdateWithoutAttendanceRecordInput>
  }

  export type AbsenceJustificationUpdateManyWithWhereWithoutAttendanceRecordInput = {
    where: AbsenceJustificationScalarWhereInput
    data: XOR<AbsenceJustificationUpdateManyMutationInput, AbsenceJustificationUncheckedUpdateManyWithoutAttendanceRecordInput>
  }

  export type ClassCreateWithoutAttendanceSessionsInput = {
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    faculty?: StaffCreateNestedOneWithoutClassesInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutAttendanceSessionsInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    facultyId?: number | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutAttendanceSessionsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAttendanceSessionsInput, ClassUncheckedCreateWithoutAttendanceSessionsInput>
  }

  export type StaffCreateWithoutAttendanceSessionsInput = {
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    classes?: ClassCreateNestedManyWithoutFacultyInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffUncheckedCreateWithoutAttendanceSessionsInput = {
    id?: number
    userId: number
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classes?: ClassUncheckedCreateNestedManyWithoutFacultyInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffCreateOrConnectWithoutAttendanceSessionsInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutAttendanceSessionsInput, StaffUncheckedCreateWithoutAttendanceSessionsInput>
  }

  export type QRSessionCreateWithoutAttendanceSessionInput = {
    sessionId: string
    qrData: string
    scanCount?: number
    maxScans?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
  }

  export type QRSessionUncheckedCreateWithoutAttendanceSessionInput = {
    id?: number
    sessionId: string
    qrData: string
    scanCount?: number
    maxScans?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
  }

  export type QRSessionCreateOrConnectWithoutAttendanceSessionInput = {
    where: QRSessionWhereUniqueInput
    create: XOR<QRSessionCreateWithoutAttendanceSessionInput, QRSessionUncheckedCreateWithoutAttendanceSessionInput>
  }

  export type QRSessionCreateManyAttendanceSessionInputEnvelope = {
    data: QRSessionCreateManyAttendanceSessionInput | QRSessionCreateManyAttendanceSessionInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutAttendanceSessionsInput = {
    update: XOR<ClassUpdateWithoutAttendanceSessionsInput, ClassUncheckedUpdateWithoutAttendanceSessionsInput>
    create: XOR<ClassCreateWithoutAttendanceSessionsInput, ClassUncheckedCreateWithoutAttendanceSessionsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAttendanceSessionsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAttendanceSessionsInput, ClassUncheckedUpdateWithoutAttendanceSessionsInput>
  }

  export type ClassUpdateWithoutAttendanceSessionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    faculty?: StaffUpdateOneWithoutClassesNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutAttendanceSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facultyId?: NullableIntFieldUpdateOperationsInput | number | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUncheckedUpdateManyWithoutClassNestedInput
  }

  export type StaffUpsertWithoutAttendanceSessionsInput = {
    update: XOR<StaffUpdateWithoutAttendanceSessionsInput, StaffUncheckedUpdateWithoutAttendanceSessionsInput>
    create: XOR<StaffCreateWithoutAttendanceSessionsInput, StaffUncheckedCreateWithoutAttendanceSessionsInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutAttendanceSessionsInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutAttendanceSessionsInput, StaffUncheckedUpdateWithoutAttendanceSessionsInput>
  }

  export type StaffUpdateWithoutAttendanceSessionsInput = {
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    classes?: ClassUpdateManyWithoutFacultyNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutSentByStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutAttendanceSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: ClassUncheckedUpdateManyWithoutFacultyNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutSentByStaffNestedInput
  }

  export type QRSessionUpsertWithWhereUniqueWithoutAttendanceSessionInput = {
    where: QRSessionWhereUniqueInput
    update: XOR<QRSessionUpdateWithoutAttendanceSessionInput, QRSessionUncheckedUpdateWithoutAttendanceSessionInput>
    create: XOR<QRSessionCreateWithoutAttendanceSessionInput, QRSessionUncheckedCreateWithoutAttendanceSessionInput>
  }

  export type QRSessionUpdateWithWhereUniqueWithoutAttendanceSessionInput = {
    where: QRSessionWhereUniqueInput
    data: XOR<QRSessionUpdateWithoutAttendanceSessionInput, QRSessionUncheckedUpdateWithoutAttendanceSessionInput>
  }

  export type QRSessionUpdateManyWithWhereWithoutAttendanceSessionInput = {
    where: QRSessionScalarWhereInput
    data: XOR<QRSessionUpdateManyMutationInput, QRSessionUncheckedUpdateManyWithoutAttendanceSessionInput>
  }

  export type QRSessionScalarWhereInput = {
    AND?: QRSessionScalarWhereInput | QRSessionScalarWhereInput[]
    OR?: QRSessionScalarWhereInput[]
    NOT?: QRSessionScalarWhereInput | QRSessionScalarWhereInput[]
    id?: IntFilter<"QRSession"> | number
    sessionId?: StringFilter<"QRSession"> | string
    attendanceSessionId?: IntFilter<"QRSession"> | number
    qrData?: StringFilter<"QRSession"> | string
    scanCount?: IntFilter<"QRSession"> | number
    maxScans?: IntNullableFilter<"QRSession"> | number | null
    expiresAt?: DateTimeFilter<"QRSession"> | Date | string
    status?: StringNullableFilter<"QRSession"> | string | null
    createdAt?: DateTimeFilter<"QRSession"> | Date | string
  }

  export type AttendanceSessionCreateWithoutQrSessionsInput = {
    sessionId: string
    sessionDate: Date | string
    sessionTime: Date | string
    sessionType?: $Enums.SessionType
    location?: string | null
    plannedTopic?: string | null
    targetLearning?: string | null
    targetLevel?: string | null
    planningStatus?: $Enums.PlanningStatus
    notes?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutAttendanceSessionsInput
    creator: StaffCreateNestedOneWithoutAttendanceSessionsInput
  }

  export type AttendanceSessionUncheckedCreateWithoutQrSessionsInput = {
    id?: number
    sessionId: string
    classId: number
    createdBy: number
    sessionDate: Date | string
    sessionTime: Date | string
    sessionType?: $Enums.SessionType
    location?: string | null
    plannedTopic?: string | null
    targetLearning?: string | null
    targetLevel?: string | null
    planningStatus?: $Enums.PlanningStatus
    notes?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceSessionCreateOrConnectWithoutQrSessionsInput = {
    where: AttendanceSessionWhereUniqueInput
    create: XOR<AttendanceSessionCreateWithoutQrSessionsInput, AttendanceSessionUncheckedCreateWithoutQrSessionsInput>
  }

  export type AttendanceSessionUpsertWithoutQrSessionsInput = {
    update: XOR<AttendanceSessionUpdateWithoutQrSessionsInput, AttendanceSessionUncheckedUpdateWithoutQrSessionsInput>
    create: XOR<AttendanceSessionCreateWithoutQrSessionsInput, AttendanceSessionUncheckedCreateWithoutQrSessionsInput>
    where?: AttendanceSessionWhereInput
  }

  export type AttendanceSessionUpdateToOneWithWhereWithoutQrSessionsInput = {
    where?: AttendanceSessionWhereInput
    data: XOR<AttendanceSessionUpdateWithoutQrSessionsInput, AttendanceSessionUncheckedUpdateWithoutQrSessionsInput>
  }

  export type AttendanceSessionUpdateWithoutQrSessionsInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutAttendanceSessionsNestedInput
    creator?: StaffUpdateOneRequiredWithoutAttendanceSessionsNestedInput
  }

  export type AttendanceSessionUncheckedUpdateWithoutQrSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    createdBy?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateWithoutAbsenceJustificationsInput = {
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAbsenceJustificationsInput = {
    id?: number
    userId: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingUncheckedCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementUncheckedCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAbsenceJustificationsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAbsenceJustificationsInput, StudentUncheckedCreateWithoutAbsenceJustificationsInput>
  }

  export type ClassCreateWithoutAbsenceJustificationsInput = {
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    faculty?: StaffCreateNestedOneWithoutClassesInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutAbsenceJustificationsInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    facultyId?: number | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutAbsenceJustificationsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAbsenceJustificationsInput, ClassUncheckedCreateWithoutAbsenceJustificationsInput>
  }

  export type AttendanceRecordCreateWithoutAbsenceJustificationsInput = {
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAttendanceRecordsInput
    class: ClassCreateNestedOneWithoutAttendanceRecordsInput
    recordedByStaff?: StaffCreateNestedOneWithoutAttendanceRecordsInput
  }

  export type AttendanceRecordUncheckedCreateWithoutAbsenceJustificationsInput = {
    id?: number
    studentId: number
    classId: number
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recordedBy?: number | null
  }

  export type AttendanceRecordCreateOrConnectWithoutAbsenceJustificationsInput = {
    where: AttendanceRecordWhereUniqueInput
    create: XOR<AttendanceRecordCreateWithoutAbsenceJustificationsInput, AttendanceRecordUncheckedCreateWithoutAbsenceJustificationsInput>
  }

  export type StaffCreateWithoutAbsenceJustificationsInput = {
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    classes?: ClassCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutRecordedByStaffInput
    departments?: DepartmentCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffUncheckedCreateWithoutAbsenceJustificationsInput = {
    id?: number
    userId: number
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classes?: ClassUncheckedCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutRecordedByStaffInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutHeadInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffCreateOrConnectWithoutAbsenceJustificationsInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutAbsenceJustificationsInput, StaffUncheckedCreateWithoutAbsenceJustificationsInput>
  }

  export type StudentUpsertWithoutAbsenceJustificationsInput = {
    update: XOR<StudentUpdateWithoutAbsenceJustificationsInput, StudentUncheckedUpdateWithoutAbsenceJustificationsInput>
    create: XOR<StudentCreateWithoutAbsenceJustificationsInput, StudentUncheckedCreateWithoutAbsenceJustificationsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAbsenceJustificationsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAbsenceJustificationsInput, StudentUncheckedUpdateWithoutAbsenceJustificationsInput>
  }

  export type StudentUpdateWithoutAbsenceJustificationsInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAbsenceJustificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUncheckedUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUncheckedUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassUpsertWithoutAbsenceJustificationsInput = {
    update: XOR<ClassUpdateWithoutAbsenceJustificationsInput, ClassUncheckedUpdateWithoutAbsenceJustificationsInput>
    create: XOR<ClassCreateWithoutAbsenceJustificationsInput, ClassUncheckedCreateWithoutAbsenceJustificationsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAbsenceJustificationsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAbsenceJustificationsInput, ClassUncheckedUpdateWithoutAbsenceJustificationsInput>
  }

  export type ClassUpdateWithoutAbsenceJustificationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    faculty?: StaffUpdateOneWithoutClassesNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutAbsenceJustificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facultyId?: NullableIntFieldUpdateOperationsInput | number | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUncheckedUpdateManyWithoutClassNestedInput
  }

  export type AttendanceRecordUpsertWithoutAbsenceJustificationsInput = {
    update: XOR<AttendanceRecordUpdateWithoutAbsenceJustificationsInput, AttendanceRecordUncheckedUpdateWithoutAbsenceJustificationsInput>
    create: XOR<AttendanceRecordCreateWithoutAbsenceJustificationsInput, AttendanceRecordUncheckedCreateWithoutAbsenceJustificationsInput>
    where?: AttendanceRecordWhereInput
  }

  export type AttendanceRecordUpdateToOneWithWhereWithoutAbsenceJustificationsInput = {
    where?: AttendanceRecordWhereInput
    data: XOR<AttendanceRecordUpdateWithoutAbsenceJustificationsInput, AttendanceRecordUncheckedUpdateWithoutAbsenceJustificationsInput>
  }

  export type AttendanceRecordUpdateWithoutAbsenceJustificationsInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    class?: ClassUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    recordedByStaff?: StaffUpdateOneWithoutAttendanceRecordsNestedInput
  }

  export type AttendanceRecordUncheckedUpdateWithoutAbsenceJustificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StaffUpsertWithoutAbsenceJustificationsInput = {
    update: XOR<StaffUpdateWithoutAbsenceJustificationsInput, StaffUncheckedUpdateWithoutAbsenceJustificationsInput>
    create: XOR<StaffCreateWithoutAbsenceJustificationsInput, StaffUncheckedCreateWithoutAbsenceJustificationsInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutAbsenceJustificationsInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutAbsenceJustificationsInput, StaffUncheckedUpdateWithoutAbsenceJustificationsInput>
  }

  export type StaffUpdateWithoutAbsenceJustificationsInput = {
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    classes?: ClassUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutRecordedByStaffNestedInput
    departments?: DepartmentUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutSentByStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutAbsenceJustificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: ClassUncheckedUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutRecordedByStaffNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutHeadNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutSentByStaffNestedInput
  }

  export type StaffCreateWithoutDepartmentsInput = {
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    classes?: ClassCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutReviewedByStaffInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffUncheckedCreateWithoutDepartmentsInput = {
    id?: number
    userId: number
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classes?: ClassUncheckedCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutReviewedByStaffInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutSentByStaffInput
  }

  export type StaffCreateOrConnectWithoutDepartmentsInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutDepartmentsInput, StaffUncheckedCreateWithoutDepartmentsInput>
  }

  export type LeaderboardRankingCreateWithoutDepartmentInput = {
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutLeaderboardRankingsInput
    class?: ClassCreateNestedOneWithoutLeaderboardRankingsInput
  }

  export type LeaderboardRankingUncheckedCreateWithoutDepartmentInput = {
    id?: number
    studentId: number
    classId?: number | null
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type LeaderboardRankingCreateOrConnectWithoutDepartmentInput = {
    where: LeaderboardRankingWhereUniqueInput
    create: XOR<LeaderboardRankingCreateWithoutDepartmentInput, LeaderboardRankingUncheckedCreateWithoutDepartmentInput>
  }

  export type LeaderboardRankingCreateManyDepartmentInputEnvelope = {
    data: LeaderboardRankingCreateManyDepartmentInput | LeaderboardRankingCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type StaffUpsertWithoutDepartmentsInput = {
    update: XOR<StaffUpdateWithoutDepartmentsInput, StaffUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<StaffCreateWithoutDepartmentsInput, StaffUncheckedCreateWithoutDepartmentsInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutDepartmentsInput, StaffUncheckedUpdateWithoutDepartmentsInput>
  }

  export type StaffUpdateWithoutDepartmentsInput = {
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    classes?: ClassUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutReviewedByStaffNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutSentByStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutDepartmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: ClassUncheckedUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutReviewedByStaffNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutSentByStaffNestedInput
  }

  export type LeaderboardRankingUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: LeaderboardRankingWhereUniqueInput
    update: XOR<LeaderboardRankingUpdateWithoutDepartmentInput, LeaderboardRankingUncheckedUpdateWithoutDepartmentInput>
    create: XOR<LeaderboardRankingCreateWithoutDepartmentInput, LeaderboardRankingUncheckedCreateWithoutDepartmentInput>
  }

  export type LeaderboardRankingUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: LeaderboardRankingWhereUniqueInput
    data: XOR<LeaderboardRankingUpdateWithoutDepartmentInput, LeaderboardRankingUncheckedUpdateWithoutDepartmentInput>
  }

  export type LeaderboardRankingUpdateManyWithWhereWithoutDepartmentInput = {
    where: LeaderboardRankingScalarWhereInput
    data: XOR<LeaderboardRankingUpdateManyMutationInput, LeaderboardRankingUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    phone?: string | null
    avatarUrl?: string | null
    lastSeen?: Date | string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: AdminCreateNestedOneWithoutUserInput
    staff?: StaffCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    phone?: string | null
    avatarUrl?: string | null
    lastSeen?: Date | string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    staff?: StaffUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneWithoutUserNestedInput
    staff?: StaffUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    staff?: StaffUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type StudentCreateWithoutStudentRiskTrackingInput = {
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudentRiskTrackingInput = {
    id?: number
    userId: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementUncheckedCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudentRiskTrackingInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudentRiskTrackingInput, StudentUncheckedCreateWithoutStudentRiskTrackingInput>
  }

  export type StudentUpsertWithoutStudentRiskTrackingInput = {
    update: XOR<StudentUpdateWithoutStudentRiskTrackingInput, StudentUncheckedUpdateWithoutStudentRiskTrackingInput>
    create: XOR<StudentCreateWithoutStudentRiskTrackingInput, StudentUncheckedCreateWithoutStudentRiskTrackingInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutStudentRiskTrackingInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutStudentRiskTrackingInput, StudentUncheckedUpdateWithoutStudentRiskTrackingInput>
  }

  export type StudentUpdateWithoutStudentRiskTrackingInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudentRiskTrackingInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUncheckedUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateWithoutStudentAlertsInput = {
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudentAlertsInput = {
    id?: number
    userId: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingUncheckedCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementUncheckedCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudentAlertsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudentAlertsInput, StudentUncheckedCreateWithoutStudentAlertsInput>
  }

  export type StaffCreateWithoutStudentAlertsInput = {
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    classes?: ClassCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentCreateNestedManyWithoutHeadInput
  }

  export type StaffUncheckedCreateWithoutStudentAlertsInput = {
    id?: number
    userId: number
    employeeId: string
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    officeLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classes?: ClassUncheckedCreateNestedManyWithoutFacultyInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutCreatorInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutRecordedByStaffInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutReviewedByStaffInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutHeadInput
  }

  export type StaffCreateOrConnectWithoutStudentAlertsInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutStudentAlertsInput, StaffUncheckedCreateWithoutStudentAlertsInput>
  }

  export type StudentUpsertWithoutStudentAlertsInput = {
    update: XOR<StudentUpdateWithoutStudentAlertsInput, StudentUncheckedUpdateWithoutStudentAlertsInput>
    create: XOR<StudentCreateWithoutStudentAlertsInput, StudentUncheckedCreateWithoutStudentAlertsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutStudentAlertsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutStudentAlertsInput, StudentUncheckedUpdateWithoutStudentAlertsInput>
  }

  export type StudentUpdateWithoutStudentAlertsInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudentAlertsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUncheckedUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUncheckedUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StaffUpsertWithoutStudentAlertsInput = {
    update: XOR<StaffUpdateWithoutStudentAlertsInput, StaffUncheckedUpdateWithoutStudentAlertsInput>
    create: XOR<StaffCreateWithoutStudentAlertsInput, StaffUncheckedCreateWithoutStudentAlertsInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutStudentAlertsInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutStudentAlertsInput, StaffUncheckedUpdateWithoutStudentAlertsInput>
  }

  export type StaffUpdateWithoutStudentAlertsInput = {
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    classes?: ClassUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUpdateManyWithoutHeadNestedInput
  }

  export type StaffUncheckedUpdateWithoutStudentAlertsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: ClassUncheckedUpdateManyWithoutFacultyNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutCreatorNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutRecordedByStaffNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutReviewedByStaffNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutHeadNestedInput
  }

  export type StudentCreateWithoutStudentPointsInput = {
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudentPointsInput = {
    id?: number
    userId: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingUncheckedCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementUncheckedCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudentPointsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudentPointsInput, StudentUncheckedCreateWithoutStudentPointsInput>
  }

  export type ClassCreateWithoutStudentPointsInput = {
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    faculty?: StaffCreateNestedOneWithoutClassesInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutStudentPointsInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    facultyId?: number | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentPointsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentPointsInput, ClassUncheckedCreateWithoutStudentPointsInput>
  }

  export type StudentUpsertWithoutStudentPointsInput = {
    update: XOR<StudentUpdateWithoutStudentPointsInput, StudentUncheckedUpdateWithoutStudentPointsInput>
    create: XOR<StudentCreateWithoutStudentPointsInput, StudentUncheckedCreateWithoutStudentPointsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutStudentPointsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutStudentPointsInput, StudentUncheckedUpdateWithoutStudentPointsInput>
  }

  export type StudentUpdateWithoutStudentPointsInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudentPointsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUncheckedUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUncheckedUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassUpsertWithoutStudentPointsInput = {
    update: XOR<ClassUpdateWithoutStudentPointsInput, ClassUncheckedUpdateWithoutStudentPointsInput>
    create: XOR<ClassCreateWithoutStudentPointsInput, ClassUncheckedCreateWithoutStudentPointsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutStudentPointsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutStudentPointsInput, ClassUncheckedUpdateWithoutStudentPointsInput>
  }

  export type ClassUpdateWithoutStudentPointsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    faculty?: StaffUpdateOneWithoutClassesNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentPointsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facultyId?: NullableIntFieldUpdateOperationsInput | number | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUncheckedUpdateManyWithoutClassNestedInput
  }

  export type StudentAchievementCreateWithoutAchievementInput = {
    progress?: number
    isEarned?: boolean
    earnedAt?: Date | string | null
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutStudentAchievementsInput
  }

  export type StudentAchievementUncheckedCreateWithoutAchievementInput = {
    id?: number
    studentId: number
    progress?: number
    isEarned?: boolean
    earnedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type StudentAchievementCreateOrConnectWithoutAchievementInput = {
    where: StudentAchievementWhereUniqueInput
    create: XOR<StudentAchievementCreateWithoutAchievementInput, StudentAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type StudentAchievementCreateManyAchievementInputEnvelope = {
    data: StudentAchievementCreateManyAchievementInput | StudentAchievementCreateManyAchievementInput[]
    skipDuplicates?: boolean
  }

  export type StudentAchievementUpsertWithWhereUniqueWithoutAchievementInput = {
    where: StudentAchievementWhereUniqueInput
    update: XOR<StudentAchievementUpdateWithoutAchievementInput, StudentAchievementUncheckedUpdateWithoutAchievementInput>
    create: XOR<StudentAchievementCreateWithoutAchievementInput, StudentAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type StudentAchievementUpdateWithWhereUniqueWithoutAchievementInput = {
    where: StudentAchievementWhereUniqueInput
    data: XOR<StudentAchievementUpdateWithoutAchievementInput, StudentAchievementUncheckedUpdateWithoutAchievementInput>
  }

  export type StudentAchievementUpdateManyWithWhereWithoutAchievementInput = {
    where: StudentAchievementScalarWhereInput
    data: XOR<StudentAchievementUpdateManyMutationInput, StudentAchievementUncheckedUpdateManyWithoutAchievementInput>
  }

  export type StudentCreateWithoutStudentAchievementsInput = {
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudentAchievementsInput = {
    id?: number
    userId: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingUncheckedCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudentAchievementsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudentAchievementsInput, StudentUncheckedCreateWithoutStudentAchievementsInput>
  }

  export type AchievementCreateWithoutStudentAchievementsInput = {
    name: string
    description?: string | null
    category: string
    icon?: string | null
    pointsReward?: number
    requirementType?: string | null
    requirementValue?: number | null
    requirementPeriod?: number | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type AchievementUncheckedCreateWithoutStudentAchievementsInput = {
    id?: number
    name: string
    description?: string | null
    category: string
    icon?: string | null
    pointsReward?: number
    requirementType?: string | null
    requirementValue?: number | null
    requirementPeriod?: number | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type AchievementCreateOrConnectWithoutStudentAchievementsInput = {
    where: AchievementWhereUniqueInput
    create: XOR<AchievementCreateWithoutStudentAchievementsInput, AchievementUncheckedCreateWithoutStudentAchievementsInput>
  }

  export type StudentUpsertWithoutStudentAchievementsInput = {
    update: XOR<StudentUpdateWithoutStudentAchievementsInput, StudentUncheckedUpdateWithoutStudentAchievementsInput>
    create: XOR<StudentCreateWithoutStudentAchievementsInput, StudentUncheckedCreateWithoutStudentAchievementsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutStudentAchievementsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutStudentAchievementsInput, StudentUncheckedUpdateWithoutStudentAchievementsInput>
  }

  export type StudentUpdateWithoutStudentAchievementsInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudentAchievementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUncheckedUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type AchievementUpsertWithoutStudentAchievementsInput = {
    update: XOR<AchievementUpdateWithoutStudentAchievementsInput, AchievementUncheckedUpdateWithoutStudentAchievementsInput>
    create: XOR<AchievementCreateWithoutStudentAchievementsInput, AchievementUncheckedCreateWithoutStudentAchievementsInput>
    where?: AchievementWhereInput
  }

  export type AchievementUpdateToOneWithWhereWithoutStudentAchievementsInput = {
    where?: AchievementWhereInput
    data: XOR<AchievementUpdateWithoutStudentAchievementsInput, AchievementUncheckedUpdateWithoutStudentAchievementsInput>
  }

  export type AchievementUpdateWithoutStudentAchievementsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    requirementType?: NullableStringFieldUpdateOperationsInput | string | null
    requirementValue?: NullableIntFieldUpdateOperationsInput | number | null
    requirementPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AchievementUncheckedUpdateWithoutStudentAchievementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    requirementType?: NullableStringFieldUpdateOperationsInput | string | null
    requirementValue?: NullableIntFieldUpdateOperationsInput | number | null
    requirementPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateWithoutStudentStreaksInput = {
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudentStreaksInput = {
    id?: number
    userId: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingUncheckedCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementUncheckedCreateNestedManyWithoutStudentInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudentStreaksInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudentStreaksInput, StudentUncheckedCreateWithoutStudentStreaksInput>
  }

  export type ClassCreateWithoutStudentStreaksInput = {
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    faculty?: StaffCreateNestedOneWithoutClassesInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutStudentStreaksInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    facultyId?: number | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentStreaksInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentStreaksInput, ClassUncheckedCreateWithoutStudentStreaksInput>
  }

  export type StudentUpsertWithoutStudentStreaksInput = {
    update: XOR<StudentUpdateWithoutStudentStreaksInput, StudentUncheckedUpdateWithoutStudentStreaksInput>
    create: XOR<StudentCreateWithoutStudentStreaksInput, StudentUncheckedCreateWithoutStudentStreaksInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutStudentStreaksInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutStudentStreaksInput, StudentUncheckedUpdateWithoutStudentStreaksInput>
  }

  export type StudentUpdateWithoutStudentStreaksInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudentStreaksInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUncheckedUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUncheckedUpdateManyWithoutStudentNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassUpsertWithoutStudentStreaksInput = {
    update: XOR<ClassUpdateWithoutStudentStreaksInput, ClassUncheckedUpdateWithoutStudentStreaksInput>
    create: XOR<ClassCreateWithoutStudentStreaksInput, ClassUncheckedCreateWithoutStudentStreaksInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutStudentStreaksInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutStudentStreaksInput, ClassUncheckedUpdateWithoutStudentStreaksInput>
  }

  export type ClassUpdateWithoutStudentStreaksInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    faculty?: StaffUpdateOneWithoutClassesNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentStreaksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facultyId?: NullableIntFieldUpdateOperationsInput | number | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUncheckedUpdateManyWithoutClassNestedInput
  }

  export type StudentCreateWithoutLeaderboardRankingsInput = {
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutLeaderboardRankingsInput = {
    id?: number
    userId: number
    studentId: string
    class?: string | null
    section?: string | null
    year?: string | null
    enrollmentDate?: Date | string | null
    gpa?: Decimal | DecimalJsLike | number | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutStudentInput
    studentRiskTracking?: StudentRiskTrackingUncheckedCreateNestedManyWithoutStudentInput
    studentAlerts?: StudentAlertUncheckedCreateNestedManyWithoutStudentInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutStudentInput
    studentAchievements?: StudentAchievementUncheckedCreateNestedManyWithoutStudentInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutLeaderboardRankingsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutLeaderboardRankingsInput, StudentUncheckedCreateWithoutLeaderboardRankingsInput>
  }

  export type ClassCreateWithoutLeaderboardRankingsInput = {
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    faculty?: StaffCreateNestedOneWithoutClassesInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutLeaderboardRankingsInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    facultyId?: number | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutClassInput
    classLocations?: ClassLocationUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutLeaderboardRankingsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutLeaderboardRankingsInput, ClassUncheckedCreateWithoutLeaderboardRankingsInput>
  }

  export type DepartmentCreateWithoutLeaderboardRankingsInput = {
    name: string
    code: string
    type?: $Enums.DepartmentType
    status?: $Enums.DepartmentStatus
    programsCount?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    head?: StaffCreateNestedOneWithoutDepartmentsInput
  }

  export type DepartmentUncheckedCreateWithoutLeaderboardRankingsInput = {
    id?: number
    name: string
    code: string
    headId?: number | null
    type?: $Enums.DepartmentType
    status?: $Enums.DepartmentStatus
    programsCount?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentCreateOrConnectWithoutLeaderboardRankingsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutLeaderboardRankingsInput, DepartmentUncheckedCreateWithoutLeaderboardRankingsInput>
  }

  export type StudentUpsertWithoutLeaderboardRankingsInput = {
    update: XOR<StudentUpdateWithoutLeaderboardRankingsInput, StudentUncheckedUpdateWithoutLeaderboardRankingsInput>
    create: XOR<StudentCreateWithoutLeaderboardRankingsInput, StudentUncheckedCreateWithoutLeaderboardRankingsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutLeaderboardRankingsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutLeaderboardRankingsInput, StudentUncheckedUpdateWithoutLeaderboardRankingsInput>
  }

  export type StudentUpdateWithoutLeaderboardRankingsInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutLeaderboardRankingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutStudentNestedInput
    studentRiskTracking?: StudentRiskTrackingUncheckedUpdateManyWithoutStudentNestedInput
    studentAlerts?: StudentAlertUncheckedUpdateManyWithoutStudentNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutStudentNestedInput
    studentAchievements?: StudentAchievementUncheckedUpdateManyWithoutStudentNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassUpsertWithoutLeaderboardRankingsInput = {
    update: XOR<ClassUpdateWithoutLeaderboardRankingsInput, ClassUncheckedUpdateWithoutLeaderboardRankingsInput>
    create: XOR<ClassCreateWithoutLeaderboardRankingsInput, ClassUncheckedCreateWithoutLeaderboardRankingsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutLeaderboardRankingsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutLeaderboardRankingsInput, ClassUncheckedUpdateWithoutLeaderboardRankingsInput>
  }

  export type ClassUpdateWithoutLeaderboardRankingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    faculty?: StaffUpdateOneWithoutClassesNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutLeaderboardRankingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facultyId?: NullableIntFieldUpdateOperationsInput | number | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUncheckedUpdateManyWithoutClassNestedInput
  }

  export type DepartmentUpsertWithoutLeaderboardRankingsInput = {
    update: XOR<DepartmentUpdateWithoutLeaderboardRankingsInput, DepartmentUncheckedUpdateWithoutLeaderboardRankingsInput>
    create: XOR<DepartmentCreateWithoutLeaderboardRankingsInput, DepartmentUncheckedCreateWithoutLeaderboardRankingsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutLeaderboardRankingsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutLeaderboardRankingsInput, DepartmentUncheckedUpdateWithoutLeaderboardRankingsInput>
  }

  export type DepartmentUpdateWithoutLeaderboardRankingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumDepartmentTypeFieldUpdateOperationsInput | $Enums.DepartmentType
    status?: EnumDepartmentStatusFieldUpdateOperationsInput | $Enums.DepartmentStatus
    programsCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    head?: StaffUpdateOneWithoutDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutLeaderboardRankingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    headId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumDepartmentTypeFieldUpdateOperationsInput | $Enums.DepartmentType
    status?: EnumDepartmentStatusFieldUpdateOperationsInput | $Enums.DepartmentStatus
    programsCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassCreateWithoutClassLocationsInput = {
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    faculty?: StaffCreateNestedOneWithoutClassesInput
    classEnrollments?: ClassEnrollmentCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutClassLocationsInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    facultyId?: number | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classEnrollments?: ClassEnrollmentUncheckedCreateNestedManyWithoutClassInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutClassInput
    attendanceSessions?: AttendanceSessionUncheckedCreateNestedManyWithoutClassInput
    absenceJustifications?: AbsenceJustificationUncheckedCreateNestedManyWithoutClassInput
    studentPoints?: StudentPointUncheckedCreateNestedManyWithoutClassInput
    studentStreaks?: StudentStreakUncheckedCreateNestedManyWithoutClassInput
    leaderboardRankings?: LeaderboardRankingUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutClassLocationsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutClassLocationsInput, ClassUncheckedCreateWithoutClassLocationsInput>
  }

  export type ClassUpsertWithoutClassLocationsInput = {
    update: XOR<ClassUpdateWithoutClassLocationsInput, ClassUncheckedUpdateWithoutClassLocationsInput>
    create: XOR<ClassCreateWithoutClassLocationsInput, ClassUncheckedCreateWithoutClassLocationsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutClassLocationsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutClassLocationsInput, ClassUncheckedUpdateWithoutClassLocationsInput>
  }

  export type ClassUpdateWithoutClassLocationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    faculty?: StaffUpdateOneWithoutClassesNestedInput
    classEnrollments?: ClassEnrollmentUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutClassLocationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facultyId?: NullableIntFieldUpdateOperationsInput | number | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutClassNestedInput
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    read?: boolean
    priority?: $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type NotificationUpdateWithoutUserInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClassCreateManyFacultyInput = {
    id?: number
    name: string
    code: string
    subject: string
    description?: string | null
    room?: string | null
    capacity?: number | null
    schedule?: string | null
    department?: string | null
    semester?: string | null
    academicYear?: string | null
    credits?: number | null
    classType?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    geofenceEnabled?: boolean | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceSessionCreateManyCreatorInput = {
    id?: number
    sessionId: string
    classId: number
    sessionDate: Date | string
    sessionTime: Date | string
    sessionType?: $Enums.SessionType
    location?: string | null
    plannedTopic?: string | null
    targetLearning?: string | null
    targetLevel?: string | null
    planningStatus?: $Enums.PlanningStatus
    notes?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceRecordCreateManyRecordedByStaffInput = {
    id?: number
    studentId: number
    classId: number
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceJustificationCreateManyReviewedByStaffInput = {
    id?: number
    studentId: number
    classId: number
    attendanceRecordId?: number | null
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentCreateManyHeadInput = {
    id?: number
    name: string
    code: string
    type?: $Enums.DepartmentType
    status?: $Enums.DepartmentStatus
    programsCount?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentAlertCreateManySentByStaffInput = {
    id?: number
    studentId: number
    alertType: $Enums.AlertType
    message: string
    recipient?: string | null
    status?: $Enums.AlertStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ClassUpdateWithoutFacultyInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutFacultyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classEnrollments?: ClassEnrollmentUncheckedUpdateManyWithoutClassNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutClassNestedInput
    attendanceSessions?: AttendanceSessionUncheckedUpdateManyWithoutClassNestedInput
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutClassNestedInput
    studentPoints?: StudentPointUncheckedUpdateManyWithoutClassNestedInput
    studentStreaks?: StudentStreakUncheckedUpdateManyWithoutClassNestedInput
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutClassNestedInput
    classLocations?: ClassLocationUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutFacultyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    classType?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    geofenceEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceSessionUpdateWithoutCreatorInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutAttendanceSessionsNestedInput
    qrSessions?: QRSessionUpdateManyWithoutAttendanceSessionNestedInput
  }

  export type AttendanceSessionUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrSessions?: QRSessionUncheckedUpdateManyWithoutAttendanceSessionNestedInput
  }

  export type AttendanceSessionUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUpdateWithoutRecordedByStaffInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    class?: ClassUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutAttendanceRecordNestedInput
  }

  export type AttendanceRecordUncheckedUpdateWithoutRecordedByStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutAttendanceRecordNestedInput
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutRecordedByStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceJustificationUpdateWithoutReviewedByStaffInput = {
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAbsenceJustificationsNestedInput
    class?: ClassUpdateOneRequiredWithoutAbsenceJustificationsNestedInput
    attendanceRecord?: AttendanceRecordUpdateOneWithoutAbsenceJustificationsNestedInput
  }

  export type AbsenceJustificationUncheckedUpdateWithoutReviewedByStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    attendanceRecordId?: NullableIntFieldUpdateOperationsInput | number | null
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceJustificationUncheckedUpdateManyWithoutReviewedByStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    attendanceRecordId?: NullableIntFieldUpdateOperationsInput | number | null
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpdateWithoutHeadInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumDepartmentTypeFieldUpdateOperationsInput | $Enums.DepartmentType
    status?: EnumDepartmentStatusFieldUpdateOperationsInput | $Enums.DepartmentStatus
    programsCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaderboardRankings?: LeaderboardRankingUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutHeadInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumDepartmentTypeFieldUpdateOperationsInput | $Enums.DepartmentType
    status?: EnumDepartmentStatusFieldUpdateOperationsInput | $Enums.DepartmentStatus
    programsCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaderboardRankings?: LeaderboardRankingUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutHeadInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumDepartmentTypeFieldUpdateOperationsInput | $Enums.DepartmentType
    status?: EnumDepartmentStatusFieldUpdateOperationsInput | $Enums.DepartmentStatus
    programsCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAlertUpdateWithoutSentByStaffInput = {
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutStudentAlertsNestedInput
  }

  export type StudentAlertUncheckedUpdateWithoutSentByStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAlertUncheckedUpdateManyWithoutSentByStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassEnrollmentCreateManyStudentInput = {
    id?: number
    classId: number
    enrollmentDate?: Date | string
    status?: string | null
    grade?: string | null
    createdAt?: Date | string
  }

  export type AttendanceRecordCreateManyStudentInput = {
    id?: number
    classId: number
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recordedBy?: number | null
  }

  export type AbsenceJustificationCreateManyStudentInput = {
    id?: number
    classId: number
    attendanceRecordId?: number | null
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentRiskTrackingCreateManyStudentInput = {
    id?: number
    riskLevel: $Enums.RiskLevel
    attendanceRate: Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: number
    totalAbsences?: number
    lastAttendanceDate?: Date | string | null
    parentEmail?: string | null
    parentPhone?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentAlertCreateManyStudentInput = {
    id?: number
    alertType: $Enums.AlertType
    message: string
    recipient?: string | null
    status?: $Enums.AlertStatus
    sentBy?: number | null
    sentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type StudentPointCreateManyStudentInput = {
    id?: number
    classId?: number | null
    points: number
    pointType: string
    description?: string | null
    referenceId?: number | null
    awardedBy?: number | null
    createdAt?: Date | string
  }

  export type StudentAchievementCreateManyStudentInput = {
    id?: number
    achievementId: number
    progress?: number
    isEarned?: boolean
    earnedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type StudentStreakCreateManyStudentInput = {
    id?: number
    classId: number
    currentStreak?: number
    longestStreak?: number
    lastAttendanceDate?: Date | string | null
    streakStartDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaderboardRankingCreateManyStudentInput = {
    id?: number
    classId?: number | null
    departmentId?: number | null
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type ClassEnrollmentUpdateWithoutStudentInput = {
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutClassEnrollmentsNestedInput
  }

  export type ClassEnrollmentUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassEnrollmentUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUpdateWithoutStudentInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    recordedByStaff?: StaffUpdateOneWithoutAttendanceRecordsNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutAttendanceRecordNestedInput
  }

  export type AttendanceRecordUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: NullableIntFieldUpdateOperationsInput | number | null
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutAttendanceRecordNestedInput
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AbsenceJustificationUpdateWithoutStudentInput = {
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutAbsenceJustificationsNestedInput
    attendanceRecord?: AttendanceRecordUpdateOneWithoutAbsenceJustificationsNestedInput
    reviewedByStaff?: StaffUpdateOneWithoutAbsenceJustificationsNestedInput
  }

  export type AbsenceJustificationUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    attendanceRecordId?: NullableIntFieldUpdateOperationsInput | number | null
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceJustificationUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    attendanceRecordId?: NullableIntFieldUpdateOperationsInput | number | null
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentRiskTrackingUpdateWithoutStudentInput = {
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    attendanceRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: IntFieldUpdateOperationsInput | number
    totalAbsences?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentRiskTrackingUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    attendanceRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: IntFieldUpdateOperationsInput | number
    totalAbsences?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentRiskTrackingUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    attendanceRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    consecutiveAbsences?: IntFieldUpdateOperationsInput | number
    totalAbsences?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAlertUpdateWithoutStudentInput = {
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentByStaff?: StaffUpdateOneWithoutStudentAlertsNestedInput
  }

  export type StudentAlertUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    sentBy?: NullableIntFieldUpdateOperationsInput | number | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAlertUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    sentBy?: NullableIntFieldUpdateOperationsInput | number | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPointUpdateWithoutStudentInput = {
    points?: IntFieldUpdateOperationsInput | number
    pointType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    awardedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneWithoutStudentPointsNestedInput
  }

  export type StudentPointUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    pointType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    awardedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPointUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    pointType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    awardedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAchievementUpdateWithoutStudentInput = {
    progress?: IntFieldUpdateOperationsInput | number
    isEarned?: BoolFieldUpdateOperationsInput | boolean
    earnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    achievement?: AchievementUpdateOneRequiredWithoutStudentAchievementsNestedInput
  }

  export type StudentAchievementUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    achievementId?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    isEarned?: BoolFieldUpdateOperationsInput | boolean
    earnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAchievementUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    achievementId?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    isEarned?: BoolFieldUpdateOperationsInput | boolean
    earnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentStreakUpdateWithoutStudentInput = {
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    streakStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutStudentStreaksNestedInput
  }

  export type StudentStreakUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    streakStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentStreakUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    streakStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaderboardRankingUpdateWithoutStudentInput = {
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneWithoutLeaderboardRankingsNestedInput
    department?: DepartmentUpdateOneWithoutLeaderboardRankingsNestedInput
  }

  export type LeaderboardRankingUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaderboardRankingUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassEnrollmentCreateManyClassInput = {
    id?: number
    studentId: number
    enrollmentDate?: Date | string
    status?: string | null
    grade?: string | null
    createdAt?: Date | string
  }

  export type AttendanceRecordCreateManyClassInput = {
    id?: number
    studentId: number
    sessionDate: Date | string
    sessionTime?: Date | string | null
    status: $Enums.AttendanceStatus
    checkInTime?: Date | string | null
    method?: $Enums.AttendanceMethod
    qrSessionId?: string | null
    scanTimestamp?: Date | string | null
    isJustified?: boolean
    justificationId?: number | null
    studentLatitude?: number | null
    studentLongitude?: number | null
    distanceFromClass?: number | null
    locationVerified?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recordedBy?: number | null
  }

  export type AttendanceSessionCreateManyClassInput = {
    id?: number
    sessionId: string
    createdBy: number
    sessionDate: Date | string
    sessionTime: Date | string
    sessionType?: $Enums.SessionType
    location?: string | null
    plannedTopic?: string | null
    targetLearning?: string | null
    targetLevel?: string | null
    planningStatus?: $Enums.PlanningStatus
    notes?: string | null
    latitude?: number | null
    longitude?: number | null
    geofenceRadius?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceJustificationCreateManyClassInput = {
    id?: number
    studentId: number
    attendanceRecordId?: number | null
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentPointCreateManyClassInput = {
    id?: number
    studentId: number
    points: number
    pointType: string
    description?: string | null
    referenceId?: number | null
    awardedBy?: number | null
    createdAt?: Date | string
  }

  export type StudentStreakCreateManyClassInput = {
    id?: number
    studentId: number
    currentStreak?: number
    longestStreak?: number
    lastAttendanceDate?: Date | string | null
    streakStartDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaderboardRankingCreateManyClassInput = {
    id?: number
    studentId: number
    departmentId?: number | null
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type ClassLocationCreateManyClassInput = {
    id?: number
    name: string
    latitude: number
    longitude: number
    radius?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassEnrollmentUpdateWithoutClassInput = {
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutClassEnrollmentsNestedInput
  }

  export type ClassEnrollmentUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassEnrollmentUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUpdateWithoutClassInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    recordedByStaff?: StaffUpdateOneWithoutAttendanceRecordsNestedInput
    absenceJustifications?: AbsenceJustificationUpdateManyWithoutAttendanceRecordNestedInput
  }

  export type AttendanceRecordUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: NullableIntFieldUpdateOperationsInput | number | null
    absenceJustifications?: AbsenceJustificationUncheckedUpdateManyWithoutAttendanceRecordNestedInput
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    method?: EnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod
    qrSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    scanTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isJustified?: BoolFieldUpdateOperationsInput | boolean
    justificationId?: NullableIntFieldUpdateOperationsInput | number | null
    studentLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    studentLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    distanceFromClass?: NullableFloatFieldUpdateOperationsInput | number | null
    locationVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendanceSessionUpdateWithoutClassInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: StaffUpdateOneRequiredWithoutAttendanceSessionsNestedInput
    qrSessions?: QRSessionUpdateManyWithoutAttendanceSessionNestedInput
  }

  export type AttendanceSessionUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrSessions?: QRSessionUncheckedUpdateManyWithoutAttendanceSessionNestedInput
  }

  export type AttendanceSessionUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionType?: EnumSessionTypeFieldUpdateOperationsInput | $Enums.SessionType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    plannedTopic?: NullableStringFieldUpdateOperationsInput | string | null
    targetLearning?: NullableStringFieldUpdateOperationsInput | string | null
    targetLevel?: NullableStringFieldUpdateOperationsInput | string | null
    planningStatus?: EnumPlanningStatusFieldUpdateOperationsInput | $Enums.PlanningStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    geofenceRadius?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceJustificationUpdateWithoutClassInput = {
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAbsenceJustificationsNestedInput
    attendanceRecord?: AttendanceRecordUpdateOneWithoutAbsenceJustificationsNestedInput
    reviewedByStaff?: StaffUpdateOneWithoutAbsenceJustificationsNestedInput
  }

  export type AbsenceJustificationUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    attendanceRecordId?: NullableIntFieldUpdateOperationsInput | number | null
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceJustificationUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    attendanceRecordId?: NullableIntFieldUpdateOperationsInput | number | null
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPointUpdateWithoutClassInput = {
    points?: IntFieldUpdateOperationsInput | number
    pointType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    awardedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutStudentPointsNestedInput
  }

  export type StudentPointUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    pointType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    awardedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPointUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    pointType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    awardedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentStreakUpdateWithoutClassInput = {
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    streakStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutStudentStreaksNestedInput
  }

  export type StudentStreakUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    streakStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentStreakUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastAttendanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    streakStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaderboardRankingUpdateWithoutClassInput = {
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutLeaderboardRankingsNestedInput
    department?: DepartmentUpdateOneWithoutLeaderboardRankingsNestedInput
  }

  export type LeaderboardRankingUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaderboardRankingUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassLocationUpdateWithoutClassInput = {
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    radius?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassLocationUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    radius?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassLocationUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    radius?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceJustificationCreateManyAttendanceRecordInput = {
    id?: number
    studentId: number
    classId: number
    absenceDate: Date | string
    reason: $Enums.JustificationReason
    description?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.JustificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceJustificationUpdateWithoutAttendanceRecordInput = {
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAbsenceJustificationsNestedInput
    class?: ClassUpdateOneRequiredWithoutAbsenceJustificationsNestedInput
    reviewedByStaff?: StaffUpdateOneWithoutAbsenceJustificationsNestedInput
  }

  export type AbsenceJustificationUncheckedUpdateWithoutAttendanceRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceJustificationUncheckedUpdateManyWithoutAttendanceRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    absenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumJustificationReasonFieldUpdateOperationsInput | $Enums.JustificationReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJustificationStatusFieldUpdateOperationsInput | $Enums.JustificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QRSessionCreateManyAttendanceSessionInput = {
    id?: number
    sessionId: string
    qrData: string
    scanCount?: number
    maxScans?: number | null
    expiresAt: Date | string
    status?: string | null
    createdAt?: Date | string
  }

  export type QRSessionUpdateWithoutAttendanceSessionInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    qrData?: StringFieldUpdateOperationsInput | string
    scanCount?: IntFieldUpdateOperationsInput | number
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QRSessionUncheckedUpdateWithoutAttendanceSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    qrData?: StringFieldUpdateOperationsInput | string
    scanCount?: IntFieldUpdateOperationsInput | number
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QRSessionUncheckedUpdateManyWithoutAttendanceSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    qrData?: StringFieldUpdateOperationsInput | string
    scanCount?: IntFieldUpdateOperationsInput | number
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaderboardRankingCreateManyDepartmentInput = {
    id?: number
    studentId: number
    classId?: number | null
    period: string
    scope: string
    rankPosition: number
    totalPoints?: number
    attendanceRate?: Decimal | DecimalJsLike | number | string | null
    streakDays?: number
    achievementsCount?: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type LeaderboardRankingUpdateWithoutDepartmentInput = {
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutLeaderboardRankingsNestedInput
    class?: ClassUpdateOneWithoutLeaderboardRankingsNestedInput
  }

  export type LeaderboardRankingUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaderboardRankingUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    rankPosition?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    attendanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    streakDays?: IntFieldUpdateOperationsInput | number
    achievementsCount?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAchievementCreateManyAchievementInput = {
    id?: number
    studentId: number
    progress?: number
    isEarned?: boolean
    earnedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type StudentAchievementUpdateWithoutAchievementInput = {
    progress?: IntFieldUpdateOperationsInput | number
    isEarned?: BoolFieldUpdateOperationsInput | boolean
    earnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutStudentAchievementsNestedInput
  }

  export type StudentAchievementUncheckedUpdateWithoutAchievementInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    isEarned?: BoolFieldUpdateOperationsInput | boolean
    earnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAchievementUncheckedUpdateManyWithoutAchievementInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    isEarned?: BoolFieldUpdateOperationsInput | boolean
    earnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}