
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  status: 'status',
  phone: 'phone',
  avatarUrl: 'avatarUrl',
  lastSeen: 'lastSeen',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  adminLevel: 'adminLevel',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeId: 'employeeId',
  department: 'department',
  position: 'position',
  joinDate: 'joinDate',
  salary: 'salary',
  officeLocation: 'officeLocation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  studentId: 'studentId',
  class: 'class',
  section: 'section',
  year: 'year',
  enrollmentDate: 'enrollmentDate',
  gpa: 'gpa',
  parentEmail: 'parentEmail',
  parentPhone: 'parentPhone',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  subject: 'subject',
  description: 'description',
  facultyId: 'facultyId',
  room: 'room',
  capacity: 'capacity',
  schedule: 'schedule',
  department: 'department',
  semester: 'semester',
  academicYear: 'academicYear',
  credits: 'credits',
  classType: 'classType',
  latitude: 'latitude',
  longitude: 'longitude',
  geofenceRadius: 'geofenceRadius',
  geofenceEnabled: 'geofenceEnabled',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassEnrollmentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  enrollmentDate: 'enrollmentDate',
  status: 'status',
  grade: 'grade',
  createdAt: 'createdAt'
};

exports.Prisma.AttendanceRecordScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  sessionDate: 'sessionDate',
  sessionTime: 'sessionTime',
  status: 'status',
  checkInTime: 'checkInTime',
  method: 'method',
  qrSessionId: 'qrSessionId',
  scanTimestamp: 'scanTimestamp',
  isJustified: 'isJustified',
  justificationId: 'justificationId',
  studentLatitude: 'studentLatitude',
  studentLongitude: 'studentLongitude',
  distanceFromClass: 'distanceFromClass',
  locationVerified: 'locationVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  recordedBy: 'recordedBy'
};

exports.Prisma.AttendanceSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  classId: 'classId',
  createdBy: 'createdBy',
  sessionDate: 'sessionDate',
  sessionTime: 'sessionTime',
  sessionType: 'sessionType',
  location: 'location',
  plannedTopic: 'plannedTopic',
  targetLearning: 'targetLearning',
  targetLevel: 'targetLevel',
  planningStatus: 'planningStatus',
  notes: 'notes',
  latitude: 'latitude',
  longitude: 'longitude',
  geofenceRadius: 'geofenceRadius',
  expiresAt: 'expiresAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QRSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  attendanceSessionId: 'attendanceSessionId',
  qrData: 'qrData',
  scanCount: 'scanCount',
  maxScans: 'maxScans',
  expiresAt: 'expiresAt',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.AbsenceJustificationScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  attendanceRecordId: 'attendanceRecordId',
  absenceDate: 'absenceDate',
  reason: 'reason',
  description: 'description',
  documents: 'documents',
  status: 'status',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  reviewNote: 'reviewNote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  headId: 'headId',
  type: 'type',
  status: 'status',
  programsCount: 'programsCount',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  read: 'read',
  priority: 'priority',
  data: 'data',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.StudentRiskTrackingScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  riskLevel: 'riskLevel',
  attendanceRate: 'attendanceRate',
  consecutiveAbsences: 'consecutiveAbsences',
  totalAbsences: 'totalAbsences',
  lastAttendanceDate: 'lastAttendanceDate',
  parentEmail: 'parentEmail',
  parentPhone: 'parentPhone',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentAlertScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  alertType: 'alertType',
  message: 'message',
  recipient: 'recipient',
  status: 'status',
  sentBy: 'sentBy',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.StudentPointScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  points: 'points',
  pointType: 'pointType',
  description: 'description',
  referenceId: 'referenceId',
  awardedBy: 'awardedBy',
  createdAt: 'createdAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  icon: 'icon',
  pointsReward: 'pointsReward',
  requirementType: 'requirementType',
  requirementValue: 'requirementValue',
  requirementPeriod: 'requirementPeriod',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.StudentAchievementScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  achievementId: 'achievementId',
  progress: 'progress',
  isEarned: 'isEarned',
  earnedAt: 'earnedAt',
  createdAt: 'createdAt'
};

exports.Prisma.StudentStreakScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  currentStreak: 'currentStreak',
  longestStreak: 'longestStreak',
  lastAttendanceDate: 'lastAttendanceDate',
  streakStartDate: 'streakStartDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaderboardRankingScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  departmentId: 'departmentId',
  period: 'period',
  scope: 'scope',
  rankPosition: 'rankPosition',
  totalPoints: 'totalPoints',
  attendanceRate: 'attendanceRate',
  streakDays: 'streakDays',
  achievementsCount: 'achievementsCount',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  createdAt: 'createdAt'
};

exports.Prisma.GeofenceSettingsScalarFieldEnum = {
  id: 'id',
  defaultRadius: 'defaultRadius',
  enabled: 'enabled',
  allowOverride: 'allowOverride',
  accuracyThreshold: 'accuracyThreshold',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassLocationScalarFieldEnum = {
  id: 'id',
  classId: 'classId',
  name: 'name',
  latitude: 'latitude',
  longitude: 'longitude',
  radius: 'radius',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  admin: 'admin',
  staff: 'staff',
  student: 'student'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  present: 'present',
  absent: 'absent',
  late: 'late',
  excused: 'excused'
};

exports.AttendanceMethod = exports.$Enums.AttendanceMethod = {
  qr: 'qr',
  manual: 'manual',
  hybrid: 'hybrid'
};

exports.SessionType = exports.$Enums.SessionType = {
  lecture: 'lecture',
  lab: 'lab',
  tutorial: 'tutorial',
  exam: 'exam'
};

exports.PlanningStatus = exports.$Enums.PlanningStatus = {
  planned: 'planned',
  in_progress: 'in_progress',
  completed: 'completed'
};

exports.JustificationReason = exports.$Enums.JustificationReason = {
  medical: 'medical',
  family: 'family',
  emergency: 'emergency',
  academic: 'academic',
  other: 'other'
};

exports.JustificationStatus = exports.$Enums.JustificationStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.DepartmentType = exports.$Enums.DepartmentType = {
  Technology: 'Technology',
  Engineering: 'Engineering',
  Science: 'Science',
  Arts: 'Arts',
  Business: 'Business',
  Other: 'Other'
};

exports.DepartmentStatus = exports.$Enums.DepartmentStatus = {
  Active: 'Active',
  Inactive: 'Inactive'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  absence_reminder: 'absence_reminder',
  justification_status: 'justification_status',
  attendance_alert: 'attendance_alert',
  class_reminder: 'class_reminder'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  low: 'low',
  normal: 'normal',
  high: 'high',
  urgent: 'urgent'
};

exports.RiskLevel = exports.$Enums.RiskLevel = {
  low: 'low',
  medium: 'medium',
  high: 'high',
  critical: 'critical'
};

exports.AlertType = exports.$Enums.AlertType = {
  notification: 'notification',
  email: 'email',
  parent_email: 'parent_email',
  parent_sms: 'parent_sms'
};

exports.AlertStatus = exports.$Enums.AlertStatus = {
  pending: 'pending',
  sent: 'sent',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  User: 'User',
  Admin: 'Admin',
  Staff: 'Staff',
  Student: 'Student',
  Class: 'Class',
  ClassEnrollment: 'ClassEnrollment',
  AttendanceRecord: 'AttendanceRecord',
  AttendanceSession: 'AttendanceSession',
  QRSession: 'QRSession',
  AbsenceJustification: 'AbsenceJustification',
  Department: 'Department',
  Notification: 'Notification',
  StudentRiskTracking: 'StudentRiskTracking',
  StudentAlert: 'StudentAlert',
  StudentPoint: 'StudentPoint',
  Achievement: 'Achievement',
  StudentAchievement: 'StudentAchievement',
  StudentStreak: 'StudentStreak',
  LeaderboardRanking: 'LeaderboardRanking',
  GeofenceSettings: 'GeofenceSettings',
  ClassLocation: 'ClassLocation'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "c:\\Users\\acer\\OneDrive\\Documents\\GitHub\\attendance-fullstack\\attendance-hunters-main\\server\\database\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "c:\\Users\\acer\\OneDrive\\Documents\\GitHub\\attendance-fullstack\\attendance-hunters-main\\server\\database\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum UserRole {\n  admin\n  staff\n  student\n}\n\nenum UserStatus {\n  active\n  inactive\n  suspended\n}\n\nenum AttendanceStatus {\n  present\n  absent\n  late\n  excused\n}\n\nenum AttendanceMethod {\n  qr\n  manual\n  hybrid\n}\n\nenum SessionType {\n  lecture\n  lab\n  tutorial\n  exam\n}\n\nenum PlanningStatus {\n  planned\n  in_progress\n  completed\n}\n\nenum JustificationReason {\n  medical\n  family\n  emergency\n  academic\n  other\n}\n\nenum JustificationStatus {\n  pending\n  approved\n  rejected\n}\n\nenum DepartmentType {\n  Technology\n  Engineering\n  Science\n  Arts\n  Business\n  Other\n}\n\nenum DepartmentStatus {\n  Active\n  Inactive\n}\n\nenum NotificationType {\n  absence_reminder\n  justification_status\n  attendance_alert\n  class_reminder\n}\n\nenum NotificationPriority {\n  low\n  normal\n  high\n  urgent\n}\n\nenum RiskLevel {\n  low\n  medium\n  high\n  critical\n}\n\nenum AlertType {\n  notification\n  email\n  parent_email\n  parent_sms\n}\n\nenum AlertStatus {\n  pending\n  sent\n  failed\n}\n\nmodel User {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  password  String\n  name      String\n  role      UserRole\n  status    UserStatus @default(active)\n  phone     String?\n  avatarUrl String?    @map(\"avatar_url\")\n  lastSeen  DateTime?  @map(\"last_seen\")\n  lastLogin DateTime?  @map(\"last_login\")\n  createdAt DateTime   @default(now()) @map(\"created_at\")\n  updatedAt DateTime   @updatedAt @map(\"updated_at\")\n\n  admin         Admin?\n  staff         Staff?\n  student       Student?\n  notifications Notification[]\n\n  @@map(\"users\")\n}\n\nmodel Admin {\n  id          Int      @id @default(autoincrement())\n  userId      Int      @unique @map(\"user_id\")\n  adminLevel  String   @default(\"system\") @map(\"admin_level\")\n  permissions Json?\n  createdAt   DateTime @default(now()) @map(\"created_at\")\n  updatedAt   DateTime @updatedAt @map(\"updated_at\")\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"admins\")\n}\n\nmodel Staff {\n  id             Int       @id @default(autoincrement())\n  userId         Int       @unique @map(\"user_id\")\n  employeeId     String    @unique @map(\"employee_id\")\n  department     String?\n  position       String?\n  joinDate       DateTime? @map(\"join_date\") @db.Date\n  salary         Decimal?  @db.Decimal(10, 2)\n  officeLocation String?   @map(\"office_location\")\n  createdAt      DateTime  @default(now()) @map(\"created_at\")\n  updatedAt      DateTime  @updatedAt @map(\"updated_at\")\n\n  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  classes               Class[]\n  attendanceSessions    AttendanceSession[]\n  attendanceRecords     AttendanceRecord[]\n  absenceJustifications AbsenceJustification[]\n  departments           Department[]\n  studentAlerts         StudentAlert[]\n\n  @@map(\"staff\")\n}\n\nmodel Student {\n  id             Int       @id @default(autoincrement())\n  userId         Int       @unique @map(\"user_id\")\n  studentId      String    @unique @map(\"student_id\")\n  class          String?\n  section        String?\n  year           String?\n  enrollmentDate DateTime? @map(\"enrollment_date\") @db.Date\n  gpa            Decimal?  @default(0.00) @db.Decimal(3, 2)\n  parentEmail    String?   @map(\"parent_email\")\n  parentPhone    String?   @map(\"parent_phone\")\n  address        String?\n  createdAt      DateTime  @default(now()) @map(\"created_at\")\n  updatedAt      DateTime  @updatedAt @map(\"updated_at\")\n\n  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  classEnrollments      ClassEnrollment[]\n  attendanceRecords     AttendanceRecord[]\n  absenceJustifications AbsenceJustification[]\n  studentRiskTracking   StudentRiskTracking[]\n  studentAlerts         StudentAlert[]\n  studentPoints         StudentPoint[]\n  studentAchievements   StudentAchievement[]\n  studentStreaks        StudentStreak[]\n  leaderboardRankings   LeaderboardRanking[]\n\n  @@map(\"students\")\n}\n\nmodel Class {\n  id              Int      @id @default(autoincrement())\n  name            String\n  code            String   @unique\n  subject         String\n  description     String?\n  facultyId       Int?     @map(\"faculty_id\")\n  room            String?\n  capacity        Int?     @default(50)\n  schedule        String?\n  department      String?\n  semester        String?\n  academicYear    String?  @map(\"academic_year\")\n  credits         Int?     @default(3)\n  classType       String?  @map(\"class_type\")\n  latitude        Float?   @map(\"latitude\")\n  longitude       Float?   @map(\"longitude\")\n  geofenceRadius  Int?     @default(100) @map(\"geofence_radius\")\n  geofenceEnabled Boolean? @default(true) @map(\"geofence_enabled\")\n  status          String?  @default(\"active\")\n  createdAt       DateTime @default(now()) @map(\"created_at\")\n  updatedAt       DateTime @updatedAt @map(\"updated_at\")\n\n  faculty               Staff?                 @relation(fields: [facultyId], references: [id])\n  classEnrollments      ClassEnrollment[]\n  attendanceRecords     AttendanceRecord[]\n  attendanceSessions    AttendanceSession[]\n  absenceJustifications AbsenceJustification[]\n  studentPoints         StudentPoint[]\n  studentStreaks        StudentStreak[]\n  leaderboardRankings   LeaderboardRanking[]\n  classLocations        ClassLocation[]\n\n  @@map(\"classes\")\n}\n\nmodel ClassEnrollment {\n  id             Int      @id @default(autoincrement())\n  studentId      Int      @map(\"student_id\")\n  classId        Int      @map(\"class_id\")\n  enrollmentDate DateTime @default(now()) @map(\"enrollment_date\") @db.Date\n  status         String?  @default(\"enrolled\")\n  grade          String?\n  createdAt      DateTime @default(now()) @map(\"created_at\")\n\n  student Student @relation(fields: [studentId], references: [id])\n  class   Class   @relation(fields: [classId], references: [id])\n\n  @@unique([studentId, classId])\n  @@map(\"class_enrollments\")\n}\n\nmodel AttendanceRecord {\n  id                Int              @id @default(autoincrement())\n  studentId         Int              @map(\"student_id\")\n  classId           Int              @map(\"class_id\")\n  sessionDate       DateTime         @map(\"session_date\") @db.Date\n  sessionTime       DateTime?        @map(\"session_time\") @db.Time\n  status            AttendanceStatus\n  checkInTime       DateTime?        @map(\"check_in_time\")\n  method            AttendanceMethod @default(manual)\n  qrSessionId       String?          @map(\"qr_session_id\")\n  scanTimestamp     DateTime?        @map(\"scan_timestamp\")\n  isJustified       Boolean          @default(false) @map(\"is_justified\")\n  justificationId   Int?             @map(\"justification_id\")\n  studentLatitude   Float?           @map(\"student_latitude\")\n  studentLongitude  Float?           @map(\"student_longitude\")\n  distanceFromClass Float?           @map(\"distance_from_class\")\n  locationVerified  Boolean?         @default(false) @map(\"location_verified\")\n  createdAt         DateTime         @default(now()) @map(\"created_at\")\n  updatedAt         DateTime         @updatedAt @map(\"updated_at\")\n  recordedBy        Int?             @map(\"recorded_by\")\n\n  student               Student                @relation(fields: [studentId], references: [id])\n  class                 Class                  @relation(fields: [classId], references: [id])\n  recordedByStaff       Staff?                 @relation(fields: [recordedBy], references: [id])\n  absenceJustifications AbsenceJustification[]\n\n  @@unique([studentId, classId, sessionDate])\n  @@map(\"attendance_records\")\n}\n\nmodel AttendanceSession {\n  id             Int            @id @default(autoincrement())\n  sessionId      String         @unique @map(\"session_id\")\n  classId        Int            @map(\"class_id\")\n  createdBy      Int            @map(\"created_by\")\n  sessionDate    DateTime       @map(\"session_date\") @db.Date\n  sessionTime    DateTime       @map(\"session_time\") @db.Time\n  sessionType    SessionType    @default(lecture) @map(\"session_type\")\n  location       String?\n  plannedTopic   String?        @map(\"planned_topic\")\n  targetLearning String?        @map(\"target_learning\")\n  targetLevel    String?        @map(\"target_level\")\n  planningStatus PlanningStatus @default(planned) @map(\"planning_status\")\n  notes          String?\n  latitude       Float?         @map(\"latitude\")\n  longitude      Float?         @map(\"longitude\")\n  geofenceRadius Int?           @default(100) @map(\"geofence_radius\")\n  expiresAt      DateTime       @map(\"expires_at\")\n  status         String?        @default(\"active\")\n  createdAt      DateTime       @default(now()) @map(\"created_at\")\n  updatedAt      DateTime       @updatedAt @map(\"updated_at\")\n\n  class      Class       @relation(fields: [classId], references: [id])\n  creator    Staff       @relation(fields: [createdBy], references: [id])\n  qrSessions QRSession[]\n\n  @@map(\"attendance_sessions\")\n}\n\nmodel QRSession {\n  id                  Int      @id @default(autoincrement())\n  sessionId           String   @unique @map(\"session_id\")\n  attendanceSessionId Int      @map(\"attendance_session_id\")\n  qrData              String   @map(\"qr_data\")\n  scanCount           Int      @default(0) @map(\"scan_count\")\n  maxScans            Int?     @map(\"max_scans\")\n  expiresAt           DateTime @map(\"expires_at\")\n  status              String?  @default(\"active\")\n  createdAt           DateTime @default(now()) @map(\"created_at\")\n\n  attendanceSession AttendanceSession @relation(fields: [attendanceSessionId], references: [id])\n\n  @@map(\"qr_sessions\")\n}\n\nmodel AbsenceJustification {\n  id                 Int                 @id @default(autoincrement())\n  studentId          Int                 @map(\"student_id\")\n  classId            Int                 @map(\"class_id\")\n  attendanceRecordId Int?                @map(\"attendance_record_id\")\n  absenceDate        DateTime            @map(\"absence_date\") @db.Date\n  reason             JustificationReason\n  description        String?\n  documents          Json?\n  status             JustificationStatus @default(pending)\n  submittedAt        DateTime            @default(now()) @map(\"submitted_at\")\n  reviewedAt         DateTime?           @map(\"reviewed_at\")\n  reviewedBy         Int?                @map(\"reviewed_by\")\n  reviewNote         String?             @map(\"review_note\")\n  createdAt          DateTime            @default(now()) @map(\"created_at\")\n  updatedAt          DateTime            @updatedAt @map(\"updated_at\")\n\n  student          Student           @relation(fields: [studentId], references: [id])\n  class            Class             @relation(fields: [classId], references: [id])\n  attendanceRecord AttendanceRecord? @relation(fields: [attendanceRecordId], references: [id])\n  reviewedByStaff  Staff?            @relation(fields: [reviewedBy], references: [id])\n\n  @@map(\"absence_justifications\")\n}\n\nmodel Department {\n  id            Int              @id @default(autoincrement())\n  name          String\n  code          String           @unique\n  headId        Int?             @map(\"head_id\")\n  type          DepartmentType   @default(Other)\n  status        DepartmentStatus @default(Active)\n  programsCount Int              @default(0) @map(\"programs_count\")\n  description   String?\n  createdAt     DateTime         @default(now()) @map(\"created_at\")\n  updatedAt     DateTime         @updatedAt @map(\"updated_at\")\n\n  head                Staff?               @relation(fields: [headId], references: [id])\n  leaderboardRankings LeaderboardRanking[]\n\n  @@map(\"departments\")\n}\n\nmodel Notification {\n  id        Int                  @id @default(autoincrement())\n  userId    Int                  @map(\"user_id\")\n  type      NotificationType\n  title     String\n  message   String\n  read      Boolean              @default(false)\n  priority  NotificationPriority @default(normal)\n  data      Json?\n  createdAt DateTime             @default(now()) @map(\"created_at\")\n  expiresAt DateTime?            @map(\"expires_at\")\n\n  user User @relation(fields: [userId], references: [id])\n\n  @@map(\"notifications\")\n}\n\nmodel StudentRiskTracking {\n  id                  Int       @id @default(autoincrement())\n  studentId           Int       @map(\"student_id\")\n  riskLevel           RiskLevel @map(\"risk_level\")\n  attendanceRate      Decimal   @map(\"attendance_rate\") @db.Decimal(5, 2)\n  consecutiveAbsences Int       @default(0) @map(\"consecutive_absences\")\n  totalAbsences       Int       @default(0) @map(\"total_absences\")\n  lastAttendanceDate  DateTime? @map(\"last_attendance_date\") @db.Date\n  parentEmail         String?   @map(\"parent_email\")\n  parentPhone         String?   @map(\"parent_phone\")\n  notes               String?\n  createdAt           DateTime  @default(now()) @map(\"created_at\")\n  updatedAt           DateTime  @updatedAt @map(\"updated_at\")\n\n  student Student @relation(fields: [studentId], references: [id])\n\n  @@map(\"student_risk_tracking\")\n}\n\nmodel StudentAlert {\n  id        Int         @id @default(autoincrement())\n  studentId Int         @map(\"student_id\")\n  alertType AlertType   @map(\"alert_type\")\n  message   String\n  recipient String?\n  status    AlertStatus @default(pending)\n  sentBy    Int?        @map(\"sent_by\")\n  sentAt    DateTime?   @map(\"sent_at\")\n  createdAt DateTime    @default(now()) @map(\"created_at\")\n\n  student     Student @relation(fields: [studentId], references: [id])\n  sentByStaff Staff?  @relation(fields: [sentBy], references: [id])\n\n  @@map(\"student_alerts\")\n}\n\nmodel StudentPoint {\n  id          Int      @id @default(autoincrement())\n  studentId   Int      @map(\"student_id\")\n  classId     Int?     @map(\"class_id\")\n  points      Int\n  pointType   String   @map(\"point_type\")\n  description String?\n  referenceId Int?     @map(\"reference_id\")\n  awardedBy   Int?     @map(\"awarded_by\")\n  createdAt   DateTime @default(now()) @map(\"created_at\")\n\n  student Student @relation(fields: [studentId], references: [id])\n  class   Class?  @relation(fields: [classId], references: [id])\n\n  @@map(\"student_points\")\n}\n\nmodel Achievement {\n  id                Int      @id @default(autoincrement())\n  name              String\n  description       String?\n  category          String\n  icon              String?\n  pointsReward      Int      @default(0) @map(\"points_reward\")\n  requirementType   String?  @map(\"requirement_type\")\n  requirementValue  Int?     @map(\"requirement_value\")\n  requirementPeriod Int?     @map(\"requirement_period\")\n  isActive          Boolean  @default(true) @map(\"is_active\")\n  createdAt         DateTime @default(now()) @map(\"created_at\")\n\n  studentAchievements StudentAchievement[]\n\n  @@map(\"achievements\")\n}\n\nmodel StudentAchievement {\n  id            Int       @id @default(autoincrement())\n  studentId     Int       @map(\"student_id\")\n  achievementId Int       @map(\"achievement_id\")\n  progress      Int       @default(0)\n  isEarned      Boolean   @default(false) @map(\"is_earned\")\n  earnedAt      DateTime? @map(\"earned_at\")\n  createdAt     DateTime  @default(now()) @map(\"created_at\")\n\n  student     Student     @relation(fields: [studentId], references: [id])\n  achievement Achievement @relation(fields: [achievementId], references: [id])\n\n  @@unique([studentId, achievementId])\n  @@map(\"student_achievements\")\n}\n\nmodel StudentStreak {\n  id                 Int       @id @default(autoincrement())\n  studentId          Int       @map(\"student_id\")\n  classId            Int       @map(\"class_id\")\n  currentStreak      Int       @default(0) @map(\"current_streak\")\n  longestStreak      Int       @default(0) @map(\"longest_streak\")\n  lastAttendanceDate DateTime? @map(\"last_attendance_date\") @db.Date\n  streakStartDate    DateTime? @map(\"streak_start_date\") @db.Date\n  createdAt          DateTime  @default(now()) @map(\"created_at\")\n  updatedAt          DateTime  @updatedAt @map(\"updated_at\")\n\n  student Student @relation(fields: [studentId], references: [id])\n  class   Class   @relation(fields: [classId], references: [id])\n\n  @@unique([studentId, classId])\n  @@map(\"student_streaks\")\n}\n\nmodel LeaderboardRanking {\n  id                Int      @id @default(autoincrement())\n  studentId         Int      @map(\"student_id\")\n  classId           Int?     @map(\"class_id\")\n  departmentId      Int?     @map(\"department_id\")\n  period            String\n  scope             String\n  rankPosition      Int      @map(\"rank_position\")\n  totalPoints       Int      @default(0) @map(\"total_points\")\n  attendanceRate    Decimal? @map(\"attendance_rate\") @db.Decimal(5, 2)\n  streakDays        Int      @default(0) @map(\"streak_days\")\n  achievementsCount Int      @default(0) @map(\"achievements_count\")\n  periodStart       DateTime @map(\"period_start\") @db.Date\n  periodEnd         DateTime @map(\"period_end\") @db.Date\n  createdAt         DateTime @default(now()) @map(\"created_at\")\n\n  student    Student     @relation(fields: [studentId], references: [id])\n  class      Class?      @relation(fields: [classId], references: [id])\n  department Department? @relation(fields: [departmentId], references: [id])\n\n  @@unique([studentId, period, scope, periodStart])\n  @@map(\"leaderboard_rankings\")\n}\n\nmodel GeofenceSettings {\n  id                Int      @id @default(autoincrement())\n  defaultRadius     Int      @default(100) @map(\"default_radius\")\n  enabled           Boolean  @default(true)\n  allowOverride     Boolean  @default(true) @map(\"allow_override\")\n  accuracyThreshold Float    @default(50.0) @map(\"accuracy_threshold\")\n  createdAt         DateTime @default(now()) @map(\"created_at\")\n  updatedAt         DateTime @updatedAt @map(\"updated_at\")\n\n  @@map(\"geofence_settings\")\n}\n\nmodel ClassLocation {\n  id        Int      @id @default(autoincrement())\n  classId   Int      @map(\"class_id\")\n  name      String\n  latitude  Float\n  longitude Float\n  radius    Int      @default(100)\n  isActive  Boolean  @default(true) @map(\"is_active\")\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n\n  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)\n\n  @@map(\"class_locations\")\n}\n",
  "inlineSchemaHash": "7a20243bdb3519200a5e362d67eea28ffee097b8a587ace088a5cbf73d7bded0",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"UserStatus\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"avatar_url\"},{\"name\":\"lastSeen\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"last_seen\"},{\"name\":\"lastLogin\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"last_login\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"Admin\",\"relationName\":\"AdminToUser\"},{\"name\":\"staff\",\"kind\":\"object\",\"type\":\"Staff\",\"relationName\":\"StaffToUser\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToUser\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"}],\"dbName\":\"users\"},\"Admin\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"user_id\"},{\"name\":\"adminLevel\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"admin_level\"},{\"name\":\"permissions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AdminToUser\"}],\"dbName\":\"admins\"},\"Staff\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"user_id\"},{\"name\":\"employeeId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"employee_id\"},{\"name\":\"department\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"joinDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"join_date\"},{\"name\":\"salary\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"officeLocation\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"office_location\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StaffToUser\"},{\"name\":\"classes\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"ClassToStaff\"},{\"name\":\"attendanceSessions\",\"kind\":\"object\",\"type\":\"AttendanceSession\",\"relationName\":\"AttendanceSessionToStaff\"},{\"name\":\"attendanceRecords\",\"kind\":\"object\",\"type\":\"AttendanceRecord\",\"relationName\":\"AttendanceRecordToStaff\"},{\"name\":\"absenceJustifications\",\"kind\":\"object\",\"type\":\"AbsenceJustification\",\"relationName\":\"AbsenceJustificationToStaff\"},{\"name\":\"departments\",\"kind\":\"object\",\"type\":\"Department\",\"relationName\":\"DepartmentToStaff\"},{\"name\":\"studentAlerts\",\"kind\":\"object\",\"type\":\"StudentAlert\",\"relationName\":\"StaffToStudentAlert\"}],\"dbName\":\"staff\"},\"Student\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"user_id\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"student_id\"},{\"name\":\"class\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"section\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"year\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enrollmentDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"enrollment_date\"},{\"name\":\"gpa\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"parentEmail\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"parent_email\"},{\"name\":\"parentPhone\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"parent_phone\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StudentToUser\"},{\"name\":\"classEnrollments\",\"kind\":\"object\",\"type\":\"ClassEnrollment\",\"relationName\":\"ClassEnrollmentToStudent\"},{\"name\":\"attendanceRecords\",\"kind\":\"object\",\"type\":\"AttendanceRecord\",\"relationName\":\"AttendanceRecordToStudent\"},{\"name\":\"absenceJustifications\",\"kind\":\"object\",\"type\":\"AbsenceJustification\",\"relationName\":\"AbsenceJustificationToStudent\"},{\"name\":\"studentRiskTracking\",\"kind\":\"object\",\"type\":\"StudentRiskTracking\",\"relationName\":\"StudentToStudentRiskTracking\"},{\"name\":\"studentAlerts\",\"kind\":\"object\",\"type\":\"StudentAlert\",\"relationName\":\"StudentToStudentAlert\"},{\"name\":\"studentPoints\",\"kind\":\"object\",\"type\":\"StudentPoint\",\"relationName\":\"StudentToStudentPoint\"},{\"name\":\"studentAchievements\",\"kind\":\"object\",\"type\":\"StudentAchievement\",\"relationName\":\"StudentToStudentAchievement\"},{\"name\":\"studentStreaks\",\"kind\":\"object\",\"type\":\"StudentStreak\",\"relationName\":\"StudentToStudentStreak\"},{\"name\":\"leaderboardRankings\",\"kind\":\"object\",\"type\":\"LeaderboardRanking\",\"relationName\":\"LeaderboardRankingToStudent\"}],\"dbName\":\"students\"},\"Class\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"facultyId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"faculty_id\"},{\"name\":\"room\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"capacity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"schedule\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"department\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"semester\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"academicYear\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"academic_year\"},{\"name\":\"credits\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"classType\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"class_type\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"latitude\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"longitude\"},{\"name\":\"geofenceRadius\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"geofence_radius\"},{\"name\":\"geofenceEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"geofence_enabled\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"faculty\",\"kind\":\"object\",\"type\":\"Staff\",\"relationName\":\"ClassToStaff\"},{\"name\":\"classEnrollments\",\"kind\":\"object\",\"type\":\"ClassEnrollment\",\"relationName\":\"ClassToClassEnrollment\"},{\"name\":\"attendanceRecords\",\"kind\":\"object\",\"type\":\"AttendanceRecord\",\"relationName\":\"AttendanceRecordToClass\"},{\"name\":\"attendanceSessions\",\"kind\":\"object\",\"type\":\"AttendanceSession\",\"relationName\":\"AttendanceSessionToClass\"},{\"name\":\"absenceJustifications\",\"kind\":\"object\",\"type\":\"AbsenceJustification\",\"relationName\":\"AbsenceJustificationToClass\"},{\"name\":\"studentPoints\",\"kind\":\"object\",\"type\":\"StudentPoint\",\"relationName\":\"ClassToStudentPoint\"},{\"name\":\"studentStreaks\",\"kind\":\"object\",\"type\":\"StudentStreak\",\"relationName\":\"ClassToStudentStreak\"},{\"name\":\"leaderboardRankings\",\"kind\":\"object\",\"type\":\"LeaderboardRanking\",\"relationName\":\"ClassToLeaderboardRanking\"},{\"name\":\"classLocations\",\"kind\":\"object\",\"type\":\"ClassLocation\",\"relationName\":\"ClassToClassLocation\"}],\"dbName\":\"classes\"},\"ClassEnrollment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"student_id\"},{\"name\":\"classId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"class_id\"},{\"name\":\"enrollmentDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"enrollment_date\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grade\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"ClassEnrollmentToStudent\"},{\"name\":\"class\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"ClassToClassEnrollment\"}],\"dbName\":\"class_enrollments\"},\"AttendanceRecord\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"student_id\"},{\"name\":\"classId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"class_id\"},{\"name\":\"sessionDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"session_date\"},{\"name\":\"sessionTime\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"session_time\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AttendanceStatus\"},{\"name\":\"checkInTime\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"check_in_time\"},{\"name\":\"method\",\"kind\":\"enum\",\"type\":\"AttendanceMethod\"},{\"name\":\"qrSessionId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"qr_session_id\"},{\"name\":\"scanTimestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"scan_timestamp\"},{\"name\":\"isJustified\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_justified\"},{\"name\":\"justificationId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"justification_id\"},{\"name\":\"studentLatitude\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"student_latitude\"},{\"name\":\"studentLongitude\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"student_longitude\"},{\"name\":\"distanceFromClass\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"distance_from_class\"},{\"name\":\"locationVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"location_verified\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"recordedBy\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"recorded_by\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"AttendanceRecordToStudent\"},{\"name\":\"class\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"AttendanceRecordToClass\"},{\"name\":\"recordedByStaff\",\"kind\":\"object\",\"type\":\"Staff\",\"relationName\":\"AttendanceRecordToStaff\"},{\"name\":\"absenceJustifications\",\"kind\":\"object\",\"type\":\"AbsenceJustification\",\"relationName\":\"AbsenceJustificationToAttendanceRecord\"}],\"dbName\":\"attendance_records\"},\"AttendanceSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"session_id\"},{\"name\":\"classId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"class_id\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"created_by\"},{\"name\":\"sessionDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"session_date\"},{\"name\":\"sessionTime\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"session_time\"},{\"name\":\"sessionType\",\"kind\":\"enum\",\"type\":\"SessionType\",\"dbName\":\"session_type\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"plannedTopic\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"planned_topic\"},{\"name\":\"targetLearning\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"target_learning\"},{\"name\":\"targetLevel\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"target_level\"},{\"name\":\"planningStatus\",\"kind\":\"enum\",\"type\":\"PlanningStatus\",\"dbName\":\"planning_status\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"latitude\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"longitude\"},{\"name\":\"geofenceRadius\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"geofence_radius\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"expires_at\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"class\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"AttendanceSessionToClass\"},{\"name\":\"creator\",\"kind\":\"object\",\"type\":\"Staff\",\"relationName\":\"AttendanceSessionToStaff\"},{\"name\":\"qrSessions\",\"kind\":\"object\",\"type\":\"QRSession\",\"relationName\":\"AttendanceSessionToQRSession\"}],\"dbName\":\"attendance_sessions\"},\"QRSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"session_id\"},{\"name\":\"attendanceSessionId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"attendance_session_id\"},{\"name\":\"qrData\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"qr_data\"},{\"name\":\"scanCount\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"scan_count\"},{\"name\":\"maxScans\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"max_scans\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"expires_at\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"attendanceSession\",\"kind\":\"object\",\"type\":\"AttendanceSession\",\"relationName\":\"AttendanceSessionToQRSession\"}],\"dbName\":\"qr_sessions\"},\"AbsenceJustification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"student_id\"},{\"name\":\"classId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"class_id\"},{\"name\":\"attendanceRecordId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"attendance_record_id\"},{\"name\":\"absenceDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"absence_date\"},{\"name\":\"reason\",\"kind\":\"enum\",\"type\":\"JustificationReason\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documents\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"JustificationStatus\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"submitted_at\"},{\"name\":\"reviewedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"reviewed_at\"},{\"name\":\"reviewedBy\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"reviewed_by\"},{\"name\":\"reviewNote\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"review_note\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"AbsenceJustificationToStudent\"},{\"name\":\"class\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"AbsenceJustificationToClass\"},{\"name\":\"attendanceRecord\",\"kind\":\"object\",\"type\":\"AttendanceRecord\",\"relationName\":\"AbsenceJustificationToAttendanceRecord\"},{\"name\":\"reviewedByStaff\",\"kind\":\"object\",\"type\":\"Staff\",\"relationName\":\"AbsenceJustificationToStaff\"}],\"dbName\":\"absence_justifications\"},\"Department\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"headId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"head_id\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"DepartmentType\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"DepartmentStatus\"},{\"name\":\"programsCount\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"programs_count\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"head\",\"kind\":\"object\",\"type\":\"Staff\",\"relationName\":\"DepartmentToStaff\"},{\"name\":\"leaderboardRankings\",\"kind\":\"object\",\"type\":\"LeaderboardRanking\",\"relationName\":\"DepartmentToLeaderboardRanking\"}],\"dbName\":\"departments\"},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"user_id\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"read\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"priority\",\"kind\":\"enum\",\"type\":\"NotificationPriority\"},{\"name\":\"data\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"expires_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"}],\"dbName\":\"notifications\"},\"StudentRiskTracking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"student_id\"},{\"name\":\"riskLevel\",\"kind\":\"enum\",\"type\":\"RiskLevel\",\"dbName\":\"risk_level\"},{\"name\":\"attendanceRate\",\"kind\":\"scalar\",\"type\":\"Decimal\",\"dbName\":\"attendance_rate\"},{\"name\":\"consecutiveAbsences\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"consecutive_absences\"},{\"name\":\"totalAbsences\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"total_absences\"},{\"name\":\"lastAttendanceDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"last_attendance_date\"},{\"name\":\"parentEmail\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"parent_email\"},{\"name\":\"parentPhone\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"parent_phone\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToStudentRiskTracking\"}],\"dbName\":\"student_risk_tracking\"},\"StudentAlert\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"student_id\"},{\"name\":\"alertType\",\"kind\":\"enum\",\"type\":\"AlertType\",\"dbName\":\"alert_type\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recipient\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AlertStatus\"},{\"name\":\"sentBy\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"sent_by\"},{\"name\":\"sentAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"sent_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToStudentAlert\"},{\"name\":\"sentByStaff\",\"kind\":\"object\",\"type\":\"Staff\",\"relationName\":\"StaffToStudentAlert\"}],\"dbName\":\"student_alerts\"},\"StudentPoint\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"student_id\"},{\"name\":\"classId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"class_id\"},{\"name\":\"points\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"pointType\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"point_type\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"referenceId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"reference_id\"},{\"name\":\"awardedBy\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"awarded_by\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToStudentPoint\"},{\"name\":\"class\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"ClassToStudentPoint\"}],\"dbName\":\"student_points\"},\"Achievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pointsReward\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"points_reward\"},{\"name\":\"requirementType\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"requirement_type\"},{\"name\":\"requirementValue\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"requirement_value\"},{\"name\":\"requirementPeriod\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"requirement_period\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_active\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"studentAchievements\",\"kind\":\"object\",\"type\":\"StudentAchievement\",\"relationName\":\"AchievementToStudentAchievement\"}],\"dbName\":\"achievements\"},\"StudentAchievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"student_id\"},{\"name\":\"achievementId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"achievement_id\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isEarned\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_earned\"},{\"name\":\"earnedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"earned_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToStudentAchievement\"},{\"name\":\"achievement\",\"kind\":\"object\",\"type\":\"Achievement\",\"relationName\":\"AchievementToStudentAchievement\"}],\"dbName\":\"student_achievements\"},\"StudentStreak\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"student_id\"},{\"name\":\"classId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"class_id\"},{\"name\":\"currentStreak\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"current_streak\"},{\"name\":\"longestStreak\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"longest_streak\"},{\"name\":\"lastAttendanceDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"last_attendance_date\"},{\"name\":\"streakStartDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"streak_start_date\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToStudentStreak\"},{\"name\":\"class\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"ClassToStudentStreak\"}],\"dbName\":\"student_streaks\"},\"LeaderboardRanking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"student_id\"},{\"name\":\"classId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"class_id\"},{\"name\":\"departmentId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"department_id\"},{\"name\":\"period\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rankPosition\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"rank_position\"},{\"name\":\"totalPoints\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"total_points\"},{\"name\":\"attendanceRate\",\"kind\":\"scalar\",\"type\":\"Decimal\",\"dbName\":\"attendance_rate\"},{\"name\":\"streakDays\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"streak_days\"},{\"name\":\"achievementsCount\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"achievements_count\"},{\"name\":\"periodStart\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"period_start\"},{\"name\":\"periodEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"period_end\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"LeaderboardRankingToStudent\"},{\"name\":\"class\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"ClassToLeaderboardRanking\"},{\"name\":\"department\",\"kind\":\"object\",\"type\":\"Department\",\"relationName\":\"DepartmentToLeaderboardRanking\"}],\"dbName\":\"leaderboard_rankings\"},\"GeofenceSettings\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"defaultRadius\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"default_radius\"},{\"name\":\"enabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"allowOverride\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"allow_override\"},{\"name\":\"accuracyThreshold\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"accuracy_threshold\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"}],\"dbName\":\"geofence_settings\"},\"ClassLocation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"classId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"class_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"radius\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_active\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"class\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"ClassToClassLocation\"}],\"dbName\":\"class_locations\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

