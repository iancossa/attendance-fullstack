

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "rhel-openssl-1.0.x", "rhel-openssl-1.1.x", "rhel-openssl-3.0.x"]
  output   = "../../../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  password   String
  name       String
  employeeId String?      @unique
  role       String       @default("employee") // "admin", "employee", "student"
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  attendance Attendance[]
  student    Student?     // One-to-one relation for student users
}

model Student {
  id             Int                 @id @default(autoincrement())
  studentId      String              @unique
  userId         Int?                @unique // Link to User table
  name           String
  email          String              @unique
  password       String              @default("$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi")
  phone          String?
  department     String
  class          String
  section        String
  year           String
  enrollmentDate DateTime            @default(now())
  status         String              @default("Active")
  gpa            Float?              @default(0.0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  user           User?               @relation(fields: [userId], references: [id])
  attendance     StudentAttendance[]
}

model StudentAttendance {
  id              Int      @id @default(autoincrement())
  studentId       Int
  classId         String
  date            DateTime @default(now())
  status          String   // "present", "absent", "late"
  timestamp       String?
  studentLatitude Float?   // Student's GPS location when marking attendance
  studentLongitude Float?
  distanceFromClass Float? // Distance in meters from classroom
  locationVerified Boolean @default(false)
  student         Student  @relation(fields: [studentId], references: [id])
  createdAt       DateTime @default(now())
}

model Attendance {
  id         Int      @id @default(autoincrement())
  employeeId String
  type       String   // "check-in" or "check-out"
  timestamp  DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model Class {
  id          Int      @id @default(autoincrement())
  name        String
  code        String   @unique
  faculty     String
  maxStudents Int?
  schedule    String?
  room        String?
  latitude    Float?   // Classroom GPS coordinates
  longitude   Float?
  geofenceRadius Int   @default(100) // Radius in meters
  geofenceEnabled Boolean @default(true)
  createdBy   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QRSession {
  id          String   @id // sessionId from QR generation
  classId     String
  className   String
  latitude    Float?   // Session location coordinates
  longitude   Float?
  radius      Int      @default(100) // Geofence radius in meters
  createdBy   String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  isActive    Boolean  @default(true)
}

model GeofenceSettings {
  id              Int     @id @default(autoincrement())
  defaultRadius   Int     @default(100) // Default radius in meters
  enabled         Boolean @default(true)
  allowOverride   Boolean @default(true) // Allow admin to override failed validations
  accuracyThreshold Float @default(50.0) // GPS accuracy threshold in meters
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
