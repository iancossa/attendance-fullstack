
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  status: 'status',
  phone: 'phone',
  avatarUrl: 'avatarUrl',
  lastSeen: 'lastSeen',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  adminLevel: 'adminLevel',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeId: 'employeeId',
  department: 'department',
  position: 'position',
  joinDate: 'joinDate',
  salary: 'salary',
  officeLocation: 'officeLocation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  studentId: 'studentId',
  class: 'class',
  section: 'section',
  year: 'year',
  enrollmentDate: 'enrollmentDate',
  gpa: 'gpa',
  parentEmail: 'parentEmail',
  parentPhone: 'parentPhone',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  subject: 'subject',
  description: 'description',
  facultyId: 'facultyId',
  room: 'room',
  capacity: 'capacity',
  schedule: 'schedule',
  department: 'department',
  semester: 'semester',
  academicYear: 'academicYear',
  credits: 'credits',
  classType: 'classType',
  latitude: 'latitude',
  longitude: 'longitude',
  geofenceRadius: 'geofenceRadius',
  geofenceEnabled: 'geofenceEnabled',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassEnrollmentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  enrollmentDate: 'enrollmentDate',
  status: 'status',
  grade: 'grade',
  createdAt: 'createdAt'
};

exports.Prisma.AttendanceRecordScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  sessionDate: 'sessionDate',
  sessionTime: 'sessionTime',
  status: 'status',
  checkInTime: 'checkInTime',
  method: 'method',
  qrSessionId: 'qrSessionId',
  scanTimestamp: 'scanTimestamp',
  isJustified: 'isJustified',
  justificationId: 'justificationId',
  studentLatitude: 'studentLatitude',
  studentLongitude: 'studentLongitude',
  distanceFromClass: 'distanceFromClass',
  locationVerified: 'locationVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  recordedBy: 'recordedBy'
};

exports.Prisma.AttendanceSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  classId: 'classId',
  createdBy: 'createdBy',
  sessionDate: 'sessionDate',
  sessionTime: 'sessionTime',
  sessionType: 'sessionType',
  location: 'location',
  plannedTopic: 'plannedTopic',
  targetLearning: 'targetLearning',
  targetLevel: 'targetLevel',
  planningStatus: 'planningStatus',
  notes: 'notes',
  latitude: 'latitude',
  longitude: 'longitude',
  geofenceRadius: 'geofenceRadius',
  expiresAt: 'expiresAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QRSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  attendanceSessionId: 'attendanceSessionId',
  qrData: 'qrData',
  scanCount: 'scanCount',
  maxScans: 'maxScans',
  expiresAt: 'expiresAt',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.AbsenceJustificationScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  attendanceRecordId: 'attendanceRecordId',
  absenceDate: 'absenceDate',
  reason: 'reason',
  description: 'description',
  documents: 'documents',
  status: 'status',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  reviewNote: 'reviewNote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  headId: 'headId',
  type: 'type',
  status: 'status',
  programsCount: 'programsCount',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  read: 'read',
  priority: 'priority',
  data: 'data',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.StudentRiskTrackingScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  riskLevel: 'riskLevel',
  attendanceRate: 'attendanceRate',
  consecutiveAbsences: 'consecutiveAbsences',
  totalAbsences: 'totalAbsences',
  lastAttendanceDate: 'lastAttendanceDate',
  parentEmail: 'parentEmail',
  parentPhone: 'parentPhone',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentAlertScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  alertType: 'alertType',
  message: 'message',
  recipient: 'recipient',
  status: 'status',
  sentBy: 'sentBy',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.StudentPointScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  points: 'points',
  pointType: 'pointType',
  description: 'description',
  referenceId: 'referenceId',
  awardedBy: 'awardedBy',
  createdAt: 'createdAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  icon: 'icon',
  pointsReward: 'pointsReward',
  requirementType: 'requirementType',
  requirementValue: 'requirementValue',
  requirementPeriod: 'requirementPeriod',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.StudentAchievementScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  achievementId: 'achievementId',
  progress: 'progress',
  isEarned: 'isEarned',
  earnedAt: 'earnedAt',
  createdAt: 'createdAt'
};

exports.Prisma.StudentStreakScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  currentStreak: 'currentStreak',
  longestStreak: 'longestStreak',
  lastAttendanceDate: 'lastAttendanceDate',
  streakStartDate: 'streakStartDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaderboardRankingScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  departmentId: 'departmentId',
  period: 'period',
  scope: 'scope',
  rankPosition: 'rankPosition',
  totalPoints: 'totalPoints',
  attendanceRate: 'attendanceRate',
  streakDays: 'streakDays',
  achievementsCount: 'achievementsCount',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  createdAt: 'createdAt'
};

exports.Prisma.GeofenceSettingsScalarFieldEnum = {
  id: 'id',
  defaultRadius: 'defaultRadius',
  enabled: 'enabled',
  allowOverride: 'allowOverride',
  accuracyThreshold: 'accuracyThreshold',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassLocationScalarFieldEnum = {
  id: 'id',
  classId: 'classId',
  name: 'name',
  latitude: 'latitude',
  longitude: 'longitude',
  radius: 'radius',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  admin: 'admin',
  staff: 'staff',
  student: 'student'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  present: 'present',
  absent: 'absent',
  late: 'late',
  excused: 'excused'
};

exports.AttendanceMethod = exports.$Enums.AttendanceMethod = {
  qr: 'qr',
  manual: 'manual',
  hybrid: 'hybrid'
};

exports.SessionType = exports.$Enums.SessionType = {
  lecture: 'lecture',
  lab: 'lab',
  tutorial: 'tutorial',
  exam: 'exam'
};

exports.PlanningStatus = exports.$Enums.PlanningStatus = {
  planned: 'planned',
  in_progress: 'in_progress',
  completed: 'completed'
};

exports.JustificationReason = exports.$Enums.JustificationReason = {
  medical: 'medical',
  family: 'family',
  emergency: 'emergency',
  academic: 'academic',
  other: 'other'
};

exports.JustificationStatus = exports.$Enums.JustificationStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.DepartmentType = exports.$Enums.DepartmentType = {
  Technology: 'Technology',
  Engineering: 'Engineering',
  Science: 'Science',
  Arts: 'Arts',
  Business: 'Business',
  Other: 'Other'
};

exports.DepartmentStatus = exports.$Enums.DepartmentStatus = {
  Active: 'Active',
  Inactive: 'Inactive'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  absence_reminder: 'absence_reminder',
  justification_status: 'justification_status',
  attendance_alert: 'attendance_alert',
  class_reminder: 'class_reminder'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  low: 'low',
  normal: 'normal',
  high: 'high',
  urgent: 'urgent'
};

exports.RiskLevel = exports.$Enums.RiskLevel = {
  low: 'low',
  medium: 'medium',
  high: 'high',
  critical: 'critical'
};

exports.AlertType = exports.$Enums.AlertType = {
  notification: 'notification',
  email: 'email',
  parent_email: 'parent_email',
  parent_sms: 'parent_sms'
};

exports.AlertStatus = exports.$Enums.AlertStatus = {
  pending: 'pending',
  sent: 'sent',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  User: 'User',
  Admin: 'Admin',
  Staff: 'Staff',
  Student: 'Student',
  Class: 'Class',
  ClassEnrollment: 'ClassEnrollment',
  AttendanceRecord: 'AttendanceRecord',
  AttendanceSession: 'AttendanceSession',
  QRSession: 'QRSession',
  AbsenceJustification: 'AbsenceJustification',
  Department: 'Department',
  Notification: 'Notification',
  StudentRiskTracking: 'StudentRiskTracking',
  StudentAlert: 'StudentAlert',
  StudentPoint: 'StudentPoint',
  Achievement: 'Achievement',
  StudentAchievement: 'StudentAchievement',
  StudentStreak: 'StudentStreak',
  LeaderboardRanking: 'LeaderboardRanking',
  GeofenceSettings: 'GeofenceSettings',
  ClassLocation: 'ClassLocation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
